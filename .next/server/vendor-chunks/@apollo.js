"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@apollo";
exports.ids = ["vendor-chunks/@apollo"];
exports.modules = {

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/AccumulateMultipartResponsesLink.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/AccumulateMultipartResponsesLink.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AccumulateMultipartResponsesLink = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/index.js\");\nconst utilities_1 = __webpack_require__(/*! @apollo/client/utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/index.js\");\nclass AccumulateMultipartResponsesLink extends client_1.ApolloLink {\n    constructor(config){\n        super();\n        this.maxDelay = config.cutoffDelay;\n    }\n    request(operation, forward) {\n        if (!forward) {\n            throw new Error(\"This is not a terminal link!\");\n        }\n        const operationContainsMultipartDirectives = (0, utilities_1.hasDirectives)([\n            \"defer\"\n        ], operation.query);\n        const upstream = forward(operation);\n        if (!operationContainsMultipartDirectives) return upstream;\n        // TODO: this could be overwritten with a `@AccumulateMultipartResponsesConfig(maxDelay: 1000)` directive on the operation\n        const maxDelay = this.maxDelay;\n        let accumulatedData, maxDelayTimeout;\n        return new utilities_1.Observable((subscriber)=>{\n            const upstreamSubscription = upstream.subscribe({\n                next: (result)=>{\n                    if (accumulatedData) {\n                        if (accumulatedData.data && \"incremental\" in result) {\n                            accumulatedData.data = (0, utilities_1.mergeIncrementalData)(accumulatedData.data, result);\n                        } else if (result.data) {\n                            accumulatedData.data = result.data;\n                        }\n                        if (result.errors) {\n                            accumulatedData.errors = [\n                                ...accumulatedData.errors || [],\n                                ...result.errors || []\n                            ];\n                        }\n                        // the spec is not mentioning on how to merge these, so we just do a shallow merge?\n                        if (result.extensions) accumulatedData.extensions = Object.assign(Object.assign({}, accumulatedData.extensions), result.extensions);\n                    } else {\n                        accumulatedData = result;\n                    }\n                    if (!maxDelay) {\n                        flushAccumulatedData();\n                    } else if (!maxDelayTimeout) {\n                        maxDelayTimeout = setTimeout(flushAccumulatedData, maxDelay);\n                    }\n                },\n                error: (error)=>{\n                    if (maxDelayTimeout) clearTimeout(maxDelayTimeout);\n                    subscriber.error(error);\n                },\n                complete: ()=>{\n                    if (maxDelayTimeout) {\n                        clearTimeout(maxDelayTimeout);\n                        flushAccumulatedData();\n                    }\n                    subscriber.complete();\n                }\n            });\n            function flushAccumulatedData() {\n                subscriber.next(accumulatedData);\n                subscriber.complete();\n                upstreamSubscription.unsubscribe();\n            }\n            return function cleanUp() {\n                clearTimeout(maxDelayTimeout);\n                upstreamSubscription.unsubscribe();\n            };\n        });\n    }\n}\nexports.AccumulateMultipartResponsesLink = AccumulateMultipartResponsesLink; //# sourceMappingURL=AccumulateMultipartResponsesLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL0FjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3Q0FBd0MsR0FBRyxLQUFLO0FBQ2hELE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLG9FQUFnQjtBQUN6QyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyx3RkFBMEI7QUFDdEQsTUFBTUYseUNBQXlDQyxTQUFTRyxVQUFVO0lBQzlEQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSztRQUNMLElBQUksQ0FBQ0MsUUFBUSxHQUFHRCxPQUFPRSxXQUFXO0lBQ3RDO0lBQ0FDLFFBQVFDLFNBQVMsRUFBRUMsT0FBTyxFQUFFO1FBQ3hCLElBQUksQ0FBQ0EsU0FBUztZQUNWLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLE1BQU1DLHVDQUF1QyxDQUFDLEdBQUdWLFlBQVlXLGFBQWEsRUFBRTtZQUFDO1NBQVEsRUFBRUosVUFBVUssS0FBSztRQUN0RyxNQUFNQyxXQUFXTCxRQUFRRDtRQUN6QixJQUFJLENBQUNHLHNDQUNELE9BQU9HO1FBQ1gsMEhBQTBIO1FBQzFILE1BQU1ULFdBQVcsSUFBSSxDQUFDQSxRQUFRO1FBQzlCLElBQUlVLGlCQUFpQkM7UUFDckIsT0FBTyxJQUFJZixZQUFZZ0IsVUFBVSxDQUFDLENBQUNDO1lBQy9CLE1BQU1DLHVCQUF1QkwsU0FBU00sU0FBUyxDQUFDO2dCQUM1Q0MsTUFBTSxDQUFDQztvQkFDSCxJQUFJUCxpQkFBaUI7d0JBQ2pCLElBQUlBLGdCQUFnQlEsSUFBSSxJQUFJLGlCQUFpQkQsUUFBUTs0QkFDakRQLGdCQUFnQlEsSUFBSSxHQUFHLENBQUMsR0FBR3RCLFlBQVl1QixvQkFBb0IsRUFBRVQsZ0JBQWdCUSxJQUFJLEVBQUVEO3dCQUN2RixPQUNLLElBQUlBLE9BQU9DLElBQUksRUFBRTs0QkFDbEJSLGdCQUFnQlEsSUFBSSxHQUFHRCxPQUFPQyxJQUFJO3dCQUN0Qzt3QkFDQSxJQUFJRCxPQUFPRyxNQUFNLEVBQUU7NEJBQ2ZWLGdCQUFnQlUsTUFBTSxHQUFHO21DQUNqQlYsZ0JBQWdCVSxNQUFNLElBQUksRUFBRTttQ0FDNUJILE9BQU9HLE1BQU0sSUFBSSxFQUFFOzZCQUMxQjt3QkFDTDt3QkFDQSxtRkFBbUY7d0JBQ25GLElBQUlILE9BQU9JLFVBQVUsRUFDakJYLGdCQUFnQlcsVUFBVSxHQUFHaEMsT0FBT2lDLE1BQU0sQ0FBQ2pDLE9BQU9pQyxNQUFNLENBQUMsQ0FBQyxHQUFHWixnQkFBZ0JXLFVBQVUsR0FBR0osT0FBT0ksVUFBVTtvQkFDbkgsT0FDSzt3QkFDRFgsa0JBQWtCTztvQkFDdEI7b0JBQ0EsSUFBSSxDQUFDakIsVUFBVTt3QkFDWHVCO29CQUNKLE9BQ0ssSUFBSSxDQUFDWixpQkFBaUI7d0JBQ3ZCQSxrQkFBa0JhLFdBQVdELHNCQUFzQnZCO29CQUN2RDtnQkFDSjtnQkFDQXlCLE9BQU8sQ0FBQ0E7b0JBQ0osSUFBSWQsaUJBQ0FlLGFBQWFmO29CQUNqQkUsV0FBV1ksS0FBSyxDQUFDQTtnQkFDckI7Z0JBQ0FFLFVBQVU7b0JBQ04sSUFBSWhCLGlCQUFpQjt3QkFDakJlLGFBQWFmO3dCQUNiWTtvQkFDSjtvQkFDQVYsV0FBV2MsUUFBUTtnQkFDdkI7WUFDSjtZQUNBLFNBQVNKO2dCQUNMVixXQUFXRyxJQUFJLENBQUNOO2dCQUNoQkcsV0FBV2MsUUFBUTtnQkFDbkJiLHFCQUFxQmMsV0FBVztZQUNwQztZQUNBLE9BQU8sU0FBU0M7Z0JBQ1pILGFBQWFmO2dCQUNiRyxxQkFBcUJjLFdBQVc7WUFDcEM7UUFDSjtJQUNKO0FBQ0o7QUFDQXJDLHdDQUF3QyxHQUFHRSxrQ0FDM0MsNERBQTREIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZXhwZXJpbWVudGFsLW5leHRqcy1hcHAtc3VwcG9ydC9kaXN0L3Nzci9BY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGluay5qcz9mNDJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGluayA9IHZvaWQgMDtcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIkBhcG9sbG8vY2xpZW50XCIpO1xuY29uc3QgdXRpbGl0aWVzXzEgPSByZXF1aXJlKFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzXCIpO1xuY2xhc3MgQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbmsgZXh0ZW5kcyBjbGllbnRfMS5BcG9sbG9MaW5rIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5tYXhEZWxheSA9IGNvbmZpZy5jdXRvZmZEZWxheTtcbiAgICB9XG4gICAgcmVxdWVzdChvcGVyYXRpb24sIGZvcndhcmQpIHtcbiAgICAgICAgaWYgKCFmb3J3YXJkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGlzIG5vdCBhIHRlcm1pbmFsIGxpbmshXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbkNvbnRhaW5zTXVsdGlwYXJ0RGlyZWN0aXZlcyA9ICgwLCB1dGlsaXRpZXNfMS5oYXNEaXJlY3RpdmVzKShbXCJkZWZlclwiXSwgb3BlcmF0aW9uLnF1ZXJ5KTtcbiAgICAgICAgY29uc3QgdXBzdHJlYW0gPSBmb3J3YXJkKG9wZXJhdGlvbik7XG4gICAgICAgIGlmICghb3BlcmF0aW9uQ29udGFpbnNNdWx0aXBhcnREaXJlY3RpdmVzKVxuICAgICAgICAgICAgcmV0dXJuIHVwc3RyZWFtO1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGNvdWxkIGJlIG92ZXJ3cml0dGVuIHdpdGggYSBgQEFjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNDb25maWcobWF4RGVsYXk6IDEwMDApYCBkaXJlY3RpdmUgb24gdGhlIG9wZXJhdGlvblxuICAgICAgICBjb25zdCBtYXhEZWxheSA9IHRoaXMubWF4RGVsYXk7XG4gICAgICAgIGxldCBhY2N1bXVsYXRlZERhdGEsIG1heERlbGF5VGltZW91dDtcbiAgICAgICAgcmV0dXJuIG5ldyB1dGlsaXRpZXNfMS5PYnNlcnZhYmxlKChzdWJzY3JpYmVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB1cHN0cmVhbVN1YnNjcmlwdGlvbiA9IHVwc3RyZWFtLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dDogKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWNjdW11bGF0ZWREYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWNjdW11bGF0ZWREYXRhLmRhdGEgJiYgXCJpbmNyZW1lbnRhbFwiIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVkRGF0YS5kYXRhID0gKDAsIHV0aWxpdGllc18xLm1lcmdlSW5jcmVtZW50YWxEYXRhKShhY2N1bXVsYXRlZERhdGEuZGF0YSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0ZWREYXRhLmRhdGEgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0ZWREYXRhLmVycm9ycyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGFjY3VtdWxhdGVkRGF0YS5lcnJvcnMgfHwgW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4ocmVzdWx0LmVycm9ycyB8fCBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzcGVjIGlzIG5vdCBtZW50aW9uaW5nIG9uIGhvdyB0byBtZXJnZSB0aGVzZSwgc28gd2UganVzdCBkbyBhIHNoYWxsb3cgbWVyZ2U/XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmV4dGVuc2lvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0ZWREYXRhLmV4dGVuc2lvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFjY3VtdWxhdGVkRGF0YS5leHRlbnNpb25zKSwgcmVzdWx0LmV4dGVuc2lvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0ZWREYXRhID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWF4RGVsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsdXNoQWNjdW11bGF0ZWREYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIW1heERlbGF5VGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4RGVsYXlUaW1lb3V0ID0gc2V0VGltZW91dChmbHVzaEFjY3VtdWxhdGVkRGF0YSwgbWF4RGVsYXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXhEZWxheVRpbWVvdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobWF4RGVsYXlUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF4RGVsYXlUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobWF4RGVsYXlUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsdXNoQWNjdW11bGF0ZWREYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZsdXNoQWNjdW11bGF0ZWREYXRhKCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhY2N1bXVsYXRlZERhdGEpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB1cHN0cmVhbVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFuVXAoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KG1heERlbGF5VGltZW91dCk7XG4gICAgICAgICAgICAgICAgdXBzdHJlYW1TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbmsgPSBBY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGluaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rIiwiY2xpZW50XzEiLCJyZXF1aXJlIiwidXRpbGl0aWVzXzEiLCJBcG9sbG9MaW5rIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJtYXhEZWxheSIsImN1dG9mZkRlbGF5IiwicmVxdWVzdCIsIm9wZXJhdGlvbiIsImZvcndhcmQiLCJFcnJvciIsIm9wZXJhdGlvbkNvbnRhaW5zTXVsdGlwYXJ0RGlyZWN0aXZlcyIsImhhc0RpcmVjdGl2ZXMiLCJxdWVyeSIsInVwc3RyZWFtIiwiYWNjdW11bGF0ZWREYXRhIiwibWF4RGVsYXlUaW1lb3V0IiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZXIiLCJ1cHN0cmVhbVN1YnNjcmlwdGlvbiIsInN1YnNjcmliZSIsIm5leHQiLCJyZXN1bHQiLCJkYXRhIiwibWVyZ2VJbmNyZW1lbnRhbERhdGEiLCJlcnJvcnMiLCJleHRlbnNpb25zIiwiYXNzaWduIiwiZmx1c2hBY2N1bXVsYXRlZERhdGEiLCJzZXRUaW1lb3V0IiwiZXJyb3IiLCJjbGVhclRpbWVvdXQiLCJjb21wbGV0ZSIsInVuc3Vic2NyaWJlIiwiY2xlYW5VcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/AccumulateMultipartResponsesLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloNextAppProvider.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloNextAppProvider.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ApolloNextAppProvider = exports.ApolloClientSingleton = void 0;\nconst React = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/index.js\");\nconst RehydrationContext_1 = __webpack_require__(/*! ./RehydrationContext */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js\");\nexports.ApolloClientSingleton = Symbol.for(\"ApolloClientSingleton\");\nconst ApolloNextAppProvider = (_a)=>{\n    var _b;\n    var { makeClient, children } = _a, hydrationContextOptions = __rest(_a, [\n        \"makeClient\",\n        \"children\"\n    ]);\n    const clientRef = React.useRef();\n    if (false) {} else {\n        if (!clientRef.current) {\n            clientRef.current = makeClient();\n        }\n    }\n    return React.createElement(client_1.ApolloProvider, {\n        client: clientRef.current\n    }, React.createElement(RehydrationContext_1.RehydrationContextProvider, Object.assign({}, hydrationContextOptions), children));\n};\nexports.ApolloNextAppProvider = ApolloNextAppProvider; //# sourceMappingURL=ApolloNextAppProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloNextAppProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ApolloBackgroundQueryTransport = exports.ApolloSSRDataTransport = exports.ApolloResultCache = exports.ApolloRehydrationCache = void 0;\nexports.ApolloRehydrationCache = Symbol.for(\"ApolloRehydrationCache\");\nexports.ApolloResultCache = Symbol.for(\"ApolloResultCache\");\nexports.ApolloSSRDataTransport = Symbol.for(\"ApolloSSRDataTransport\");\nexports.ApolloBackgroundQueryTransport = Symbol.for(\"ApolloBackgroundQueryTransport\"); //# sourceMappingURL=ApolloRehydrateSymbols.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL0Fwb2xsb1JlaHlkcmF0ZVN5bWJvbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNDQUFzQyxHQUFHQSw4QkFBOEIsR0FBR0EseUJBQXlCLEdBQUdBLDhCQUE4QixHQUFHLEtBQUs7QUFDNUlBLDhCQUE4QixHQUFHTSxPQUFPQyxHQUFHLENBQUM7QUFDNUNQLHlCQUF5QixHQUFHTSxPQUFPQyxHQUFHLENBQUM7QUFDdkNQLDhCQUE4QixHQUFHTSxPQUFPQyxHQUFHLENBQUM7QUFDNUNQLHNDQUFzQyxHQUFHTSxPQUFPQyxHQUFHLENBQUMsbUNBQ3BELGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC9zc3IvQXBvbGxvUmVoeWRyYXRlU3ltYm9scy5qcz82NWVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BcG9sbG9CYWNrZ3JvdW5kUXVlcnlUcmFuc3BvcnQgPSBleHBvcnRzLkFwb2xsb1NTUkRhdGFUcmFuc3BvcnQgPSBleHBvcnRzLkFwb2xsb1Jlc3VsdENhY2hlID0gZXhwb3J0cy5BcG9sbG9SZWh5ZHJhdGlvbkNhY2hlID0gdm9pZCAwO1xuZXhwb3J0cy5BcG9sbG9SZWh5ZHJhdGlvbkNhY2hlID0gU3ltYm9sLmZvcihcIkFwb2xsb1JlaHlkcmF0aW9uQ2FjaGVcIik7XG5leHBvcnRzLkFwb2xsb1Jlc3VsdENhY2hlID0gU3ltYm9sLmZvcihcIkFwb2xsb1Jlc3VsdENhY2hlXCIpO1xuZXhwb3J0cy5BcG9sbG9TU1JEYXRhVHJhbnNwb3J0ID0gU3ltYm9sLmZvcihcIkFwb2xsb1NTUkRhdGFUcmFuc3BvcnRcIik7XG5leHBvcnRzLkFwb2xsb0JhY2tncm91bmRRdWVyeVRyYW5zcG9ydCA9IFN5bWJvbC5mb3IoXCJBcG9sbG9CYWNrZ3JvdW5kUXVlcnlUcmFuc3BvcnRcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BcG9sbG9SZWh5ZHJhdGVTeW1ib2xzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFwb2xsb0JhY2tncm91bmRRdWVyeVRyYW5zcG9ydCIsIkFwb2xsb1NTUkRhdGFUcmFuc3BvcnQiLCJBcG9sbG9SZXN1bHRDYWNoZSIsIkFwb2xsb1JlaHlkcmF0aW9uQ2FjaGUiLCJTeW1ib2wiLCJmb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRApolloClient.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRApolloClient.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NextSSRApolloClient = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/index.js\");\nconst utilities_1 = __webpack_require__(/*! @apollo/client/utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/index.js\");\nconst cache_1 = __webpack_require__(/*! @apollo/client/cache */ \"(ssr)/./node_modules/@apollo/client/cache/index.js\");\nconst lateInitializingQueue_1 = __webpack_require__(/*! ./lateInitializingQueue */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/lateInitializingQueue.js\");\nconst ApolloRehydrateSymbols_1 = __webpack_require__(/*! ./ApolloRehydrateSymbols */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js\");\nconst ts_invariant_1 = __importDefault(__webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.js\"));\nfunction getQueryManager(client) {\n    return client[\"queryManager\"];\n}\nclass NextSSRApolloClient extends client_1.ApolloClient {\n    constructor(options){\n        super(options);\n        this.rehydrationContext = {\n            incomingBackgroundQueries: []\n        };\n        this.simulatedStreamingQueries = new Map();\n        this.registerWindowHook();\n    }\n    identifyUniqueQuery(options) {\n        const transformedDocument = this.documentTransform.transformDocument(options.query);\n        const queryManager = getQueryManager(this);\n        // Calling `transformDocument` will add __typename but won't remove client\n        // directives, so we need to get the `serverQuery`.\n        const { serverQuery } = queryManager.getDocumentInfo(transformedDocument);\n        if (!serverQuery) {\n            throw new Error(\"could not identify unique query\");\n        }\n        const canonicalVariables = (0, cache_1.canonicalStringify)(options.variables || {});\n        const cacheKey = [\n            (0, utilities_1.print)(serverQuery),\n            canonicalVariables\n        ].toString();\n        return {\n            query: serverQuery,\n            cacheKey,\n            varJson: canonicalVariables\n        };\n    }\n    registerWindowHook() {\n        if (false) {}\n    }\n    watchQuery(options) {\n        if (true) {\n            if (options.fetchPolicy !== \"cache-only\" && options.fetchPolicy !== \"standby\") {\n                this.rehydrationContext.incomingBackgroundQueries.push(options);\n            }\n        }\n        const result = super.watchQuery(options);\n        return result;\n    }\n    setRehydrationContext(rehydrationContext) {\n        if (rehydrationContext.incomingBackgroundQueries !== this.rehydrationContext.incomingBackgroundQueries) rehydrationContext.incomingBackgroundQueries.push(...this.rehydrationContext.incomingBackgroundQueries.splice(0));\n        this.rehydrationContext = rehydrationContext;\n    }\n}\nexports.NextSSRApolloClient = NextSSRApolloClient; //# sourceMappingURL=NextSSRApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRApolloClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRInMemoryCache.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRInMemoryCache.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NextSSRInMemoryCache = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/index.js\");\nclass NextSSRInMemoryCache extends client_1.InMemoryCache {\n    constructor(config){\n        super(config);\n        this.rehydrationContext = {\n            incomingResults: [],\n            uninitialized: true\n        };\n    }\n    write(options) {\n        if (true) {\n            this.rehydrationContext.incomingResults.push(options);\n        }\n        return super.write(options);\n    }\n    setRehydrationContext(rehydrationContext) {\n        if (this.rehydrationContext.uninitialized) {\n            rehydrationContext.incomingResults.push(...this.rehydrationContext.incomingResults);\n        }\n        this.rehydrationContext = rehydrationContext;\n        this.rehydrationContext.uninitialized = false;\n    }\n}\nexports.NextSSRInMemoryCache = NextSSRInMemoryCache; //# sourceMappingURL=NextSSRInMemoryCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL05leHRTU1JJbk1lbW9yeUNhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw0QkFBNEIsR0FBRyxLQUFLO0FBQ3BDLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLG9FQUFnQjtBQUN6QyxNQUFNRiw2QkFBNkJDLFNBQVNFLGFBQWE7SUFDckRDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxrQkFBa0IsR0FBRztZQUN0QkMsaUJBQWlCLEVBQUU7WUFDbkJDLGVBQWU7UUFDbkI7SUFDSjtJQUNBQyxNQUFNQyxPQUFPLEVBQUU7UUFDWCxJQUFJLElBQTRCLEVBQUU7WUFDOUIsSUFBSSxDQUFDSixrQkFBa0IsQ0FBQ0MsZUFBZSxDQUFDSSxJQUFJLENBQUNEO1FBQ2pEO1FBQ0EsT0FBTyxLQUFLLENBQUNELE1BQU1DO0lBQ3ZCO0lBQ0FFLHNCQUFzQk4sa0JBQWtCLEVBQUU7UUFDdEMsSUFBSSxJQUFJLENBQUNBLGtCQUFrQixDQUFDRSxhQUFhLEVBQUU7WUFDdkNGLG1CQUFtQkMsZUFBZSxDQUFDSSxJQUFJLElBQUksSUFBSSxDQUFDTCxrQkFBa0IsQ0FBQ0MsZUFBZTtRQUN0RjtRQUNBLElBQUksQ0FBQ0Qsa0JBQWtCLEdBQUdBO1FBQzFCLElBQUksQ0FBQ0Esa0JBQWtCLENBQUNFLGFBQWEsR0FBRztJQUM1QztBQUNKO0FBQ0FWLDRCQUE0QixHQUFHRSxzQkFDL0IsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZXhwZXJpbWVudGFsLW5leHRqcy1hcHAtc3VwcG9ydC9kaXN0L3Nzci9OZXh0U1NSSW5NZW1vcnlDYWNoZS5qcz9hZjA2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5OZXh0U1NSSW5NZW1vcnlDYWNoZSA9IHZvaWQgMDtcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIkBhcG9sbG8vY2xpZW50XCIpO1xuY2xhc3MgTmV4dFNTUkluTWVtb3J5Q2FjaGUgZXh0ZW5kcyBjbGllbnRfMS5Jbk1lbW9yeUNhY2hlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgc3VwZXIoY29uZmlnKTtcbiAgICAgICAgdGhpcy5yZWh5ZHJhdGlvbkNvbnRleHQgPSB7XG4gICAgICAgICAgICBpbmNvbWluZ1Jlc3VsdHM6IFtdLFxuICAgICAgICAgICAgdW5pbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgd3JpdGUob3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLnJlaHlkcmF0aW9uQ29udGV4dC5pbmNvbWluZ1Jlc3VsdHMucHVzaChvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIud3JpdGUob3B0aW9ucyk7XG4gICAgfVxuICAgIHNldFJlaHlkcmF0aW9uQ29udGV4dChyZWh5ZHJhdGlvbkNvbnRleHQpIHtcbiAgICAgICAgaWYgKHRoaXMucmVoeWRyYXRpb25Db250ZXh0LnVuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHJlaHlkcmF0aW9uQ29udGV4dC5pbmNvbWluZ1Jlc3VsdHMucHVzaCguLi50aGlzLnJlaHlkcmF0aW9uQ29udGV4dC5pbmNvbWluZ1Jlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVoeWRyYXRpb25Db250ZXh0ID0gcmVoeWRyYXRpb25Db250ZXh0O1xuICAgICAgICB0aGlzLnJlaHlkcmF0aW9uQ29udGV4dC51bmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5OZXh0U1NSSW5NZW1vcnlDYWNoZSA9IE5leHRTU1JJbk1lbW9yeUNhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmV4dFNTUkluTWVtb3J5Q2FjaGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTmV4dFNTUkluTWVtb3J5Q2FjaGUiLCJjbGllbnRfMSIsInJlcXVpcmUiLCJJbk1lbW9yeUNhY2hlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJyZWh5ZHJhdGlvbkNvbnRleHQiLCJpbmNvbWluZ1Jlc3VsdHMiLCJ1bmluaXRpYWxpemVkIiwid3JpdGUiLCJvcHRpb25zIiwicHVzaCIsInNldFJlaHlkcmF0aW9uQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRInMemoryCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useRehydrationContext = exports.RehydrationContextProvider = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/index.js\");\nconst react_1 = __importDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst NextSSRInMemoryCache_1 = __webpack_require__(/*! ./NextSSRInMemoryCache */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRInMemoryCache.js\");\nconst navigation_1 = __webpack_require__(/*! next/navigation */ \"(ssr)/./node_modules/next/dist/api/navigation.js\");\nconst dataTransport_1 = __webpack_require__(/*! ./dataTransport */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/dataTransport.js\");\nconst ts_invariant_1 = __importDefault(__webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.js\"));\nconst NextSSRApolloClient_1 = __webpack_require__(/*! ./NextSSRApolloClient */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRApolloClient.js\");\nconst ApolloRehydrationContext = react_1.default.createContext(undefined);\nconst RehydrationContextProvider = ({ children, extraScriptProps })=>{\n    const client = (0, client_1.useApolloClient)();\n    const rehydrationContext = react_1.default.useRef();\n    if (true) {\n        if (!rehydrationContext.current) {\n            rehydrationContext.current = buildApolloRehydrationContext({\n                extraScriptProps\n            });\n        }\n        if (client instanceof NextSSRApolloClient_1.NextSSRApolloClient) {\n            client.setRehydrationContext(rehydrationContext.current);\n        } else {\n            throw new Error(\"When using Next SSR, you must use the `NextSSRApolloClient`\");\n        }\n        if (client.cache instanceof NextSSRInMemoryCache_1.NextSSRInMemoryCache) {\n            client.cache.setRehydrationContext(rehydrationContext.current);\n        } else {\n            throw new Error(\"When using Next SSR, you must use the `NextSSRInMemoryCache`\");\n        }\n    } else {}\n    return react_1.default.createElement(ApolloRehydrationContext.Provider, {\n        value: rehydrationContext.current\n    }, children);\n};\nexports.RehydrationContextProvider = RehydrationContextProvider;\nfunction useRehydrationContext() {\n    const rehydrationContext = react_1.default.useContext(ApolloRehydrationContext);\n    const insertHtml = react_1.default.useContext(navigation_1.ServerInsertedHTMLContext);\n    // help transpilers to omit this code in bundling\n    if (false) {}\n    if (insertHtml && rehydrationContext && !rehydrationContext.currentlyInjected) {\n        rehydrationContext.currentlyInjected = true;\n        insertHtml(()=>react_1.default.createElement(rehydrationContext.RehydrateOnClient, null));\n    }\n    return rehydrationContext;\n}\nexports.useRehydrationContext = useRehydrationContext;\nfunction buildApolloRehydrationContext({ extraScriptProps }) {\n    const rehydrationContext = {\n        currentlyInjected: false,\n        transportValueData: {},\n        transportedValues: {},\n        incomingResults: [],\n        incomingBackgroundQueries: [],\n        RehydrateOnClient () {\n            rehydrationContext.currentlyInjected = false;\n            if (!Object.keys(rehydrationContext.transportValueData).length && !Object.keys(rehydrationContext.incomingResults).length && !Object.keys(rehydrationContext.incomingBackgroundQueries).length) return react_1.default.createElement(react_1.default.Fragment, null);\n            ts_invariant_1.default.debug(\"transporting data\", rehydrationContext.transportValueData);\n            ts_invariant_1.default.debug(\"transporting results\", rehydrationContext.incomingResults);\n            ts_invariant_1.default.debug(\"transporting incomingBackgroundQueries\", rehydrationContext.incomingBackgroundQueries);\n            const __html = (0, dataTransport_1.transportDataToJS)({\n                rehydrate: Object.fromEntries(Object.entries(rehydrationContext.transportValueData).filter(([key, value])=>rehydrationContext.transportedValues[key] !== value)),\n                results: rehydrationContext.incomingResults,\n                backgroundQueries: rehydrationContext.incomingBackgroundQueries\n            });\n            Object.assign(rehydrationContext.transportedValues, rehydrationContext.transportValueData);\n            rehydrationContext.transportValueData = {};\n            rehydrationContext.incomingResults = [];\n            rehydrationContext.incomingBackgroundQueries = [];\n            return react_1.default.createElement(\"script\", Object.assign({}, extraScriptProps, {\n                dangerouslySetInnerHTML: {\n                    __html\n                }\n            }));\n        }\n    };\n    return rehydrationContext;\n} //# sourceMappingURL=RehydrationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RemoveMultipartDirectivesLink.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RemoveMultipartDirectivesLink.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RemoveMultipartDirectivesLink = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/index.js\");\nconst utilities_1 = __webpack_require__(/*! @apollo/client/utilities */ \"(ssr)/./node_modules/@apollo/client/utilities/index.js\");\nfunction getDirectiveArgumentValue(directive, argument) {\n    var _a, _b;\n    return (_b = (_a = directive.arguments) === null || _a === void 0 ? void 0 : _a.find((arg)=>arg.name.value === argument)) === null || _b === void 0 ? void 0 : _b.value;\n}\n/**\n * This link is used to strip directives from the query before it is sent to the server.\n * This is used to prevent the server from doing additional work in SSR scenarios where multipart responses cannot be handled anyways.\n * This stripping behaviour can be configured per-directive.\n * It be overridden by adding a label to the directive.\n * In the case this link is configured to strip a directive, but the directive has a label starting with \"SsrDontStrip\", the directive will not be stripped.\n * In the case this link is configured to not strip a directive, but the directive has a label starting with \"SsrStrip\", the directive will be stripped.\n * The \"starting with\" is important, because labels have to be unique per operation. So if you have multiple directives where you want to override the default stipping behaviour,\n * you can do this by annotating them like\n * ```gql\n * query myQuery {\n *   fastField\n *   ... @defer(label: \"SsrDontStrip1\") {\n *     slowField1\n *   }\n *   ... @defer(label: \"SsrDontStrip2\") {\n *     slowField2\n *   }\n * }\n * ```\n *\n */ class RemoveMultipartDirectivesLink extends client_1.ApolloLink {\n    constructor(config){\n        super();\n        this.stripDirectives = [];\n        if (config.stripDefer !== false) this.stripDirectives.push(\"defer\");\n    }\n    request(operation, forward) {\n        if (!forward) {\n            throw new Error(\"This is not a terminal link!\");\n        }\n        const { query } = operation;\n        let modifiedQuery = query;\n        modifiedQuery = (0, utilities_1.removeDirectivesFromDocument)(this.stripDirectives.map((directive)=>({\n                test (node) {\n                    let shouldStrip = node.kind === \"Directive\" && node.name.value === directive;\n                    const label = getDirectiveArgumentValue(node, \"label\");\n                    if ((label === null || label === void 0 ? void 0 : label.kind) === \"StringValue\" && label.value.startsWith(\"SsrDontStrip\")) {\n                        shouldStrip = false;\n                    }\n                    return shouldStrip;\n                },\n                remove: true\n            })).concat({\n            test (node) {\n                if (node.kind !== \"Directive\") return false;\n                const label = getDirectiveArgumentValue(node, \"label\");\n                return (label === null || label === void 0 ? void 0 : label.kind) === \"StringValue\" && label.value.startsWith(\"SsrStrip\");\n            },\n            remove: true\n        }), modifiedQuery);\n        if (modifiedQuery === null) {\n            return utilities_1.Observable.of({});\n        }\n        operation.query = modifiedQuery;\n        return forward(operation);\n    }\n}\nexports.RemoveMultipartDirectivesLink = RemoveMultipartDirectivesLink; //# sourceMappingURL=RemoveMultipartDirectivesLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL1JlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQ0FBcUMsR0FBRyxLQUFLO0FBQzdDLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLG9FQUFnQjtBQUN6QyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyx3RkFBMEI7QUFDdEQsU0FBU0UsMEJBQTBCQyxTQUFTLEVBQUVDLFFBQVE7SUFDbEQsSUFBSUMsSUFBSUM7SUFDUixPQUFPLENBQUNBLEtBQUssQ0FBQ0QsS0FBS0YsVUFBVUksU0FBUyxNQUFNLFFBQVFGLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0csSUFBSSxDQUFDLENBQUNDLE1BQVFBLElBQUlDLElBQUksQ0FBQ2IsS0FBSyxLQUFLTyxTQUFRLE1BQU8sUUFBUUUsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHVCxLQUFLO0FBQzdLO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNELE1BQU1DLHNDQUFzQ0MsU0FBU1ksVUFBVTtJQUMzREMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUs7UUFDTCxJQUFJLENBQUNDLGVBQWUsR0FBRyxFQUFFO1FBQ3pCLElBQUlELE9BQU9FLFVBQVUsS0FBSyxPQUN0QixJQUFJLENBQUNELGVBQWUsQ0FBQ0UsSUFBSSxDQUFDO0lBQ2xDO0lBQ0FDLFFBQVFDLFNBQVMsRUFBRUMsT0FBTyxFQUFFO1FBQ3hCLElBQUksQ0FBQ0EsU0FBUztZQUNWLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUdIO1FBQ2xCLElBQUlJLGdCQUFnQkQ7UUFDcEJDLGdCQUFnQixDQUFDLEdBQUdyQixZQUFZc0IsNEJBQTRCLEVBQUUsSUFBSSxDQUFDVCxlQUFlLENBQzdFVSxHQUFHLENBQUMsQ0FBQ3JCLFlBQWU7Z0JBQ3JCc0IsTUFBS0MsSUFBSTtvQkFDTCxJQUFJQyxjQUFjRCxLQUFLRSxJQUFJLEtBQUssZUFBZUYsS0FBS2hCLElBQUksQ0FBQ2IsS0FBSyxLQUFLTTtvQkFDbkUsTUFBTTBCLFFBQVEzQiwwQkFBMEJ3QixNQUFNO29CQUM5QyxJQUFJLENBQUNHLFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUksS0FBSyxJQUFJQSxNQUFNRCxJQUFJLE1BQU0saUJBQy9EQyxNQUFNaEMsS0FBSyxDQUFDaUMsVUFBVSxDQUFDLGlCQUFpQjt3QkFDeENILGNBQWM7b0JBQ2xCO29CQUNBLE9BQU9BO2dCQUNYO2dCQUNBSSxRQUFRO1lBQ1osSUFDS0MsTUFBTSxDQUFDO1lBQ1JQLE1BQUtDLElBQUk7Z0JBQ0wsSUFBSUEsS0FBS0UsSUFBSSxLQUFLLGFBQ2QsT0FBTztnQkFDWCxNQUFNQyxRQUFRM0IsMEJBQTBCd0IsTUFBTTtnQkFDOUMsT0FBUSxDQUFDRyxVQUFVLFFBQVFBLFVBQVUsS0FBSyxJQUFJLEtBQUssSUFBSUEsTUFBTUQsSUFBSSxNQUFNLGlCQUNuRUMsTUFBTWhDLEtBQUssQ0FBQ2lDLFVBQVUsQ0FBQztZQUMvQjtZQUNBQyxRQUFRO1FBQ1osSUFBSVQ7UUFDSixJQUFJQSxrQkFBa0IsTUFBTTtZQUN4QixPQUFPckIsWUFBWWdDLFVBQVUsQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDdEM7UUFDQWhCLFVBQVVHLEtBQUssR0FBR0M7UUFDbEIsT0FBT0gsUUFBUUQ7SUFDbkI7QUFDSjtBQUNBdEIscUNBQXFDLEdBQUdFLCtCQUN4Qyx5REFBeUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL1JlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rLmpzPzU4N2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rID0gdm9pZCAwO1xuY29uc3QgY2xpZW50XzEgPSByZXF1aXJlKFwiQGFwb2xsby9jbGllbnRcIik7XG5jb25zdCB1dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXNcIik7XG5mdW5jdGlvbiBnZXREaXJlY3RpdmVBcmd1bWVudFZhbHVlKGRpcmVjdGl2ZSwgYXJndW1lbnQpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiAoX2IgPSAoX2EgPSBkaXJlY3RpdmUuYXJndW1lbnRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluZCgoYXJnKSA9PiBhcmcubmFtZS52YWx1ZSA9PT0gYXJndW1lbnQpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudmFsdWU7XG59XG4vKipcbiAqIFRoaXMgbGluayBpcyB1c2VkIHRvIHN0cmlwIGRpcmVjdGl2ZXMgZnJvbSB0aGUgcXVlcnkgYmVmb3JlIGl0IGlzIHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqIFRoaXMgaXMgdXNlZCB0byBwcmV2ZW50IHRoZSBzZXJ2ZXIgZnJvbSBkb2luZyBhZGRpdGlvbmFsIHdvcmsgaW4gU1NSIHNjZW5hcmlvcyB3aGVyZSBtdWx0aXBhcnQgcmVzcG9uc2VzIGNhbm5vdCBiZSBoYW5kbGVkIGFueXdheXMuXG4gKiBUaGlzIHN0cmlwcGluZyBiZWhhdmlvdXIgY2FuIGJlIGNvbmZpZ3VyZWQgcGVyLWRpcmVjdGl2ZS5cbiAqIEl0IGJlIG92ZXJyaWRkZW4gYnkgYWRkaW5nIGEgbGFiZWwgdG8gdGhlIGRpcmVjdGl2ZS5cbiAqIEluIHRoZSBjYXNlIHRoaXMgbGluayBpcyBjb25maWd1cmVkIHRvIHN0cmlwIGEgZGlyZWN0aXZlLCBidXQgdGhlIGRpcmVjdGl2ZSBoYXMgYSBsYWJlbCBzdGFydGluZyB3aXRoIFwiU3NyRG9udFN0cmlwXCIsIHRoZSBkaXJlY3RpdmUgd2lsbCBub3QgYmUgc3RyaXBwZWQuXG4gKiBJbiB0aGUgY2FzZSB0aGlzIGxpbmsgaXMgY29uZmlndXJlZCB0byBub3Qgc3RyaXAgYSBkaXJlY3RpdmUsIGJ1dCB0aGUgZGlyZWN0aXZlIGhhcyBhIGxhYmVsIHN0YXJ0aW5nIHdpdGggXCJTc3JTdHJpcFwiLCB0aGUgZGlyZWN0aXZlIHdpbGwgYmUgc3RyaXBwZWQuXG4gKiBUaGUgXCJzdGFydGluZyB3aXRoXCIgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGxhYmVscyBoYXZlIHRvIGJlIHVuaXF1ZSBwZXIgb3BlcmF0aW9uLiBTbyBpZiB5b3UgaGF2ZSBtdWx0aXBsZSBkaXJlY3RpdmVzIHdoZXJlIHlvdSB3YW50IHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHN0aXBwaW5nIGJlaGF2aW91cixcbiAqIHlvdSBjYW4gZG8gdGhpcyBieSBhbm5vdGF0aW5nIHRoZW0gbGlrZVxuICogYGBgZ3FsXG4gKiBxdWVyeSBteVF1ZXJ5IHtcbiAqICAgZmFzdEZpZWxkXG4gKiAgIC4uLiBAZGVmZXIobGFiZWw6IFwiU3NyRG9udFN0cmlwMVwiKSB7XG4gKiAgICAgc2xvd0ZpZWxkMVxuICogICB9XG4gKiAgIC4uLiBAZGVmZXIobGFiZWw6IFwiU3NyRG9udFN0cmlwMlwiKSB7XG4gKiAgICAgc2xvd0ZpZWxkMlxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKi9cbmNsYXNzIFJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rIGV4dGVuZHMgY2xpZW50XzEuQXBvbGxvTGluayB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RyaXBEaXJlY3RpdmVzID0gW107XG4gICAgICAgIGlmIChjb25maWcuc3RyaXBEZWZlciAhPT0gZmFsc2UpXG4gICAgICAgICAgICB0aGlzLnN0cmlwRGlyZWN0aXZlcy5wdXNoKFwiZGVmZXJcIik7XG4gICAgfVxuICAgIHJlcXVlc3Qob3BlcmF0aW9uLCBmb3J3YXJkKSB7XG4gICAgICAgIGlmICghZm9yd2FyZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBpcyBub3QgYSB0ZXJtaW5hbCBsaW5rIVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHF1ZXJ5IH0gPSBvcGVyYXRpb247XG4gICAgICAgIGxldCBtb2RpZmllZFF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIG1vZGlmaWVkUXVlcnkgPSAoMCwgdXRpbGl0aWVzXzEucmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudCkodGhpcy5zdHJpcERpcmVjdGl2ZXNcbiAgICAgICAgICAgIC5tYXAoKGRpcmVjdGl2ZSkgPT4gKHtcbiAgICAgICAgICAgIHRlc3Qobm9kZSkge1xuICAgICAgICAgICAgICAgIGxldCBzaG91bGRTdHJpcCA9IG5vZGUua2luZCA9PT0gXCJEaXJlY3RpdmVcIiAmJiBub2RlLm5hbWUudmFsdWUgPT09IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGdldERpcmVjdGl2ZUFyZ3VtZW50VmFsdWUobm9kZSwgXCJsYWJlbFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoKGxhYmVsID09PSBudWxsIHx8IGxhYmVsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYWJlbC5raW5kKSA9PT0gXCJTdHJpbmdWYWx1ZVwiICYmXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLnZhbHVlLnN0YXJ0c1dpdGgoXCJTc3JEb250U3RyaXBcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkU3RyaXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNob3VsZFN0cmlwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZTogdHJ1ZSxcbiAgICAgICAgfSkpXG4gICAgICAgICAgICAuY29uY2F0KHtcbiAgICAgICAgICAgIHRlc3Qobm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmtpbmQgIT09IFwiRGlyZWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGdldERpcmVjdGl2ZUFyZ3VtZW50VmFsdWUobm9kZSwgXCJsYWJlbFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKChsYWJlbCA9PT0gbnVsbCB8fCBsYWJlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGFiZWwua2luZCkgPT09IFwiU3RyaW5nVmFsdWVcIiAmJlxuICAgICAgICAgICAgICAgICAgICBsYWJlbC52YWx1ZS5zdGFydHNXaXRoKFwiU3NyU3RyaXBcIikpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZTogdHJ1ZSxcbiAgICAgICAgfSksIG1vZGlmaWVkUXVlcnkpO1xuICAgICAgICBpZiAobW9kaWZpZWRRdWVyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxpdGllc18xLk9ic2VydmFibGUub2Yoe30pO1xuICAgICAgICB9XG4gICAgICAgIG9wZXJhdGlvbi5xdWVyeSA9IG1vZGlmaWVkUXVlcnk7XG4gICAgICAgIHJldHVybiBmb3J3YXJkKG9wZXJhdGlvbik7XG4gICAgfVxufVxuZXhwb3J0cy5SZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGluayA9IFJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVtb3ZlTXVsdGlwYXJ0RGlyZWN0aXZlc0xpbmsuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUmVtb3ZlTXVsdGlwYXJ0RGlyZWN0aXZlc0xpbmsiLCJjbGllbnRfMSIsInJlcXVpcmUiLCJ1dGlsaXRpZXNfMSIsImdldERpcmVjdGl2ZUFyZ3VtZW50VmFsdWUiLCJkaXJlY3RpdmUiLCJhcmd1bWVudCIsIl9hIiwiX2IiLCJhcmd1bWVudHMiLCJmaW5kIiwiYXJnIiwibmFtZSIsIkFwb2xsb0xpbmsiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsInN0cmlwRGlyZWN0aXZlcyIsInN0cmlwRGVmZXIiLCJwdXNoIiwicmVxdWVzdCIsIm9wZXJhdGlvbiIsImZvcndhcmQiLCJFcnJvciIsInF1ZXJ5IiwibW9kaWZpZWRRdWVyeSIsInJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQiLCJtYXAiLCJ0ZXN0Iiwibm9kZSIsInNob3VsZFN0cmlwIiwia2luZCIsImxhYmVsIiwic3RhcnRzV2l0aCIsInJlbW92ZSIsImNvbmNhdCIsIk9ic2VydmFibGUiLCJvZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RemoveMultipartDirectivesLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/SSRMultipartLink.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/SSRMultipartLink.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SSRMultipartLink = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/index.js\");\nconst RemoveMultipartDirectivesLink_1 = __webpack_require__(/*! ./RemoveMultipartDirectivesLink */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RemoveMultipartDirectivesLink.js\");\nconst AccumulateMultipartResponsesLink_1 = __webpack_require__(/*! ./AccumulateMultipartResponsesLink */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/AccumulateMultipartResponsesLink.js\");\nclass SSRMultipartLink extends client_1.ApolloLink {\n    constructor(config = {}){\n        const combined = client_1.ApolloLink.from([\n            new RemoveMultipartDirectivesLink_1.RemoveMultipartDirectivesLink({\n                stripDefer: config.stripDefer\n            }),\n            new AccumulateMultipartResponsesLink_1.AccumulateMultipartResponsesLink({\n                cutoffDelay: config.cutoffDelay || 0\n            })\n        ]);\n        super(combined.request);\n    }\n}\nexports.SSRMultipartLink = SSRMultipartLink; //# sourceMappingURL=SSRMultipartLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL1NTUk11bHRpcGFydExpbmsuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHdCQUF3QixHQUFHLEtBQUs7QUFDaEMsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMsb0VBQWdCO0FBQ3pDLE1BQU1DLGtDQUFrQ0QsbUJBQU9BLENBQUMsK0lBQWlDO0FBQ2pGLE1BQU1FLHFDQUFxQ0YsbUJBQU9BLENBQUMscUpBQW9DO0FBQ3ZGLE1BQU1GLHlCQUF5QkMsU0FBU0ksVUFBVTtJQUM5Q0MsWUFBWUMsU0FBUyxDQUFDLENBQUMsQ0FBRTtRQUNyQixNQUFNQyxXQUFXUCxTQUFTSSxVQUFVLENBQUNJLElBQUksQ0FBQztZQUN0QyxJQUFJTixnQ0FBZ0NPLDZCQUE2QixDQUFDO2dCQUM5REMsWUFBWUosT0FBT0ksVUFBVTtZQUNqQztZQUNBLElBQUlQLG1DQUFtQ1EsZ0NBQWdDLENBQUM7Z0JBQ3BFQyxhQUFhTixPQUFPTSxXQUFXLElBQUk7WUFDdkM7U0FDSDtRQUNELEtBQUssQ0FBQ0wsU0FBU00sT0FBTztJQUMxQjtBQUNKO0FBQ0FoQix3QkFBd0IsR0FBR0Usa0JBQzNCLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC9zc3IvU1NSTXVsdGlwYXJ0TGluay5qcz83Nzc3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TU1JNdWx0aXBhcnRMaW5rID0gdm9pZCAwO1xuY29uc3QgY2xpZW50XzEgPSByZXF1aXJlKFwiQGFwb2xsby9jbGllbnRcIik7XG5jb25zdCBSZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGlua18xID0gcmVxdWlyZShcIi4vUmVtb3ZlTXVsdGlwYXJ0RGlyZWN0aXZlc0xpbmtcIik7XG5jb25zdCBBY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGlua18xID0gcmVxdWlyZShcIi4vQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbmtcIik7XG5jbGFzcyBTU1JNdWx0aXBhcnRMaW5rIGV4dGVuZHMgY2xpZW50XzEuQXBvbGxvTGluayB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcbiAgICAgICAgY29uc3QgY29tYmluZWQgPSBjbGllbnRfMS5BcG9sbG9MaW5rLmZyb20oW1xuICAgICAgICAgICAgbmV3IFJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rXzEuUmVtb3ZlTXVsdGlwYXJ0RGlyZWN0aXZlc0xpbmsoe1xuICAgICAgICAgICAgICAgIHN0cmlwRGVmZXI6IGNvbmZpZy5zdHJpcERlZmVyLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbmtfMS5BY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGluayh7XG4gICAgICAgICAgICAgICAgY3V0b2ZmRGVsYXk6IGNvbmZpZy5jdXRvZmZEZWxheSB8fCAwLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF0pO1xuICAgICAgICBzdXBlcihjb21iaW5lZC5yZXF1ZXN0KTtcbiAgICB9XG59XG5leHBvcnRzLlNTUk11bHRpcGFydExpbmsgPSBTU1JNdWx0aXBhcnRMaW5rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U1NSTXVsdGlwYXJ0TGluay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTU1JNdWx0aXBhcnRMaW5rIiwiY2xpZW50XzEiLCJyZXF1aXJlIiwiUmVtb3ZlTXVsdGlwYXJ0RGlyZWN0aXZlc0xpbmtfMSIsIkFjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rXzEiLCJBcG9sbG9MaW5rIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJjb21iaW5lZCIsImZyb20iLCJSZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGluayIsInN0cmlwRGVmZXIiLCJBY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGluayIsImN1dG9mZkRlbGF5IiwicmVxdWVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/SSRMultipartLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/dataTransport.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/dataTransport.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.registerDataTransport = exports.transportDataToJS = void 0;\nconst superjson_1 = __importDefault(__webpack_require__(/*! superjson */ \"(ssr)/./node_modules/superjson/dist/index.js\"));\nconst ApolloRehydrateSymbols_1 = __webpack_require__(/*! ./ApolloRehydrateSymbols */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js\");\nconst lateInitializingQueue_1 = __webpack_require__(/*! ./lateInitializingQueue */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/lateInitializingQueue.js\");\nconst ts_invariant_1 = __importDefault(__webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.js\"));\nconst htmlescape_1 = __webpack_require__(/*! ../util/htmlescape */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/util/htmlescape.js\");\n/**\n * Returns a string of JavaScript that can be used to transport data to the client.\n */ function transportDataToJS(data) {\n    const key = Symbol.keyFor(ApolloRehydrateSymbols_1.ApolloSSRDataTransport);\n    return `(window[Symbol.for(\"${key}\")] ??= []).push(${(0, htmlescape_1.htmlEscapeJsonString)(superjson_1.default.stringify(data))})`;\n}\nexports.transportDataToJS = transportDataToJS;\n/**\n * Registers a lazy queue that will be filled with data by `transportDataToJS`.\n * All incoming data will be added either to the rehydration cache or the result cache.\n */ function registerDataTransport() {\n    (0, lateInitializingQueue_1.registerLateInitializingQueue)(ApolloRehydrateSymbols_1.ApolloSSRDataTransport, (data)=>{\n        var _a, _b, _c;\n        const parsed = superjson_1.default.deserialize(data);\n        ts_invariant_1.default.debug(`received data from the server:`, parsed);\n        Object.assign((_a = window[ApolloRehydrateSymbols_1.ApolloRehydrationCache]) !== null && _a !== void 0 ? _a : window[ApolloRehydrateSymbols_1.ApolloRehydrationCache] = {}, parsed.rehydrate);\n        ((_b = window[ApolloRehydrateSymbols_1.ApolloBackgroundQueryTransport]) !== null && _b !== void 0 ? _b : window[ApolloRehydrateSymbols_1.ApolloBackgroundQueryTransport] = []).push(...parsed.backgroundQueries);\n        ((_c = window[ApolloRehydrateSymbols_1.ApolloResultCache]) !== null && _c !== void 0 ? _c : window[ApolloRehydrateSymbols_1.ApolloResultCache] = []).push(...parsed.results);\n    });\n}\nexports.registerDataTransport = registerDataTransport; //# sourceMappingURL=dataTransport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL2RhdGFUcmFuc3BvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHQSx5QkFBeUIsR0FBRyxLQUFLO0FBQ2pFLE1BQU1JLGNBQWNULGdCQUFnQlUsbUJBQU9BLENBQUMsK0RBQVc7QUFDdkQsTUFBTUMsMkJBQTJCRCxtQkFBT0EsQ0FBQyxpSUFBMEI7QUFDbkUsTUFBTUUsMEJBQTBCRixtQkFBT0EsQ0FBQywrSEFBeUI7QUFDakUsTUFBTUcsaUJBQWlCYixnQkFBZ0JVLG1CQUFPQSxDQUFDLHdFQUFjO0FBQzdELE1BQU1JLGVBQWVKLG1CQUFPQSxDQUFDLGdIQUFvQjtBQUNqRDs7Q0FFQyxHQUNELFNBQVNGLGtCQUFrQk8sSUFBSTtJQUMzQixNQUFNQyxNQUFNQyxPQUFPQyxNQUFNLENBQUNQLHlCQUF5QlEsc0JBQXNCO0lBQ3pFLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRUgsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLEdBQUdGLGFBQWFNLG9CQUFvQixFQUFFWCxZQUFZWSxPQUFPLENBQUNDLFNBQVMsQ0FBQ1AsT0FBTyxDQUFDLENBQUM7QUFDdkk7QUFDQVYseUJBQXlCLEdBQUdHO0FBQzVCOzs7Q0FHQyxHQUNELFNBQVNEO0lBQ0osSUFBR0ssd0JBQXdCVyw2QkFBNkIsRUFBRVoseUJBQXlCUSxzQkFBc0IsRUFBRSxDQUFDSjtRQUN6RyxJQUFJUyxJQUFJQyxJQUFJQztRQUNaLE1BQU1DLFNBQVNsQixZQUFZWSxPQUFPLENBQUNPLFdBQVcsQ0FBQ2I7UUFDL0NGLGVBQWVRLE9BQU8sQ0FBQ1EsS0FBSyxDQUFDLENBQUMsOEJBQThCLENBQUMsRUFBRUY7UUFDL0R4QixPQUFPMkIsTUFBTSxDQUFFLENBQUNOLEtBQUtPLE1BQU0sQ0FBQ3BCLHlCQUF5QnFCLHNCQUFzQixDQUFDLE1BQU0sUUFBUVIsT0FBTyxLQUFLLElBQUlBLEtBQU1PLE1BQU0sQ0FBQ3BCLHlCQUF5QnFCLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxHQUFLTCxPQUFPTSxTQUFTO1FBQy9MLEVBQUNSLEtBQUtNLE1BQU0sQ0FBQ3BCLHlCQUF5QnVCLDhCQUE4QixDQUFDLE1BQU0sUUFBUVQsT0FBTyxLQUFLLElBQUlBLEtBQU1NLE1BQU0sQ0FBQ3BCLHlCQUF5QnVCLDhCQUE4QixDQUFDLEdBQUcsRUFBRSxFQUFHQyxJQUFJLElBQUlSLE9BQU9TLGlCQUFpQjtRQUNoTixFQUFDVixLQUFLSyxNQUFNLENBQUNwQix5QkFBeUIwQixpQkFBaUIsQ0FBQyxNQUFNLFFBQVFYLE9BQU8sS0FBSyxJQUFJQSxLQUFNSyxNQUFNLENBQUNwQix5QkFBeUIwQixpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsRUFBR0YsSUFBSSxJQUFJUixPQUFPVyxPQUFPO0lBQ2pMO0FBQ0o7QUFDQWpDLDZCQUE2QixHQUFHRSx1QkFDaEMseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZXhwZXJpbWVudGFsLW5leHRqcy1hcHAtc3VwcG9ydC9kaXN0L3Nzci9kYXRhVHJhbnNwb3J0LmpzPzM1N2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlZ2lzdGVyRGF0YVRyYW5zcG9ydCA9IGV4cG9ydHMudHJhbnNwb3J0RGF0YVRvSlMgPSB2b2lkIDA7XG5jb25zdCBzdXBlcmpzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic3VwZXJqc29uXCIpKTtcbmNvbnN0IEFwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMSA9IHJlcXVpcmUoXCIuL0Fwb2xsb1JlaHlkcmF0ZVN5bWJvbHNcIik7XG5jb25zdCBsYXRlSW5pdGlhbGl6aW5nUXVldWVfMSA9IHJlcXVpcmUoXCIuL2xhdGVJbml0aWFsaXppbmdRdWV1ZVwiKTtcbmNvbnN0IHRzX2ludmFyaWFudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJ0cy1pbnZhcmlhbnRcIikpO1xuY29uc3QgaHRtbGVzY2FwZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaHRtbGVzY2FwZVwiKTtcbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyBvZiBKYXZhU2NyaXB0IHRoYXQgY2FuIGJlIHVzZWQgdG8gdHJhbnNwb3J0IGRhdGEgdG8gdGhlIGNsaWVudC5cbiAqL1xuZnVuY3Rpb24gdHJhbnNwb3J0RGF0YVRvSlMoZGF0YSkge1xuICAgIGNvbnN0IGtleSA9IFN5bWJvbC5rZXlGb3IoQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb1NTUkRhdGFUcmFuc3BvcnQpO1xuICAgIHJldHVybiBgKHdpbmRvd1tTeW1ib2wuZm9yKFwiJHtrZXl9XCIpXSA/Pz0gW10pLnB1c2goJHsoMCwgaHRtbGVzY2FwZV8xLmh0bWxFc2NhcGVKc29uU3RyaW5nKShzdXBlcmpzb25fMS5kZWZhdWx0LnN0cmluZ2lmeShkYXRhKSl9KWA7XG59XG5leHBvcnRzLnRyYW5zcG9ydERhdGFUb0pTID0gdHJhbnNwb3J0RGF0YVRvSlM7XG4vKipcbiAqIFJlZ2lzdGVycyBhIGxhenkgcXVldWUgdGhhdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGRhdGEgYnkgYHRyYW5zcG9ydERhdGFUb0pTYC5cbiAqIEFsbCBpbmNvbWluZyBkYXRhIHdpbGwgYmUgYWRkZWQgZWl0aGVyIHRvIHRoZSByZWh5ZHJhdGlvbiBjYWNoZSBvciB0aGUgcmVzdWx0IGNhY2hlLlxuICovXG5mdW5jdGlvbiByZWdpc3RlckRhdGFUcmFuc3BvcnQoKSB7XG4gICAgKDAsIGxhdGVJbml0aWFsaXppbmdRdWV1ZV8xLnJlZ2lzdGVyTGF0ZUluaXRpYWxpemluZ1F1ZXVlKShBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEuQXBvbGxvU1NSRGF0YVRyYW5zcG9ydCwgKGRhdGEpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyanNvbl8xLmRlZmF1bHQuZGVzZXJpYWxpemUoZGF0YSk7XG4gICAgICAgIHRzX2ludmFyaWFudF8xLmRlZmF1bHQuZGVidWcoYHJlY2VpdmVkIGRhdGEgZnJvbSB0aGUgc2VydmVyOmAsIHBhcnNlZCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oKChfYSA9IHdpbmRvd1tBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEuQXBvbGxvUmVoeWRyYXRpb25DYWNoZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICh3aW5kb3dbQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb1JlaHlkcmF0aW9uQ2FjaGVdID0ge30pKSwgcGFyc2VkLnJlaHlkcmF0ZSk7XG4gICAgICAgICgoX2IgPSB3aW5kb3dbQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb0JhY2tncm91bmRRdWVyeVRyYW5zcG9ydF0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICh3aW5kb3dbQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb0JhY2tncm91bmRRdWVyeVRyYW5zcG9ydF0gPSBbXSkpLnB1c2goLi4ucGFyc2VkLmJhY2tncm91bmRRdWVyaWVzKTtcbiAgICAgICAgKChfYyA9IHdpbmRvd1tBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEuQXBvbGxvUmVzdWx0Q2FjaGVdKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAod2luZG93W0Fwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMS5BcG9sbG9SZXN1bHRDYWNoZV0gPSBbXSkpLnB1c2goLi4ucGFyc2VkLnJlc3VsdHMpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3RlckRhdGFUcmFuc3BvcnQgPSByZWdpc3RlckRhdGFUcmFuc3BvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhVHJhbnNwb3J0LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZWdpc3RlckRhdGFUcmFuc3BvcnQiLCJ0cmFuc3BvcnREYXRhVG9KUyIsInN1cGVyanNvbl8xIiwicmVxdWlyZSIsIkFwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMSIsImxhdGVJbml0aWFsaXppbmdRdWV1ZV8xIiwidHNfaW52YXJpYW50XzEiLCJodG1sZXNjYXBlXzEiLCJkYXRhIiwia2V5IiwiU3ltYm9sIiwia2V5Rm9yIiwiQXBvbGxvU1NSRGF0YVRyYW5zcG9ydCIsImh0bWxFc2NhcGVKc29uU3RyaW5nIiwiZGVmYXVsdCIsInN0cmluZ2lmeSIsInJlZ2lzdGVyTGF0ZUluaXRpYWxpemluZ1F1ZXVlIiwiX2EiLCJfYiIsIl9jIiwicGFyc2VkIiwiZGVzZXJpYWxpemUiLCJkZWJ1ZyIsImFzc2lnbiIsIndpbmRvdyIsIkFwb2xsb1JlaHlkcmF0aW9uQ2FjaGUiLCJyZWh5ZHJhdGUiLCJBcG9sbG9CYWNrZ3JvdW5kUXVlcnlUcmFuc3BvcnQiLCJwdXNoIiwiYmFja2dyb3VuZFF1ZXJpZXMiLCJBcG9sbG9SZXN1bHRDYWNoZSIsInJlc3VsdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/dataTransport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/hooks.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/hooks.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useBackgroundQuery = exports.useReadQuery = exports.useSuspenseQuery = exports.useQuery = exports.useFragment = void 0;\nconst client_1 = __webpack_require__(/*! @apollo/client */ \"(ssr)/./node_modules/@apollo/client/index.js\");\nconst useTransportValue_1 = __webpack_require__(/*! ./useTransportValue */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/useTransportValue.js\");\nconst RehydrationContext_1 = __webpack_require__(/*! ./RehydrationContext */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js\");\nexports.useFragment = wrap(client_1.useFragment, [\n    \"data\",\n    \"complete\",\n    \"missing\"\n]);\nexports.useQuery = wrap( true ? (query, options)=>(0, client_1.useQuery)(query, Object.assign(Object.assign({}, options), {\n        fetchPolicy: \"cache-only\"\n    })) : 0, [\n    \"data\",\n    \"loading\",\n    \"networkStatus\",\n    \"called\"\n]);\nexports.useSuspenseQuery = wrap(client_1.useSuspenseQuery, [\n    \"data\",\n    \"networkStatus\"\n]);\nexports.useReadQuery = wrap(client_1.useReadQuery, [\n    \"data\",\n    \"networkStatus\"\n]);\nconst useBackgroundQuery = (...args)=>{\n    (0, RehydrationContext_1.useRehydrationContext)();\n    return (0, client_1.useBackgroundQuery)(...args);\n};\nexports.useBackgroundQuery = useBackgroundQuery;\nfunction wrap(useFn, transportKeys) {\n    return (...args)=>{\n        const result = useFn(...args);\n        const transported = {};\n        for (const key of transportKeys){\n            transported[key] = result[key];\n        }\n        return Object.assign(Object.assign({}, result), (0, useTransportValue_1.useTransportValue)(transported));\n    };\n} //# sourceMappingURL=hooks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL2hvb2tzLmpzIiwibWFwcGluZ3MiOiJxREFBYTtBQUViQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLG9CQUFvQixHQUFHQSx3QkFBd0IsR0FBR0EsZ0JBQWdCLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDN0gsTUFBTU8sV0FBV0MsbUJBQU9BLENBQUMsb0VBQWdCO0FBQ3pDLE1BQU1DLHNCQUFzQkQsbUJBQU9BLENBQUMsdUhBQXFCO0FBQ3pELE1BQU1FLHVCQUF1QkYsbUJBQU9BLENBQUMseUhBQXNCO0FBQzNEUixtQkFBbUIsR0FBR1csS0FBS0osU0FBU0QsV0FBVyxFQUFFO0lBQzdDO0lBQ0E7SUFDQTtDQUNIO0FBQ0ROLGdCQUFnQixHQUFHVyxLQUFLLEtBQTZCLEdBQy9DLENBQUNDLE9BQU9DLFVBQVksQ0FBQyxHQUFHTixTQUFTRixRQUFRLEVBQUVPLE9BQU9kLE9BQU9nQixNQUFNLENBQUNoQixPQUFPZ0IsTUFBTSxDQUFDLENBQUMsR0FBR0QsVUFBVTtRQUFFRSxhQUFhO0lBQWEsTUFDeEhSLENBQWlCLEVBQUU7SUFBQztJQUFRO0lBQVc7SUFBaUI7Q0FBUztBQUN2RVAsd0JBQXdCLEdBQUdXLEtBQUtKLFNBQVNILGdCQUFnQixFQUFFO0lBQ3ZEO0lBQ0E7Q0FDSDtBQUNESixvQkFBb0IsR0FBR1csS0FBS0osU0FBU0osWUFBWSxFQUFFO0lBQUM7SUFBUTtDQUFnQjtBQUM1RSxNQUFNRCxxQkFBcUIsQ0FBQyxHQUFHYztJQUMxQixJQUFHTixxQkFBcUJPLHFCQUFxQjtJQUM5QyxPQUFPLENBQUMsR0FBR1YsU0FBU0wsa0JBQWtCLEtBQUtjO0FBQy9DO0FBQ0FoQiwwQkFBMEIsR0FBR0U7QUFDN0IsU0FBU1MsS0FBS08sS0FBSyxFQUFFQyxhQUFhO0lBQzlCLE9BQVEsQ0FBQyxHQUFHSDtRQUNSLE1BQU1JLFNBQVNGLFNBQVNGO1FBQ3hCLE1BQU1LLGNBQWMsQ0FBQztRQUNyQixLQUFLLE1BQU1DLE9BQU9ILGNBQWU7WUFDN0JFLFdBQVcsQ0FBQ0MsSUFBSSxHQUFHRixNQUFNLENBQUNFLElBQUk7UUFDbEM7UUFDQSxPQUFPeEIsT0FBT2dCLE1BQU0sQ0FBQ2hCLE9BQU9nQixNQUFNLENBQUMsQ0FBQyxHQUFHTSxTQUFTLENBQUMsR0FBR1gsb0JBQW9CYyxpQkFBaUIsRUFBRUY7SUFDL0Y7QUFDSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2V4cGVyaW1lbnRhbC1uZXh0anMtYXBwLXN1cHBvcnQvZGlzdC9zc3IvaG9va3MuanM/OTE1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VCYWNrZ3JvdW5kUXVlcnkgPSBleHBvcnRzLnVzZVJlYWRRdWVyeSA9IGV4cG9ydHMudXNlU3VzcGVuc2VRdWVyeSA9IGV4cG9ydHMudXNlUXVlcnkgPSBleHBvcnRzLnVzZUZyYWdtZW50ID0gdm9pZCAwO1xuY29uc3QgY2xpZW50XzEgPSByZXF1aXJlKFwiQGFwb2xsby9jbGllbnRcIik7XG5jb25zdCB1c2VUcmFuc3BvcnRWYWx1ZV8xID0gcmVxdWlyZShcIi4vdXNlVHJhbnNwb3J0VmFsdWVcIik7XG5jb25zdCBSZWh5ZHJhdGlvbkNvbnRleHRfMSA9IHJlcXVpcmUoXCIuL1JlaHlkcmF0aW9uQ29udGV4dFwiKTtcbmV4cG9ydHMudXNlRnJhZ21lbnQgPSB3cmFwKGNsaWVudF8xLnVzZUZyYWdtZW50LCBbXG4gICAgXCJkYXRhXCIsXG4gICAgXCJjb21wbGV0ZVwiLFxuICAgIFwibWlzc2luZ1wiLFxuXSk7XG5leHBvcnRzLnVzZVF1ZXJ5ID0gd3JhcCh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiXG4gICAgPyAocXVlcnksIG9wdGlvbnMpID0+ICgwLCBjbGllbnRfMS51c2VRdWVyeSkocXVlcnksIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgZmV0Y2hQb2xpY3k6IFwiY2FjaGUtb25seVwiIH0pKVxuICAgIDogY2xpZW50XzEudXNlUXVlcnksIFtcImRhdGFcIiwgXCJsb2FkaW5nXCIsIFwibmV0d29ya1N0YXR1c1wiLCBcImNhbGxlZFwiXSk7XG5leHBvcnRzLnVzZVN1c3BlbnNlUXVlcnkgPSB3cmFwKGNsaWVudF8xLnVzZVN1c3BlbnNlUXVlcnksIFtcbiAgICBcImRhdGFcIixcbiAgICBcIm5ldHdvcmtTdGF0dXNcIixcbl0pO1xuZXhwb3J0cy51c2VSZWFkUXVlcnkgPSB3cmFwKGNsaWVudF8xLnVzZVJlYWRRdWVyeSwgW1wiZGF0YVwiLCBcIm5ldHdvcmtTdGF0dXNcIl0pO1xuY29uc3QgdXNlQmFja2dyb3VuZFF1ZXJ5ID0gKC4uLmFyZ3MpID0+IHtcbiAgICAoMCwgUmVoeWRyYXRpb25Db250ZXh0XzEudXNlUmVoeWRyYXRpb25Db250ZXh0KSgpO1xuICAgIHJldHVybiAoMCwgY2xpZW50XzEudXNlQmFja2dyb3VuZFF1ZXJ5KSguLi5hcmdzKTtcbn07XG5leHBvcnRzLnVzZUJhY2tncm91bmRRdWVyeSA9IHVzZUJhY2tncm91bmRRdWVyeTtcbmZ1bmN0aW9uIHdyYXAodXNlRm4sIHRyYW5zcG9ydEtleXMpIHtcbiAgICByZXR1cm4gKCguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHVzZUZuKC4uLmFyZ3MpO1xuICAgICAgICBjb25zdCB0cmFuc3BvcnRlZCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0cmFuc3BvcnRLZXlzKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRlZFtrZXldID0gcmVzdWx0W2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzdWx0KSwgKDAsIHVzZVRyYW5zcG9ydFZhbHVlXzEudXNlVHJhbnNwb3J0VmFsdWUpKHRyYW5zcG9ydGVkKSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob29rcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1c2VCYWNrZ3JvdW5kUXVlcnkiLCJ1c2VSZWFkUXVlcnkiLCJ1c2VTdXNwZW5zZVF1ZXJ5IiwidXNlUXVlcnkiLCJ1c2VGcmFnbWVudCIsImNsaWVudF8xIiwicmVxdWlyZSIsInVzZVRyYW5zcG9ydFZhbHVlXzEiLCJSZWh5ZHJhdGlvbkNvbnRleHRfMSIsIndyYXAiLCJxdWVyeSIsIm9wdGlvbnMiLCJhc3NpZ24iLCJmZXRjaFBvbGljeSIsImFyZ3MiLCJ1c2VSZWh5ZHJhdGlvbkNvbnRleHQiLCJ1c2VGbiIsInRyYW5zcG9ydEtleXMiLCJyZXN1bHQiLCJ0cmFuc3BvcnRlZCIsImtleSIsInVzZVRyYW5zcG9ydFZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/hooks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resetNextSSRApolloSingletons = exports.RemoveMultipartDirectivesLink = exports.DebounceMultipartResponsesLink = exports.SSRMultipartLink = exports.useBackgroundQuery = exports.useReadQuery = exports.useSuspenseQuery = exports.useQuery = exports.useFragment = exports.NextSSRApolloClient = exports.NextSSRInMemoryCache = exports.ApolloNextAppProvider = void 0;\nvar ApolloNextAppProvider_1 = __webpack_require__(/*! ./ApolloNextAppProvider */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloNextAppProvider.js\");\nObject.defineProperty(exports, \"ApolloNextAppProvider\", ({\n    enumerable: true,\n    get: function() {\n        return ApolloNextAppProvider_1.ApolloNextAppProvider;\n    }\n}));\nvar NextSSRInMemoryCache_1 = __webpack_require__(/*! ./NextSSRInMemoryCache */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRInMemoryCache.js\");\nObject.defineProperty(exports, \"NextSSRInMemoryCache\", ({\n    enumerable: true,\n    get: function() {\n        return NextSSRInMemoryCache_1.NextSSRInMemoryCache;\n    }\n}));\nvar NextSSRApolloClient_1 = __webpack_require__(/*! ./NextSSRApolloClient */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/NextSSRApolloClient.js\");\nObject.defineProperty(exports, \"NextSSRApolloClient\", ({\n    enumerable: true,\n    get: function() {\n        return NextSSRApolloClient_1.NextSSRApolloClient;\n    }\n}));\nvar hooks_1 = __webpack_require__(/*! ./hooks */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/hooks.js\");\nObject.defineProperty(exports, \"useFragment\", ({\n    enumerable: true,\n    get: function() {\n        return hooks_1.useFragment;\n    }\n}));\nObject.defineProperty(exports, \"useQuery\", ({\n    enumerable: true,\n    get: function() {\n        return hooks_1.useQuery;\n    }\n}));\nObject.defineProperty(exports, \"useSuspenseQuery\", ({\n    enumerable: true,\n    get: function() {\n        return hooks_1.useSuspenseQuery;\n    }\n}));\nObject.defineProperty(exports, \"useReadQuery\", ({\n    enumerable: true,\n    get: function() {\n        return hooks_1.useReadQuery;\n    }\n}));\nObject.defineProperty(exports, \"useBackgroundQuery\", ({\n    enumerable: true,\n    get: function() {\n        return hooks_1.useBackgroundQuery;\n    }\n}));\nvar SSRMultipartLink_1 = __webpack_require__(/*! ./SSRMultipartLink */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/SSRMultipartLink.js\");\nObject.defineProperty(exports, \"SSRMultipartLink\", ({\n    enumerable: true,\n    get: function() {\n        return SSRMultipartLink_1.SSRMultipartLink;\n    }\n}));\nvar AccumulateMultipartResponsesLink_1 = __webpack_require__(/*! ./AccumulateMultipartResponsesLink */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/AccumulateMultipartResponsesLink.js\");\nObject.defineProperty(exports, \"DebounceMultipartResponsesLink\", ({\n    enumerable: true,\n    get: function() {\n        return AccumulateMultipartResponsesLink_1.AccumulateMultipartResponsesLink;\n    }\n}));\nvar RemoveMultipartDirectivesLink_1 = __webpack_require__(/*! ./RemoveMultipartDirectivesLink */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RemoveMultipartDirectivesLink.js\");\nObject.defineProperty(exports, \"RemoveMultipartDirectivesLink\", ({\n    enumerable: true,\n    get: function() {\n        return RemoveMultipartDirectivesLink_1.RemoveMultipartDirectivesLink;\n    }\n}));\nvar testHelpers_1 = __webpack_require__(/*! ./testHelpers */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/testHelpers.js\");\nObject.defineProperty(exports, \"resetNextSSRApolloSingletons\", ({\n    enumerable: true,\n    get: function() {\n        return testHelpers_1.resetNextSSRApolloSingletons;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQ0FBb0MsR0FBR0EscUNBQXFDLEdBQUdBLHNDQUFzQyxHQUFHQSx3QkFBd0IsR0FBR0EsMEJBQTBCLEdBQUdBLG9CQUFvQixHQUFHQSx3QkFBd0IsR0FBR0EsZ0JBQWdCLEdBQUdBLG1CQUFtQixHQUFHQSwyQkFBMkIsR0FBR0EsNEJBQTRCLEdBQUdBLDZCQUE2QixHQUFHLEtBQUs7QUFDN1csSUFBSWMsMEJBQTBCQyxtQkFBT0EsQ0FBQywrSEFBeUI7QUFDL0RqQix5REFBd0Q7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILHdCQUF3QkQscUJBQXFCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDekosSUFBSUsseUJBQXlCSCxtQkFBT0EsQ0FBQyw2SEFBd0I7QUFDN0RqQix3REFBdUQ7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLHVCQUF1Qk4sb0JBQW9CO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdEosSUFBSU8sd0JBQXdCSixtQkFBT0EsQ0FBQywySEFBdUI7QUFDM0RqQix1REFBc0Q7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLHNCQUFzQlIsbUJBQW1CO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbkosSUFBSVMsVUFBVUwsbUJBQU9BLENBQUMsK0ZBQVM7QUFDL0JqQiwrQ0FBOEM7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLFFBQVFWLFdBQVc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNySFosNENBQTJDO0lBQUVrQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxRQUFRWCxRQUFRO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDL0dYLG9EQUFtRDtJQUFFa0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csUUFBUVosZ0JBQWdCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDL0hWLGdEQUErQztJQUFFa0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csUUFBUWIsWUFBWTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3ZIVCxzREFBcUQ7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLFFBQVFkLGtCQUFrQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ25JLElBQUllLHFCQUFxQk4sbUJBQU9BLENBQUMscUhBQW9CO0FBQ3JEakIsb0RBQW1EO0lBQUVrQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSSxtQkFBbUJoQixnQkFBZ0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMxSSxJQUFJaUIscUNBQXFDUCxtQkFBT0EsQ0FBQyxxSkFBb0M7QUFDckZqQixrRUFBaUU7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9LLG1DQUFtQ0MsZ0NBQWdDO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEwsSUFBSUMsa0NBQWtDVCxtQkFBT0EsQ0FBQywrSUFBaUM7QUFDL0VqQixpRUFBZ0U7SUFBRWtCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9PLGdDQUFnQ3JCLDZCQUE2QjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2pMLElBQUlzQixnQkFBZ0JWLG1CQUFPQSxDQUFDLDJHQUFlO0FBQzNDakIsZ0VBQStEO0lBQUVrQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPUSxjQUFjdkIsNEJBQTRCO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDN0osaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZXhwZXJpbWVudGFsLW5leHRqcy1hcHAtc3VwcG9ydC9kaXN0L3Nzci9pbmRleC5qcz9kZDFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNldE5leHRTU1JBcG9sbG9TaW5nbGV0b25zID0gZXhwb3J0cy5SZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGluayA9IGV4cG9ydHMuRGVib3VuY2VNdWx0aXBhcnRSZXNwb25zZXNMaW5rID0gZXhwb3J0cy5TU1JNdWx0aXBhcnRMaW5rID0gZXhwb3J0cy51c2VCYWNrZ3JvdW5kUXVlcnkgPSBleHBvcnRzLnVzZVJlYWRRdWVyeSA9IGV4cG9ydHMudXNlU3VzcGVuc2VRdWVyeSA9IGV4cG9ydHMudXNlUXVlcnkgPSBleHBvcnRzLnVzZUZyYWdtZW50ID0gZXhwb3J0cy5OZXh0U1NSQXBvbGxvQ2xpZW50ID0gZXhwb3J0cy5OZXh0U1NSSW5NZW1vcnlDYWNoZSA9IGV4cG9ydHMuQXBvbGxvTmV4dEFwcFByb3ZpZGVyID0gdm9pZCAwO1xudmFyIEFwb2xsb05leHRBcHBQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vQXBvbGxvTmV4dEFwcFByb3ZpZGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXBvbGxvTmV4dEFwcFByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcG9sbG9OZXh0QXBwUHJvdmlkZXJfMS5BcG9sbG9OZXh0QXBwUHJvdmlkZXI7IH0gfSk7XG52YXIgTmV4dFNTUkluTWVtb3J5Q2FjaGVfMSA9IHJlcXVpcmUoXCIuL05leHRTU1JJbk1lbW9yeUNhY2hlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTmV4dFNTUkluTWVtb3J5Q2FjaGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5leHRTU1JJbk1lbW9yeUNhY2hlXzEuTmV4dFNTUkluTWVtb3J5Q2FjaGU7IH0gfSk7XG52YXIgTmV4dFNTUkFwb2xsb0NsaWVudF8xID0gcmVxdWlyZShcIi4vTmV4dFNTUkFwb2xsb0NsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5leHRTU1JBcG9sbG9DbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5leHRTU1JBcG9sbG9DbGllbnRfMS5OZXh0U1NSQXBvbGxvQ2xpZW50OyB9IH0pO1xudmFyIGhvb2tzXzEgPSByZXF1aXJlKFwiLi9ob29rc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZUZyYWdtZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBob29rc18xLnVzZUZyYWdtZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlUXVlcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhvb2tzXzEudXNlUXVlcnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VTdXNwZW5zZVF1ZXJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBob29rc18xLnVzZVN1c3BlbnNlUXVlcnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VSZWFkUXVlcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhvb2tzXzEudXNlUmVhZFF1ZXJ5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlQmFja2dyb3VuZFF1ZXJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBob29rc18xLnVzZUJhY2tncm91bmRRdWVyeTsgfSB9KTtcbnZhciBTU1JNdWx0aXBhcnRMaW5rXzEgPSByZXF1aXJlKFwiLi9TU1JNdWx0aXBhcnRMaW5rXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU1NSTXVsdGlwYXJ0TGlua1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU1NSTXVsdGlwYXJ0TGlua18xLlNTUk11bHRpcGFydExpbms7IH0gfSk7XG52YXIgQWNjdW11bGF0ZU11bHRpcGFydFJlc3BvbnNlc0xpbmtfMSA9IHJlcXVpcmUoXCIuL0FjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVib3VuY2VNdWx0aXBhcnRSZXNwb25zZXNMaW5rXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGlua18xLkFjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rOyB9IH0pO1xudmFyIFJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rXzEgPSByZXF1aXJlKFwiLi9SZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGlua1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBSZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGlua18xLlJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rOyB9IH0pO1xudmFyIHRlc3RIZWxwZXJzXzEgPSByZXF1aXJlKFwiLi90ZXN0SGVscGVyc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlc2V0TmV4dFNTUkFwb2xsb1NpbmdsZXRvbnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRlc3RIZWxwZXJzXzEucmVzZXROZXh0U1NSQXBvbGxvU2luZ2xldG9uczsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlc2V0TmV4dFNTUkFwb2xsb1NpbmdsZXRvbnMiLCJSZW1vdmVNdWx0aXBhcnREaXJlY3RpdmVzTGluayIsIkRlYm91bmNlTXVsdGlwYXJ0UmVzcG9uc2VzTGluayIsIlNTUk11bHRpcGFydExpbmsiLCJ1c2VCYWNrZ3JvdW5kUXVlcnkiLCJ1c2VSZWFkUXVlcnkiLCJ1c2VTdXNwZW5zZVF1ZXJ5IiwidXNlUXVlcnkiLCJ1c2VGcmFnbWVudCIsIk5leHRTU1JBcG9sbG9DbGllbnQiLCJOZXh0U1NSSW5NZW1vcnlDYWNoZSIsIkFwb2xsb05leHRBcHBQcm92aWRlciIsIkFwb2xsb05leHRBcHBQcm92aWRlcl8xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJOZXh0U1NSSW5NZW1vcnlDYWNoZV8xIiwiTmV4dFNTUkFwb2xsb0NsaWVudF8xIiwiaG9va3NfMSIsIlNTUk11bHRpcGFydExpbmtfMSIsIkFjY3VtdWxhdGVNdWx0aXBhcnRSZXNwb25zZXNMaW5rXzEiLCJBY2N1bXVsYXRlTXVsdGlwYXJ0UmVzcG9uc2VzTGluayIsIlJlbW92ZU11bHRpcGFydERpcmVjdGl2ZXNMaW5rXzEiLCJ0ZXN0SGVscGVyc18xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/lateInitializingQueue.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/lateInitializingQueue.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.registerLateInitializingQueue = void 0;\n/**\n * Registers a queue that can be filled with data before it has actually been initialized with this function.\n * Before calling this function, `window[key]` can just be handled as an array of data.\n * When calling this funcation, all accumulated data will be passed to the callback.\n * After calling this function, `window[key]` will be an object with a `push` method that will call the callback with the data.\n */ function registerLateInitializingQueue(key, callback) {\n    if (false) {}\n}\nexports.registerLateInitializingQueue = registerLateInitializingQueue; //# sourceMappingURL=lateInitializingQueue.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL2xhdGVJbml0aWFsaXppbmdRdWV1ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUNBQXFDLEdBQUcsS0FBSztBQUM3Qzs7Ozs7Q0FLQyxHQUNELFNBQVNFLDhCQUE4QkMsR0FBRyxFQUFFQyxRQUFRO0lBQ2hELElBQUksS0FBNkIsRUFBRSxFQVlsQztBQUNMO0FBQ0FKLHFDQUFxQyxHQUFHRSwrQkFDeEMsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZXhwZXJpbWVudGFsLW5leHRqcy1hcHAtc3VwcG9ydC9kaXN0L3Nzci9sYXRlSW5pdGlhbGl6aW5nUXVldWUuanM/NTcwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVnaXN0ZXJMYXRlSW5pdGlhbGl6aW5nUXVldWUgPSB2b2lkIDA7XG4vKipcbiAqIFJlZ2lzdGVycyBhIHF1ZXVlIHRoYXQgY2FuIGJlIGZpbGxlZCB3aXRoIGRhdGEgYmVmb3JlIGl0IGhhcyBhY3R1YWxseSBiZWVuIGluaXRpYWxpemVkIHdpdGggdGhpcyBmdW5jdGlvbi5cbiAqIEJlZm9yZSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIGB3aW5kb3dba2V5XWAgY2FuIGp1c3QgYmUgaGFuZGxlZCBhcyBhbiBhcnJheSBvZiBkYXRhLlxuICogV2hlbiBjYWxsaW5nIHRoaXMgZnVuY2F0aW9uLCBhbGwgYWNjdW11bGF0ZWQgZGF0YSB3aWxsIGJlIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suXG4gKiBBZnRlciBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIGB3aW5kb3dba2V5XWAgd2lsbCBiZSBhbiBvYmplY3Qgd2l0aCBhIGBwdXNoYCBtZXRob2QgdGhhdCB3aWxsIGNhbGwgdGhlIGNhbGxiYWNrIHdpdGggdGhlIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyTGF0ZUluaXRpYWxpemluZ1F1ZXVlKGtleSwgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjb25zdCBwcmV2aW91c0RhdGEgPSB3aW5kb3dba2V5XSB8fCBbXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJldmlvdXNEYXRhKSkge1xuICAgICAgICAgICAgd2luZG93W2tleV0gPSB7XG4gICAgICAgICAgICAgICAgcHVzaDogKC4uLmRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvd1trZXldLnB1c2goLi4ucHJldmlvdXNEYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMucmVnaXN0ZXJMYXRlSW5pdGlhbGl6aW5nUXVldWUgPSByZWdpc3RlckxhdGVJbml0aWFsaXppbmdRdWV1ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhdGVJbml0aWFsaXppbmdRdWV1ZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZWdpc3RlckxhdGVJbml0aWFsaXppbmdRdWV1ZSIsImtleSIsImNhbGxiYWNrIiwicHJldmlvdXNEYXRhIiwid2luZG93IiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/lateInitializingQueue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/testHelpers.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/testHelpers.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resetNextSSRApolloSingletons = void 0;\nconst ApolloNextAppProvider_1 = __webpack_require__(/*! ./ApolloNextAppProvider */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloNextAppProvider.js\");\nconst ApolloRehydrateSymbols_1 = __webpack_require__(/*! ./ApolloRehydrateSymbols */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js\");\n/**\n * Resets the singleton instances created for the Apollo SSR data transport and caches.\n *\n * To be used in testing only, like\n * ```ts\n * afterEach(resetNextSSRApolloSingletons);\n * ```\n */ function resetNextSSRApolloSingletons() {\n    delete window[ApolloRehydrateSymbols_1.ApolloRehydrationCache];\n    delete window[ApolloRehydrateSymbols_1.ApolloResultCache];\n    delete window[ApolloRehydrateSymbols_1.ApolloSSRDataTransport];\n    delete window[ApolloRehydrateSymbols_1.ApolloBackgroundQueryTransport];\n    delete window[ApolloNextAppProvider_1.ApolloClientSingleton];\n}\nexports.resetNextSSRApolloSingletons = resetNextSSRApolloSingletons; //# sourceMappingURL=testHelpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL3Rlc3RIZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQ0FBb0MsR0FBRyxLQUFLO0FBQzVDLE1BQU1HLDBCQUEwQkMsbUJBQU9BLENBQUMsK0hBQXlCO0FBQ2pFLE1BQU1DLDJCQUEyQkQsbUJBQU9BLENBQUMsaUlBQTBCO0FBQ25FOzs7Ozs7O0NBT0MsR0FDRCxTQUFTRjtJQUNMLE9BQU9JLE1BQU0sQ0FBQ0QseUJBQXlCRSxzQkFBc0IsQ0FBQztJQUM5RCxPQUFPRCxNQUFNLENBQUNELHlCQUF5QkcsaUJBQWlCLENBQUM7SUFDekQsT0FBT0YsTUFBTSxDQUFDRCx5QkFBeUJJLHNCQUFzQixDQUFDO0lBQzlELE9BQU9ILE1BQU0sQ0FBQ0QseUJBQXlCSyw4QkFBOEIsQ0FBQztJQUN0RSxPQUFPSixNQUFNLENBQUNILHdCQUF3QlEscUJBQXFCLENBQUM7QUFDaEU7QUFDQVgsb0NBQW9DLEdBQUdFLDhCQUN2Qyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL3Rlc3RIZWxwZXJzLmpzPzFhMWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc2V0TmV4dFNTUkFwb2xsb1NpbmdsZXRvbnMgPSB2b2lkIDA7XG5jb25zdCBBcG9sbG9OZXh0QXBwUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL0Fwb2xsb05leHRBcHBQcm92aWRlclwiKTtcbmNvbnN0IEFwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMSA9IHJlcXVpcmUoXCIuL0Fwb2xsb1JlaHlkcmF0ZVN5bWJvbHNcIik7XG4vKipcbiAqIFJlc2V0cyB0aGUgc2luZ2xldG9uIGluc3RhbmNlcyBjcmVhdGVkIGZvciB0aGUgQXBvbGxvIFNTUiBkYXRhIHRyYW5zcG9ydCBhbmQgY2FjaGVzLlxuICpcbiAqIFRvIGJlIHVzZWQgaW4gdGVzdGluZyBvbmx5LCBsaWtlXG4gKiBgYGB0c1xuICogYWZ0ZXJFYWNoKHJlc2V0TmV4dFNTUkFwb2xsb1NpbmdsZXRvbnMpO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHJlc2V0TmV4dFNTUkFwb2xsb1NpbmdsZXRvbnMoKSB7XG4gICAgZGVsZXRlIHdpbmRvd1tBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEuQXBvbGxvUmVoeWRyYXRpb25DYWNoZV07XG4gICAgZGVsZXRlIHdpbmRvd1tBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEuQXBvbGxvUmVzdWx0Q2FjaGVdO1xuICAgIGRlbGV0ZSB3aW5kb3dbQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb1NTUkRhdGFUcmFuc3BvcnRdO1xuICAgIGRlbGV0ZSB3aW5kb3dbQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb0JhY2tncm91bmRRdWVyeVRyYW5zcG9ydF07XG4gICAgZGVsZXRlIHdpbmRvd1tBcG9sbG9OZXh0QXBwUHJvdmlkZXJfMS5BcG9sbG9DbGllbnRTaW5nbGV0b25dO1xufVxuZXhwb3J0cy5yZXNldE5leHRTU1JBcG9sbG9TaW5nbGV0b25zID0gcmVzZXROZXh0U1NSQXBvbGxvU2luZ2xldG9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlc3RIZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlc2V0TmV4dFNTUkFwb2xsb1NpbmdsZXRvbnMiLCJBcG9sbG9OZXh0QXBwUHJvdmlkZXJfMSIsInJlcXVpcmUiLCJBcG9sbG9SZWh5ZHJhdGVTeW1ib2xzXzEiLCJ3aW5kb3ciLCJBcG9sbG9SZWh5ZHJhdGlvbkNhY2hlIiwiQXBvbGxvUmVzdWx0Q2FjaGUiLCJBcG9sbG9TU1JEYXRhVHJhbnNwb3J0IiwiQXBvbGxvQmFja2dyb3VuZFF1ZXJ5VHJhbnNwb3J0IiwiQXBvbGxvQ2xpZW50U2luZ2xldG9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/testHelpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/useTransportValue.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/useTransportValue.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useTransportValue = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst ApolloRehydrateSymbols_1 = __webpack_require__(/*! ./ApolloRehydrateSymbols */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/ApolloRehydrateSymbols.js\");\nconst RehydrationContext_1 = __webpack_require__(/*! ./RehydrationContext */ \"(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/RehydrationContext.js\");\n/**\n * A hook that mostly acts as an identity function.\n * It will only behave differently during\n * the first render on the client, in which case it will\n * try to return the last value it was called with by\n * the same component during SSR. If that is successful,\n * it will schedule another rerender, to after hydration\n * the component can change to client-side values instead.\n */ function useTransportValue(value) {\n    const id = (0, react_1.useId)();\n    const [isClient, setIsClient] = (0, react_1.useState)(false);\n    (0, react_1.useEffect)(()=>setIsClient(true), []);\n    const rehydrationContext = (0, RehydrationContext_1.useRehydrationContext)();\n    if (true) {\n        if (rehydrationContext) {\n            rehydrationContext.transportValueData[id] = value;\n        }\n    } else {}\n    return value;\n}\nexports.useTransportValue = useTransportValue; //# sourceMappingURL=useTransportValue.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL3VzZVRyYW5zcG9ydFZhbHVlLmpzIiwibWFwcGluZ3MiOiJxREFBYTtBQUViQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQseUJBQXlCLEdBQUcsS0FBSztBQUNqQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUMvQixNQUFNQywyQkFBMkJELG1CQUFPQSxDQUFDLGlJQUEwQjtBQUNuRSxNQUFNRSx1QkFBdUJGLG1CQUFPQSxDQUFDLHlIQUFzQjtBQUMzRDs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNGLGtCQUFrQkQsS0FBSztJQUM1QixNQUFNTSxLQUFLLENBQUMsR0FBR0osUUFBUUssS0FBSztJQUM1QixNQUFNLENBQUNDLFVBQVVDLFlBQVksR0FBRyxDQUFDLEdBQUdQLFFBQVFRLFFBQVEsRUFBRTtJQUNyRCxJQUFHUixRQUFRUyxTQUFTLEVBQUUsSUFBTUYsWUFBWSxPQUFPLEVBQUU7SUFDbEQsTUFBTUcscUJBQXFCLENBQUMsR0FBR1AscUJBQXFCUSxxQkFBcUI7SUFDekUsSUFBSSxJQUE0QixFQUFFO1FBQzlCLElBQUlELG9CQUFvQjtZQUNwQkEsbUJBQW1CRSxrQkFBa0IsQ0FBQ1IsR0FBRyxHQUFHTjtRQUNoRDtJQUNKLE9BQ0ssRUFTSjtJQUNELE9BQU9BO0FBQ1g7QUFDQUQseUJBQXlCLEdBQUdFLG1CQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3Qvc3NyL3VzZVRyYW5zcG9ydFZhbHVlLmpzPzE2YzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlVHJhbnNwb3J0VmFsdWUgPSB2b2lkIDA7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xID0gcmVxdWlyZShcIi4vQXBvbGxvUmVoeWRyYXRlU3ltYm9sc1wiKTtcbmNvbnN0IFJlaHlkcmF0aW9uQ29udGV4dF8xID0gcmVxdWlyZShcIi4vUmVoeWRyYXRpb25Db250ZXh0XCIpO1xuLyoqXG4gKiBBIGhvb2sgdGhhdCBtb3N0bHkgYWN0cyBhcyBhbiBpZGVudGl0eSBmdW5jdGlvbi5cbiAqIEl0IHdpbGwgb25seSBiZWhhdmUgZGlmZmVyZW50bHkgZHVyaW5nXG4gKiB0aGUgZmlyc3QgcmVuZGVyIG9uIHRoZSBjbGllbnQsIGluIHdoaWNoIGNhc2UgaXQgd2lsbFxuICogdHJ5IHRvIHJldHVybiB0aGUgbGFzdCB2YWx1ZSBpdCB3YXMgY2FsbGVkIHdpdGggYnlcbiAqIHRoZSBzYW1lIGNvbXBvbmVudCBkdXJpbmcgU1NSLiBJZiB0aGF0IGlzIHN1Y2Nlc3NmdWwsXG4gKiBpdCB3aWxsIHNjaGVkdWxlIGFub3RoZXIgcmVyZW5kZXIsIHRvIGFmdGVyIGh5ZHJhdGlvblxuICogdGhlIGNvbXBvbmVudCBjYW4gY2hhbmdlIHRvIGNsaWVudC1zaWRlIHZhbHVlcyBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiB1c2VUcmFuc3BvcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGlkID0gKDAsIHJlYWN0XzEudXNlSWQpKCk7XG4gICAgY29uc3QgW2lzQ2xpZW50LCBzZXRJc0NsaWVudF0gPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkoZmFsc2UpO1xuICAgICgwLCByZWFjdF8xLnVzZUVmZmVjdCkoKCkgPT4gc2V0SXNDbGllbnQodHJ1ZSksIFtdKTtcbiAgICBjb25zdCByZWh5ZHJhdGlvbkNvbnRleHQgPSAoMCwgUmVoeWRyYXRpb25Db250ZXh0XzEudXNlUmVoeWRyYXRpb25Db250ZXh0KSgpO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHJlaHlkcmF0aW9uQ29udGV4dCkge1xuICAgICAgICAgICAgcmVoeWRyYXRpb25Db250ZXh0LnRyYW5zcG9ydFZhbHVlRGF0YVtpZF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB3aW5kb3dbQXBvbGxvUmVoeWRyYXRlU3ltYm9sc18xLkFwb2xsb1JlaHlkcmF0aW9uQ2FjaGVdO1xuICAgICAgICBpZiAoc3RvcmUpIHtcbiAgICAgICAgICAgIGlmIChpc0NsaWVudCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdG9yZVtpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaWQgaW4gc3RvcmUpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBzdG9yZVtpZF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0cy51c2VUcmFuc3BvcnRWYWx1ZSA9IHVzZVRyYW5zcG9ydFZhbHVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlVHJhbnNwb3J0VmFsdWUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXNlVHJhbnNwb3J0VmFsdWUiLCJyZWFjdF8xIiwicmVxdWlyZSIsIkFwb2xsb1JlaHlkcmF0ZVN5bWJvbHNfMSIsIlJlaHlkcmF0aW9uQ29udGV4dF8xIiwiaWQiLCJ1c2VJZCIsImlzQ2xpZW50Iiwic2V0SXNDbGllbnQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInJlaHlkcmF0aW9uQ29udGV4dCIsInVzZVJlaHlkcmF0aW9uQ29udGV4dCIsInRyYW5zcG9ydFZhbHVlRGF0YSIsInN0b3JlIiwid2luZG93IiwiQXBvbGxvUmVoeWRyYXRpb25DYWNoZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/ssr/useTransportValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/util/htmlescape.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@apollo/experimental-nextjs-app-support/dist/util/htmlescape.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// --------------------------------------------------------------------------------\n//\n// copied from\n// https://github.com/vercel/next.js/blob/6bc07792a4462a4bf921a72ab30dc4ab2c4e1bda/packages/next/src/server/htmlescape.ts\n// License: https://github.com/vercel/next.js/blob/6bc07792a4462a4bf921a72ab30dc4ab2c4e1bda/packages/next/license.md\n//\n// --------------------------------------------------------------------------------\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.htmlEscapeJsonString = exports.ESCAPE_REGEX = void 0;\n// This utility is based on https://github.com/zertosh/htmlescape\n// License: https://github.com/zertosh/htmlescape/blob/0527ca7156a524d256101bb310a9f970f63078ad/LICENSE\nconst ESCAPE_LOOKUP = {\n    \"&\": \"\\\\u0026\",\n    \">\": \"\\\\u003e\",\n    \"<\": \"\\\\u003c\",\n    \"\\u2028\": \"\\\\u2028\",\n    \"\\u2029\": \"\\\\u2029\"\n};\nexports.ESCAPE_REGEX = /[&><\\u2028\\u2029]/g;\nfunction htmlEscapeJsonString(str) {\n    return str.replace(exports.ESCAPE_REGEX, (match)=>ESCAPE_LOOKUP[match]);\n}\nexports.htmlEscapeJsonString = htmlEscapeJsonString; //# sourceMappingURL=htmlescape.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0L2Rpc3QvdXRpbC9odG1sZXNjYXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsbUZBQW1GO0FBQ25GLEVBQUU7QUFDRixjQUFjO0FBQ2QseUhBQXlIO0FBQ3pILG9IQUFvSDtBQUNwSCxFQUFFO0FBQ0YsbUZBQW1GO0FBQ25GQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNEJBQTRCLEdBQUdBLG9CQUFvQixHQUFHLEtBQUs7QUFDM0QsaUVBQWlFO0FBQ2pFLHVHQUF1RztBQUN2RyxNQUFNSSxnQkFBZ0I7SUFDbEIsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsVUFBVTtJQUNWLFVBQVU7QUFDZDtBQUNBSixvQkFBb0IsR0FBRztBQUN2QixTQUFTRSxxQkFBcUJHLEdBQUc7SUFDN0IsT0FBT0EsSUFBSUMsT0FBTyxDQUFDTixRQUFRRyxZQUFZLEVBQUUsQ0FBQ0ksUUFBVUgsYUFBYSxDQUFDRyxNQUFNO0FBQzVFO0FBQ0FQLDRCQUE0QixHQUFHRSxzQkFDL0Isc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vZXhwZXJpbWVudGFsLW5leHRqcy1hcHAtc3VwcG9ydC9kaXN0L3V0aWwvaHRtbGVzY2FwZS5qcz85NWRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyBjb3BpZWQgZnJvbVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2Jsb2IvNmJjMDc3OTJhNDQ2MmE0YmY5MjFhNzJhYjMwZGM0YWIyYzRlMWJkYS9wYWNrYWdlcy9uZXh0L3NyYy9zZXJ2ZXIvaHRtbGVzY2FwZS50c1xuLy8gTGljZW5zZTogaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2Jsb2IvNmJjMDc3OTJhNDQ2MmE0YmY5MjFhNzJhYjMwZGM0YWIyYzRlMWJkYS9wYWNrYWdlcy9uZXh0L2xpY2Vuc2UubWRcbi8vXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5odG1sRXNjYXBlSnNvblN0cmluZyA9IGV4cG9ydHMuRVNDQVBFX1JFR0VYID0gdm9pZCAwO1xuLy8gVGhpcyB1dGlsaXR5IGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2h0bWxlc2NhcGVcbi8vIExpY2Vuc2U6IGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2h0bWxlc2NhcGUvYmxvYi8wNTI3Y2E3MTU2YTUyNGQyNTYxMDFiYjMxMGE5Zjk3MGY2MzA3OGFkL0xJQ0VOU0VcbmNvbnN0IEVTQ0FQRV9MT09LVVAgPSB7XG4gICAgXCImXCI6IFwiXFxcXHUwMDI2XCIsXG4gICAgXCI+XCI6IFwiXFxcXHUwMDNlXCIsXG4gICAgXCI8XCI6IFwiXFxcXHUwMDNjXCIsXG4gICAgXCJcXHUyMDI4XCI6IFwiXFxcXHUyMDI4XCIsXG4gICAgXCJcXHUyMDI5XCI6IFwiXFxcXHUyMDI5XCIsXG59O1xuZXhwb3J0cy5FU0NBUEVfUkVHRVggPSAvWyY+PFxcdTIwMjhcXHUyMDI5XS9nO1xuZnVuY3Rpb24gaHRtbEVzY2FwZUpzb25TdHJpbmcoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGV4cG9ydHMuRVNDQVBFX1JFR0VYLCAobWF0Y2gpID0+IEVTQ0FQRV9MT09LVVBbbWF0Y2hdKTtcbn1cbmV4cG9ydHMuaHRtbEVzY2FwZUpzb25TdHJpbmcgPSBodG1sRXNjYXBlSnNvblN0cmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0bWxlc2NhcGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaHRtbEVzY2FwZUpzb25TdHJpbmciLCJFU0NBUEVfUkVHRVgiLCJFU0NBUEVfTE9PS1VQIiwic3RyIiwicmVwbGFjZSIsIm1hdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/experimental-nextjs-app-support/dist/util/htmlescape.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/core/cache.js":
/*!*********************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/cache.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloCache: () => (/* binding */ ApolloCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n/* harmony import */ var _core_equalByQuery_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/equalByQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\");\n\n\n\n\n\n\nvar ApolloCache = /** @class */ function() {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        // Make sure we compute the same (===) fragment query document every\n        // time we receive the same fragment in readFragment.\n        this.getFragmentDoc = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)(_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.getFragmentQueryDocument, {\n            max: _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes[\"cache.fragmentQueryDocuments\"] || 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n            cache: _wry_caches__WEBPACK_IMPORTED_MODULE_3__.WeakCache\n        });\n    }\n    // Transactional API\n    // The batch method is intended to replace/subsume both performTransaction\n    // and recordOptimisticTransaction, but performTransaction came first, so we\n    // provide a default batch implementation that's just another way of calling\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n    // override the batch method to do more interesting things with its options.\n    ApolloCache.prototype.batch = function(options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n        var updateResult;\n        this.performTransaction(function() {\n            return updateResult = options.update(_this);\n        }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function(transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    // Optional API\n    // Called once per input document, allowing the cache to make static changes\n    // to the query, such as adding __typename fields.\n    ApolloCache.prototype.transformDocument = function(document) {\n        return document;\n    };\n    // Called before each ApolloLink request, allowing the cache to make dynamic\n    // changes to the query, such as filling in missing fragment definitions.\n    ApolloCache.prototype.transformForLink = function(document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function(object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function() {\n        return [];\n    };\n    ApolloCache.prototype.modify = function(options) {\n        return false;\n    };\n    // DataProxy API\n    ApolloCache.prototype.readQuery = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = !!options.optimistic;\n        }\n        return this.read((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n            rootId: options.id || \"ROOT_QUERY\",\n            optimistic: optimistic\n        }));\n    };\n    /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */ ApolloCache.prototype.watchFragment = function(options) {\n        var _this = this;\n        var fragment = options.fragment, fragmentName = options.fragmentName, from = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, otherOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(options, [\n            \"fragment\",\n            \"fragmentName\",\n            \"from\",\n            \"optimistic\"\n        ]);\n        var query = this.getFragmentDoc(fragment, fragmentName);\n        var diffOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, otherOptions), {\n            returnPartialData: true,\n            id: // While our TypeScript types do not allow for `undefined` as a valid\n            // `from`, its possible `useFragment` gives us an `undefined` since it\n            // calls` cache.identify` and provides that value to `from`. We are\n            // adding this fix here however to ensure those using plain JavaScript\n            // and using `cache.identify` themselves will avoid seeing the obscure\n            // warning.\n            typeof from === \"undefined\" || typeof from === \"string\" ? from : this.identify(from),\n            query: query,\n            optimistic: optimistic\n        });\n        var latestDiff;\n        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.Observable(function(observer) {\n            return _this.watch((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, diffOptions), {\n                immediate: true,\n                callback: function(diff) {\n                    if (// Always ensure we deliver the first result\n                    latestDiff && (0,_core_equalByQuery_js__WEBPACK_IMPORTED_MODULE_6__.equalByQuery)(query, {\n                        data: latestDiff === null || latestDiff === void 0 ? void 0 : latestDiff.result\n                    }, {\n                        data: diff.result\n                    })) {\n                        return;\n                    }\n                    var result = {\n                        data: diff.result,\n                        complete: !!diff.complete\n                    };\n                    if (diff.missing) {\n                        result.missing = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.mergeDeepArray)(diff.missing.map(function(error) {\n                            return error.missing;\n                        }));\n                    }\n                    latestDiff = diff;\n                    observer.next(result);\n                }\n            }));\n        });\n    };\n    ApolloCache.prototype.readFragment = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = !!options.optimistic;\n        }\n        return this.read((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n            query: this.getFragmentDoc(options.fragment, options.fragmentName),\n            rootId: options.id,\n            optimistic: optimistic\n        }));\n    };\n    ApolloCache.prototype.writeQuery = function(_a) {\n        var id = _a.id, data = _a.data, options = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(_a, [\n            \"id\",\n            \"data\"\n        ]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function(_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(_a, [\n            \"id\",\n            \"data\",\n            \"fragment\",\n            \"fragmentName\"\n        ]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function(options, update) {\n        return this.batch({\n            update: function(cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeQuery((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                    data: data\n                }));\n                return data;\n            }\n        });\n    };\n    ApolloCache.prototype.updateFragment = function(options, update) {\n        return this.batch({\n            update: function(cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeFragment((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                    data: data\n                }));\n                return data;\n            }\n        });\n    };\n    return ApolloCache;\n}();\n\nif (globalThis.__DEV__ !== false) {\n    ApolloCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_8__.getApolloCacheMemoryInternals;\n} //# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/core/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/core/types/Cache.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/types/Cache.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cache: () => (/* binding */ Cache)\n/* harmony export */ });\nvar Cache;\n(function(Cache) {})(Cache || (Cache = {})); //# sourceMappingURL=Cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvY29yZS90eXBlcy9DYWNoZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsTUFBTTtBQUNoQixVQUFVQSxLQUFLLEdBQ2hCLEdBQUdBLFNBQVVBLENBQUFBLFFBQVEsQ0FBQyxLQUN0QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvY29yZS90eXBlcy9DYWNoZS5qcz82MjU3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgQ2FjaGU7XG4oZnVuY3Rpb24gKENhY2hlKSB7XG59KShDYWNoZSB8fCAoQ2FjaGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FjaGUuanMubWFwIl0sIm5hbWVzIjpbIkNhY2hlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/core/types/Cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/core/types/common.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/types/common.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MissingFieldError: () => (/* binding */ MissingFieldError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nvar MissingFieldError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingFieldError, _super);\n    function MissingFieldError(message, path, query, variables) {\n        var _a;\n        // 'Error' breaks prototype chain here\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        _this.path = path;\n        _this.query = query;\n        _this.variables = variables;\n        if (Array.isArray(_this.path)) {\n            _this.missing = _this.message;\n            for(var i = _this.path.length - 1; i >= 0; --i){\n                _this.missing = (_a = {}, _a[_this.path[i]] = _this.missing, _a);\n            }\n        } else {\n            _this.missing = _this.path;\n        }\n        // We're not using `Object.setPrototypeOf` here as it isn't fully supported\n        // on Android (see issue #3236).\n        _this.__proto__ = MissingFieldError.prototype;\n        return _this;\n    }\n    return MissingFieldError;\n}(Error);\n //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvY29yZS90eXBlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDbEMsSUFBSUMsb0JBQW9CLFdBQVcsR0FBSSxTQUFVQyxNQUFNO0lBQ25ERixnREFBU0EsQ0FBQ0MsbUJBQW1CQztJQUM3QixTQUFTRCxrQkFBa0JFLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLFNBQVM7UUFDdEQsSUFBSUM7UUFDSixzQ0FBc0M7UUFDdEMsSUFBSUMsUUFBUU4sT0FBT08sSUFBSSxDQUFDLElBQUksRUFBRU4sWUFBWSxJQUFJO1FBQzlDSyxNQUFNTCxPQUFPLEdBQUdBO1FBQ2hCSyxNQUFNSixJQUFJLEdBQUdBO1FBQ2JJLE1BQU1ILEtBQUssR0FBR0E7UUFDZEcsTUFBTUYsU0FBUyxHQUFHQTtRQUNsQixJQUFJSSxNQUFNQyxPQUFPLENBQUNILE1BQU1KLElBQUksR0FBRztZQUMzQkksTUFBTUksT0FBTyxHQUFHSixNQUFNTCxPQUFPO1lBQzdCLElBQUssSUFBSVUsSUFBSUwsTUFBTUosSUFBSSxDQUFDVSxNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHLEVBQUVBLEVBQUc7Z0JBQzdDTCxNQUFNSSxPQUFPLEdBQUlMLENBQUFBLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNDLE1BQU1KLElBQUksQ0FBQ1MsRUFBRSxDQUFDLEdBQUdMLE1BQU1JLE9BQU8sRUFBRUwsRUFBQztZQUNsRTtRQUNKLE9BQ0s7WUFDREMsTUFBTUksT0FBTyxHQUFHSixNQUFNSixJQUFJO1FBQzlCO1FBQ0EsMkVBQTJFO1FBQzNFLGdDQUFnQztRQUNoQ0ksTUFBTU8sU0FBUyxHQUFHZCxrQkFBa0JlLFNBQVM7UUFDN0MsT0FBT1I7SUFDWDtJQUNBLE9BQU9QO0FBQ1gsRUFBRWdCO0FBQzJCLENBQzdCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jYWNoZS9jb3JlL3R5cGVzL2NvbW1vbi5qcz82YWEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xudmFyIE1pc3NpbmdGaWVsZEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNaXNzaW5nRmllbGRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNaXNzaW5nRmllbGRFcnJvcihtZXNzYWdlLCBwYXRoLCBxdWVyeSwgdmFyaWFibGVzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gJ0Vycm9yJyBicmVha3MgcHJvdG90eXBlIGNoYWluIGhlcmVcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIF90aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICBfdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICBfdGhpcy52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KF90aGlzLnBhdGgpKSB7XG4gICAgICAgICAgICBfdGhpcy5taXNzaW5nID0gX3RoaXMubWVzc2FnZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBfdGhpcy5wYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubWlzc2luZyA9IChfYSA9IHt9LCBfYVtfdGhpcy5wYXRoW2ldXSA9IF90aGlzLm1pc3NpbmcsIF9hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLm1pc3NpbmcgPSBfdGhpcy5wYXRoO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlJ3JlIG5vdCB1c2luZyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBoZXJlIGFzIGl0IGlzbid0IGZ1bGx5IHN1cHBvcnRlZFxuICAgICAgICAvLyBvbiBBbmRyb2lkIChzZWUgaXNzdWUgIzMyMzYpLlxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSBNaXNzaW5nRmllbGRFcnJvci5wcm90b3R5cGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE1pc3NpbmdGaWVsZEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgTWlzc2luZ0ZpZWxkRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiTWlzc2luZ0ZpZWxkRXJyb3IiLCJfc3VwZXIiLCJtZXNzYWdlIiwicGF0aCIsInF1ZXJ5IiwidmFyaWFibGVzIiwiX2EiLCJfdGhpcyIsImNhbGwiLCJBcnJheSIsImlzQXJyYXkiLCJtaXNzaW5nIiwiaSIsImxlbmd0aCIsIl9fcHJvdG9fXyIsInByb3RvdHlwZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@apollo/client/cache/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloCache: () => (/* reexport safe */ _core_cache_js__WEBPACK_IMPORTED_MODULE_1__.ApolloCache),\n/* harmony export */   Cache: () => (/* reexport safe */ _core_types_Cache_js__WEBPACK_IMPORTED_MODULE_2__.Cache),\n/* harmony export */   EntityStore: () => (/* reexport safe */ _inmemory_entityStore_js__WEBPACK_IMPORTED_MODULE_6__.EntityStore),\n/* harmony export */   InMemoryCache: () => (/* reexport safe */ _inmemory_inMemoryCache_js__WEBPACK_IMPORTED_MODULE_8__.InMemoryCache),\n/* harmony export */   MissingFieldError: () => (/* reexport safe */ _core_types_common_js__WEBPACK_IMPORTED_MODULE_3__.MissingFieldError),\n/* harmony export */   Policies: () => (/* reexport safe */ _inmemory_policies_js__WEBPACK_IMPORTED_MODULE_10__.Policies),\n/* harmony export */   cacheSlot: () => (/* reexport safe */ _inmemory_reactiveVars_js__WEBPACK_IMPORTED_MODULE_9__.cacheSlot),\n/* harmony export */   canonicalStringify: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.canonicalStringify),\n/* harmony export */   createFragmentRegistry: () => (/* reexport safe */ _inmemory_fragmentRegistry_js__WEBPACK_IMPORTED_MODULE_11__.createFragmentRegistry),\n/* harmony export */   defaultDataIdFromObject: () => (/* reexport safe */ _inmemory_helpers_js__WEBPACK_IMPORTED_MODULE_7__.defaultDataIdFromObject),\n/* harmony export */   fieldNameFromStoreName: () => (/* reexport safe */ _inmemory_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName),\n/* harmony export */   isReference: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.isReference),\n/* harmony export */   makeReference: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.makeReference),\n/* harmony export */   makeVar: () => (/* reexport safe */ _inmemory_reactiveVars_js__WEBPACK_IMPORTED_MODULE_9__.makeVar)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _core_cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/cache.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/cache.js\");\n/* harmony import */ var _core_types_Cache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/types/Cache.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/Cache.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/types/common.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _inmemory_entityStore_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./inmemory/entityStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _inmemory_helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./inmemory/helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _inmemory_inMemoryCache_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./inmemory/inMemoryCache.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js\");\n/* harmony import */ var _inmemory_reactiveVars_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./inmemory/reactiveVars.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _inmemory_policies_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./inmemory/policies.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n/* harmony import */ var _inmemory_fragmentRegistry_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./inmemory/fragmentRegistry.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/fragmentRegistry.js\");\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDTztBQUNBO0FBQ2E7QUFDNkI7QUFDaEM7QUFDaUM7QUFDN0I7QUFDSTtBQUNkO0FBQ3NCO0FBQ3BDLENBQ3BDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jYWNoZS9pbmRleC5qcz81MzRlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBBcG9sbG9DYWNoZSB9IGZyb20gXCIuL2NvcmUvY2FjaGUuanNcIjtcbmV4cG9ydCB7IENhY2hlIH0gZnJvbSBcIi4vY29yZS90eXBlcy9DYWNoZS5qc1wiO1xuZXhwb3J0IHsgTWlzc2luZ0ZpZWxkRXJyb3IgfSBmcm9tIFwiLi9jb3JlL3R5cGVzL2NvbW1vbi5qc1wiO1xuZXhwb3J0IHsgaXNSZWZlcmVuY2UsIG1ha2VSZWZlcmVuY2UsIGNhbm9uaWNhbFN0cmluZ2lmeSwgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBFbnRpdHlTdG9yZSB9IGZyb20gXCIuL2lubWVtb3J5L2VudGl0eVN0b3JlLmpzXCI7XG5leHBvcnQgeyBmaWVsZE5hbWVGcm9tU3RvcmVOYW1lLCBkZWZhdWx0RGF0YUlkRnJvbU9iamVjdCwgfSBmcm9tIFwiLi9pbm1lbW9yeS9oZWxwZXJzLmpzXCI7XG5leHBvcnQgeyBJbk1lbW9yeUNhY2hlIH0gZnJvbSBcIi4vaW5tZW1vcnkvaW5NZW1vcnlDYWNoZS5qc1wiO1xuZXhwb3J0IHsgbWFrZVZhciwgY2FjaGVTbG90IH0gZnJvbSBcIi4vaW5tZW1vcnkvcmVhY3RpdmVWYXJzLmpzXCI7XG5leHBvcnQgeyBQb2xpY2llcyB9IGZyb20gXCIuL2lubWVtb3J5L3BvbGljaWVzLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVGcmFnbWVudFJlZ2lzdHJ5IH0gZnJvbSBcIi4vaW5tZW1vcnkvZnJhZ21lbnRSZWdpc3RyeS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaW5tZW1vcnkvdHlwZXMuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJBcG9sbG9DYWNoZSIsIkNhY2hlIiwiTWlzc2luZ0ZpZWxkRXJyb3IiLCJpc1JlZmVyZW5jZSIsIm1ha2VSZWZlcmVuY2UiLCJjYW5vbmljYWxTdHJpbmdpZnkiLCJFbnRpdHlTdG9yZSIsImZpZWxkTmFtZUZyb21TdG9yZU5hbWUiLCJkZWZhdWx0RGF0YUlkRnJvbU9iamVjdCIsIkluTWVtb3J5Q2FjaGUiLCJtYWtlVmFyIiwiY2FjaGVTbG90IiwiUG9saWNpZXMiLCJjcmVhdGVGcmFnbWVudFJlZ2lzdHJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/entityStore.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EntityStore: () => (/* binding */ EntityStore),\n/* harmony export */   maybeDependOnExistenceOfEntity: () => (/* binding */ maybeDependOnExistenceOfEntity),\n/* harmony export */   supportsResultCaching: () => (/* binding */ supportsResultCaching)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n\n\n\n\nvar DELETE = Object.create(null);\nvar delModifier = function() {\n    return DELETE;\n};\nvar INVALIDATE = Object.create(null);\nvar EntityStore = /** @class */ function() {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        // Maps root entity IDs to the number of times they have been retained, minus\n        // the number of times they have been released. Retained entities keep other\n        // entities they reference (even indirectly) from being garbage collected.\n        this.rootIds = Object.create(null);\n        // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n        this.refs = Object.create(null);\n        // Bound function that can be passed around to provide easy access to fields\n        // of Reference objects as well as ordinary objects.\n        this.getFieldValue = function(objectOrReference, storeFieldName) {\n            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n        };\n        // Returns true for non-normalized StoreObjects and non-dangling\n        // References, indicating that readField(name, objOrRef) has a chance of\n        // working. Useful for filtering out dangling references from lists.\n        this.canRead = function(objOrRef) {\n            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n        };\n        // Bound function that converts an id or an object with a __typename and\n        // primary key fields to a Reference object. If called with a Reference object,\n        // that same Reference object is returned. Pass true for mergeIntoStore to persist\n        // an object into the store.\n        this.toReference = function(objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(objOrIdOrRef);\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    // Although the EntityStore class is abstract, it contains concrete\n    // implementations of the various NormalizedCache interface methods that\n    // are inherited by the Root and Layer subclasses.\n    EntityStore.prototype.toObject = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.data);\n    };\n    EntityStore.prototype.has = function(dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function(dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function(dataId, dependOnExistence) {\n        // The has method (above) calls lookup with dependOnExistence = true, so\n        // that it can later be invalidated when we add or remove a StoreObject for\n        // this dataId. Any consumer who cares about the contents of the StoreObject\n        // should not rely on this dependency, since the contents could change\n        // without the object being added or removed.\n        if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function(older, newer) {\n        var _this = this;\n        var dataId;\n        // Convert unexpected references to ID strings.\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(older)) older = older.__ref;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newer)) newer = newer.__ref;\n        var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n        var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n        // If newer was a string ID, but that ID was not defined in this store,\n        // then there are no fields to be merged, so we're done.\n        if (!incoming) return;\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof dataId === \"string\", 1);\n        var merged = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        // Even if merged === existing, existing may have come from a lower\n        // layer, so we always need to set this.data[dataId] on this level.\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                // If we added a new StoreObject where there was previously none, dirty\n                // anything that depended on the existence of this dataId, such as the\n                // EntityStore#has method.\n                if (!existing) fieldsToDirty_1.__exists = 1;\n                // Now invalidate dependents who called getFieldValue for any fields\n                // that are changing as a result of this merge.\n                Object.keys(incoming).forEach(function(storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        // Always dirty the full storeFieldName, which may include\n                        // serialized arguments following the fieldName prefix.\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n                        // different from storeFieldName and this field does not have\n                        // keyArgs configured, because that means the cache can't make\n                        // any assumptions about how field values with the same field\n                        // name but different arguments might be interrelated, so it\n                        // must err on the side of invalidating all field values that\n                        // share the same short fieldName, regardless of arguments.\n                        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n                        if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        // If merged[storeFieldName] has become undefined, and this is the\n                        // Root layer, actually delete the property from the merged object,\n                        // which is guaranteed to have been created fresh in this method.\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && // Since we return default root __typename strings\n                // automatically from store.get, we don't need to dirty the\n                // ROOT_QUERY.__typename field if merged.__typename is equal\n                // to the default string (usually \"Query\").\n                this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function(fieldName) {\n                    return _this.group.dirty(dataId, fieldName);\n                });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function(dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function(fieldNameOrOptions, from) {\n                    return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                        fieldName: fieldNameOrOptions,\n                        from: from || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(dataId)\n                    } : fieldNameOrOptions, {\n                        store: _this\n                    });\n                }\n            };\n            Object.keys(storeObject).forEach(function(storeFieldName) {\n                var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0) return;\n                var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE : modify((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)(fieldValue), (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, sharedDetails_1), {\n                        fieldName: fieldName,\n                        storeFieldName: storeFieldName,\n                        storage: _this.getStorage(dataId, storeFieldName)\n                    }));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    } else {\n                        if (newValue === DELETE) newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                            if (globalThis.__DEV__ !== false) {\n                                var checkReference = function(ref) {\n                                    if (_this.lookup(ref.__ref) === undefined) {\n                                        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(2, ref);\n                                        return true;\n                                    }\n                                };\n                                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newValue)) {\n                                    checkReference(newValue);\n                                } else if (Array.isArray(newValue)) {\n                                    // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                                    var seenReference = false;\n                                    var someNonReference = void 0;\n                                    for(var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++){\n                                        var value = newValue_1[_i];\n                                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(value)) {\n                                            seenReference = true;\n                                            if (checkReference(value)) break;\n                                        } else {\n                                            // Do not warn on primitive values, since those could never be represented\n                                            // by a reference. This is a valid (albeit uncommon) use case.\n                                            if (typeof value === \"object\" && !!value) {\n                                                var id = _this.policies.identify(value)[0];\n                                                // check if object could even be referenced, otherwise we are not interested in it for this warning\n                                                if (id) {\n                                                    someNonReference = value;\n                                                }\n                                            }\n                                        }\n                                        if (seenReference && someNonReference !== undefined) {\n                                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(3, someNonReference);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    } else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    // If called with only one argument, removes the entire entity\n    // identified by dataId. If called with a fieldName as well, removes all\n    // fields of that entity whose names match fieldName according to the\n    // fieldNameFromStoreName helper function. If called with a fieldName\n    // and variables, removes all fields of that entity whose names match fieldName\n    // and whose arguments when cached exactly match the variables passed.\n    EntityStore.prototype.delete = function(dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n                typename: typename,\n                fieldName: fieldName,\n                args: args\n            }) : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function(options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            // Always invalidate the field to trigger rereading of watched\n            // queries, even if no cache data was modified by the eviction,\n            // because queries may depend on computed fields with custom read\n            // functions, whose values are not stored in the EntityStore.\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function() {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function() {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function(id) {\n            if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = {\n                extraRootIds: extraRootIds.sort()\n            };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function(newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function(dataId) {\n            if (!(newData && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(newData, [\n                \"__META\"\n            ]);\n            Object.keys(rest_1).forEach(function(dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function(rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function(rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count) delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    // Return a Set<string> of all the ID strings that have been retained by\n    // this layer/root *and* any layers/roots beneath it.\n    EntityStore.prototype.getRootIdSet = function(ids) {\n        if (ids === void 0) {\n            ids = new Set();\n        }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        } else {\n            // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n            // always considered roots for garbage collection, regardless of\n            // their retainment counts in this.rootIds.\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    // The goal of garbage collection is to remove IDs from the Root layer of the\n    // store that are no longer reachable starting from any IDs that have been\n    // explicitly retained (see retain and release, above). Returns an array of\n    // dataId strings that were removed from the store.\n    EntityStore.prototype.gc = function() {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function(id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(snapshot, id)) {\n                // Because we are iterating over an ECMAScript Set, the IDs we add here\n                // will be visited in later iterations of the forEach loop only if they\n                // were not previously contained by the Set.\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                // By removing IDs from the snapshot object here, we protect them from\n                // getting removed from the root store layer below.\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while(root_1 instanceof Layer)root_1 = root_1.parent;\n            idsToRemove.forEach(function(id) {\n                return root_1.delete(id);\n            });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function(dataId) {\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var root = this.data[dataId];\n            if (!root) return found_1;\n            var workSet_1 = new Set([\n                root\n            ]);\n            // Within the store, only arrays and objects can contain child entity\n            // references, so we can prune the traversal using this predicate:\n            workSet_1.forEach(function(obj) {\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(obj)) {\n                    found_1[obj.__ref] = true;\n                // In rare cases, a { __ref } Reference object may have other fields.\n                // This often indicates a mismerging of References with StoreObjects,\n                // but garbage collection should not be fooled by a stray __ref\n                // property in a StoreObject (ignoring all the other fields just\n                // because the StoreObject looks like a Reference). To avoid this\n                // premature termination of findChildRefIds recursion, we fall through\n                // to the code below, which will handle any other properties of obj.\n                }\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(obj)) {\n                    Object.keys(obj).forEach(function(key) {\n                        var child = obj[key];\n                        // No need to add primitive values to the workSet, since they cannot\n                        // contain reference objects.\n                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function() {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}();\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nvar CacheGroup = /** @class */ function() {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) {\n            parent = null;\n        }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function() {\n        this.d = this.caching ? (0,optimism__WEBPACK_IMPORTED_MODULE_1__.dep)() : null;\n        this.keyMaker = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function(dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                // Fields with arguments that contribute extra identifying\n                // information to the fieldName (thus forming the storeFieldName)\n                // depend not only on the full storeFieldName but also on the\n                // short fieldName, so the field can be invalidated using either\n                // level of specificity.\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function(dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), // When storeFieldName === \"__exists\", that means the entity identified\n            // by dataId has either disappeared from the cache or was newly added,\n            // so the result caching system would do well to \"forget everything it\n            // knows\" about that object. To achieve that kind of invalidation, we\n            // not only dirty the associated result cache entry, but also remove it\n            // completely from the dependency graph. For the optimism implementation\n            // details, see https://github.com/benjamn/optimism/pull/195.\n            storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}();\nfunction makeDepKey(dataId, storeFieldName) {\n    // Since field names cannot have '#' characters in them, this method\n    // of joining the field name and the ID should be unambiguous, and much\n    // cheaper than JSON.stringify([dataId, fieldName]).\n    return storeFieldName + \"#\" + dataId;\n}\nfunction maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        // We use this pseudo-field __exists elsewhere in the EntityStore code to\n        // represent changes in the existence of the entity object identified by\n        // entityId. This dependency gets reliably dirtied whenever an object with\n        // this ID is deleted (or newly created) within this group, so any result\n        // cache entries (for example, StoreReader#executeSelectionSet results) that\n        // depend on __exists for this entityId will get dirtied as well, leading to\n        // the eventual recomputation (instead of reuse) of those result objects the\n        // next time someone reads them from the cache.\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function(EntityStore) {\n    // Refer to this class as EntityStore.Root outside this namespace.\n    var Root = /** @class */ function(_super) {\n        (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);\n            if (seed) _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function(layerId, replay) {\n            // Adding an optimistic Layer on top of the Root actually adds the Layer\n            // on top of the Stump, so the Stump always comes between the Root and\n            // any Layer objects that we've added.\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function() {\n            // Never remove the root layer.\n            return this;\n        };\n        Root.prototype.getStorage = function() {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore);\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nvar Layer = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function(layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function(layerId) {\n        var _this = this;\n        // Remove all instances of the given id, not just the first one.\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                // Dirty every ID we're removing. Technically we might be able to avoid\n                // dirtying fields that have values in higher layers, but we don't have\n                // easy access to higher layers here, and we're about to recreate those\n                // layers anyway (see parent.addLayer below).\n                Object.keys(this.data).forEach(function(dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        // The StoreObject identified by dataId was defined in this layer\n                        // but will be undefined in the parent layer, so we can delete the\n                        // whole entity using this.delete(dataId). Since we're about to\n                        // throw this layer away, the only goal of this deletion is to dirty\n                        // the removed fields.\n                        _this.delete(dataId);\n                    } else if (!ownStoreObject) {\n                        // This layer had an entry for dataId but it was undefined, which\n                        // means the entity was deleted in this layer, and it's about to\n                        // become undeleted when we remove this layer, so we need to dirty\n                        // all fields that are about to be reexposed.\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function(storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    } else if (ownStoreObject !== parentStoreObject) {\n                        // If ownStoreObject is not exactly the same as parentStoreObject,\n                        // dirty any fields whose values will change as a result of this\n                        // removal.\n                        Object.keys(ownStoreObject).forEach(function(storeFieldName) {\n                            if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        // No changes are necessary if the parent chain remains identical.\n        if (parent === this.parent) return this;\n        // Recreate this layer on top of the new parent.\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function(dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId) ? (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function() {\n        var p = this.parent;\n        while(p.parent)p = p.parent;\n        return p.getStorage.apply(p, // @ts-expect-error\n        arguments);\n    };\n    return Layer;\n}(EntityStore);\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nvar Stump = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function() {}, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function() {\n        // Never remove the Stump layer.\n        return this;\n    };\n    Stump.prototype.merge = function(older, newer) {\n        // We never want to write any data into the Stump, so we forward any merge\n        // calls to the Root instead. Another option here would be to throw an\n        // exception, but the toReference(object, true) function can sometimes\n        // trigger Stump writes (which used to be Root writes, before the Stump\n        // concept was introduced).\n        return this.parent.merge(older, newer);\n    };\n    return Stump;\n}(Layer);\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    // Wherever there is a key collision, prefer the incoming value, unless\n    // it is deeply equal to the existing value. It's worth checking deep\n    // equality here (even though blindly returning incoming would be\n    // logically correct) because preserving the referential identity of\n    // existing data can prevent needless rereading and rerendering.\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nfunction supportsResultCaching(store) {\n    // When result caching is disabled, store.depend will be null.\n    return !!(store instanceof EntityStore && store.group.caching);\n} //# sourceMappingURL=entityStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvZW50aXR5U3RvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBb0Q7QUFDUztBQUM5QjtBQUNPO0FBQ0w7QUFDbUc7QUFDdEU7QUFDOUQsSUFBSWUsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0FBQzNCLElBQUlDLGNBQWM7SUFBYyxPQUFPSDtBQUFRO0FBQy9DLElBQUlJLGFBQWFILE9BQU9DLE1BQU0sQ0FBQztBQUMvQixJQUFJRyxjQUFjLFdBQVcsR0FBSTtJQUM3QixTQUFTQSxZQUFZQyxRQUFRLEVBQUVDLEtBQUs7UUFDaEMsSUFBSUMsUUFBUSxJQUFJO1FBQ2hCLElBQUksQ0FBQ0YsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNFLElBQUksR0FBR1IsT0FBT0MsTUFBTSxDQUFDO1FBQzFCLDZFQUE2RTtRQUM3RSw0RUFBNEU7UUFDNUUsMEVBQTBFO1FBQzFFLElBQUksQ0FBQ1EsT0FBTyxHQUFHVCxPQUFPQyxNQUFNLENBQUM7UUFDN0IsNEVBQTRFO1FBQzVFLElBQUksQ0FBQ1MsSUFBSSxHQUFHVixPQUFPQyxNQUFNLENBQUM7UUFDMUIsNEVBQTRFO1FBQzVFLG9EQUFvRDtRQUNwRCxJQUFJLENBQUNVLGFBQWEsR0FBRyxTQUFVQyxpQkFBaUIsRUFBRUMsY0FBYztZQUM1RCxPQUFPbkIsb0VBQWVBLENBQUNILGdFQUFXQSxDQUFDcUIscUJBQy9CTCxNQUFNTyxHQUFHLENBQUNGLGtCQUFrQkcsS0FBSyxFQUFFRixrQkFDakNELHFCQUFxQkEsaUJBQWlCLENBQUNDLGVBQWU7UUFDaEU7UUFDQSxnRUFBZ0U7UUFDaEUsd0VBQXdFO1FBQ3hFLG9FQUFvRTtRQUNwRSxJQUFJLENBQUNHLE9BQU8sR0FBRyxTQUFVQyxRQUFRO1lBQzdCLE9BQU8xQixnRUFBV0EsQ0FBQzBCLFlBQ2ZWLE1BQU1XLEdBQUcsQ0FBQ0QsU0FBU0YsS0FBSyxJQUN0QixPQUFPRSxhQUFhO1FBQzlCO1FBQ0Esd0VBQXdFO1FBQ3hFLCtFQUErRTtRQUMvRSxrRkFBa0Y7UUFDbEYsNEJBQTRCO1FBQzVCLElBQUksQ0FBQ0UsV0FBVyxHQUFHLFNBQVVDLFlBQVksRUFBRUMsY0FBYztZQUNyRCxJQUFJLE9BQU9ELGlCQUFpQixVQUFVO2dCQUNsQyxPQUFPNUIsa0VBQWFBLENBQUM0QjtZQUN6QjtZQUNBLElBQUk3QixnRUFBV0EsQ0FBQzZCLGVBQWU7Z0JBQzNCLE9BQU9BO1lBQ1g7WUFDQSxJQUFJRSxLQUFLZixNQUFNRixRQUFRLENBQUNrQixRQUFRLENBQUNILGFBQWEsQ0FBQyxFQUFFO1lBQ2pELElBQUlFLElBQUk7Z0JBQ0osSUFBSUUsTUFBTWhDLGtFQUFhQSxDQUFDOEI7Z0JBQ3hCLElBQUlELGdCQUFnQjtvQkFDaEJkLE1BQU1rQixLQUFLLENBQUNILElBQUlGO2dCQUNwQjtnQkFDQSxPQUFPSTtZQUNYO1FBQ0o7SUFDSjtJQUNBLG1FQUFtRTtJQUNuRSx3RUFBd0U7SUFDeEUsa0RBQWtEO0lBQ2xEcEIsWUFBWXNCLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHO1FBQzdCLE9BQU8zQywrQ0FBUUEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDd0IsSUFBSTtJQUNqQztJQUNBSixZQUFZc0IsU0FBUyxDQUFDUixHQUFHLEdBQUcsU0FBVVUsTUFBTTtRQUN4QyxPQUFPLElBQUksQ0FBQ0MsTUFBTSxDQUFDRCxRQUFRLFVBQVUsS0FBSztJQUM5QztJQUNBeEIsWUFBWXNCLFNBQVMsQ0FBQ1osR0FBRyxHQUFHLFNBQVVjLE1BQU0sRUFBRUUsU0FBUztRQUNuRCxJQUFJLENBQUN4QixLQUFLLENBQUN5QixNQUFNLENBQUNILFFBQVFFO1FBQzFCLElBQUlqQywrQ0FBTUEsQ0FBQ21DLElBQUksQ0FBQyxJQUFJLENBQUN4QixJQUFJLEVBQUVvQixTQUFTO1lBQ2hDLElBQUlLLGNBQWMsSUFBSSxDQUFDekIsSUFBSSxDQUFDb0IsT0FBTztZQUNuQyxJQUFJSyxlQUFlcEMsK0NBQU1BLENBQUNtQyxJQUFJLENBQUNDLGFBQWFILFlBQVk7Z0JBQ3BELE9BQU9HLFdBQVcsQ0FBQ0gsVUFBVTtZQUNqQztRQUNKO1FBQ0EsSUFBSUEsY0FBYyxnQkFDZGpDLCtDQUFNQSxDQUFDbUMsSUFBSSxDQUFDLElBQUksQ0FBQzNCLFFBQVEsQ0FBQzZCLGlCQUFpQixFQUFFTixTQUFTO1lBQ3RELE9BQU8sSUFBSSxDQUFDdkIsUUFBUSxDQUFDNkIsaUJBQWlCLENBQUNOLE9BQU87UUFDbEQ7UUFDQSxJQUFJLElBQUksWUFBWU8sT0FBTztZQUN2QixPQUFPLElBQUksQ0FBQ0MsTUFBTSxDQUFDdEIsR0FBRyxDQUFDYyxRQUFRRTtRQUNuQztJQUNKO0lBQ0ExQixZQUFZc0IsU0FBUyxDQUFDRyxNQUFNLEdBQUcsU0FBVUQsTUFBTSxFQUFFUyxpQkFBaUI7UUFDOUQsd0VBQXdFO1FBQ3hFLDJFQUEyRTtRQUMzRSw0RUFBNEU7UUFDNUUsc0VBQXNFO1FBQ3RFLDZDQUE2QztRQUM3QyxJQUFJQSxtQkFDQSxJQUFJLENBQUMvQixLQUFLLENBQUN5QixNQUFNLENBQUNILFFBQVE7UUFDOUIsSUFBSS9CLCtDQUFNQSxDQUFDbUMsSUFBSSxDQUFDLElBQUksQ0FBQ3hCLElBQUksRUFBRW9CLFNBQVM7WUFDaEMsT0FBTyxJQUFJLENBQUNwQixJQUFJLENBQUNvQixPQUFPO1FBQzVCO1FBQ0EsSUFBSSxJQUFJLFlBQVlPLE9BQU87WUFDdkIsT0FBTyxJQUFJLENBQUNDLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDRCxRQUFRUztRQUN0QztRQUNBLElBQUksSUFBSSxDQUFDaEMsUUFBUSxDQUFDNkIsaUJBQWlCLENBQUNOLE9BQU8sRUFBRTtZQUN6QyxPQUFPNUIsT0FBT0MsTUFBTSxDQUFDO1FBQ3pCO0lBQ0o7SUFDQUcsWUFBWXNCLFNBQVMsQ0FBQ0QsS0FBSyxHQUFHLFNBQVVhLEtBQUssRUFBRUMsS0FBSztRQUNoRCxJQUFJaEMsUUFBUSxJQUFJO1FBQ2hCLElBQUlxQjtRQUNKLCtDQUErQztRQUMvQyxJQUFJckMsZ0VBQVdBLENBQUMrQyxRQUNaQSxRQUFRQSxNQUFNdkIsS0FBSztRQUN2QixJQUFJeEIsZ0VBQVdBLENBQUNnRCxRQUNaQSxRQUFRQSxNQUFNeEIsS0FBSztRQUN2QixJQUFJeUIsV0FBVyxPQUFPRixVQUFVLFdBQVcsSUFBSSxDQUFDVCxNQUFNLENBQUVELFNBQVNVLFNBQVVBO1FBQzNFLElBQUlHLFdBQVcsT0FBT0YsVUFBVSxXQUFXLElBQUksQ0FBQ1YsTUFBTSxDQUFFRCxTQUFTVyxTQUFVQTtRQUMzRSx1RUFBdUU7UUFDdkUsd0RBQXdEO1FBQ3hELElBQUksQ0FBQ0UsVUFDRDtRQUNKdEQsc0VBQVNBLENBQUMsT0FBT3lDLFdBQVcsVUFBVTtRQUN0QyxJQUFJYyxTQUFTLElBQUlqRCwyREFBVUEsQ0FBQ2tELHVCQUF1QmxCLEtBQUssQ0FBQ2UsVUFBVUM7UUFDbkUsbUVBQW1FO1FBQ25FLG1FQUFtRTtRQUNuRSxJQUFJLENBQUNqQyxJQUFJLENBQUNvQixPQUFPLEdBQUdjO1FBQ3BCLElBQUlBLFdBQVdGLFVBQVU7WUFDckIsT0FBTyxJQUFJLENBQUM5QixJQUFJLENBQUNrQixPQUFPO1lBQ3hCLElBQUksSUFBSSxDQUFDdEIsS0FBSyxDQUFDc0MsT0FBTyxFQUFFO2dCQUNwQixJQUFJQyxrQkFBa0I3QyxPQUFPQyxNQUFNLENBQUM7Z0JBQ3BDLHVFQUF1RTtnQkFDdkUsc0VBQXNFO2dCQUN0RSwwQkFBMEI7Z0JBQzFCLElBQUksQ0FBQ3VDLFVBQ0RLLGdCQUFnQkMsUUFBUSxHQUFHO2dCQUMvQixvRUFBb0U7Z0JBQ3BFLCtDQUErQztnQkFDL0M5QyxPQUFPK0MsSUFBSSxDQUFDTixVQUFVTyxPQUFPLENBQUMsU0FBVW5DLGNBQWM7b0JBQ2xELElBQUksQ0FBQzJCLFlBQ0RBLFFBQVEsQ0FBQzNCLGVBQWUsS0FBSzZCLE1BQU0sQ0FBQzdCLGVBQWUsRUFBRTt3QkFDckQsMERBQTBEO3dCQUMxRCx1REFBdUQ7d0JBQ3ZEZ0MsZUFBZSxDQUFDaEMsZUFBZSxHQUFHO3dCQUNsQyw0REFBNEQ7d0JBQzVELDZEQUE2RDt3QkFDN0QsOERBQThEO3dCQUM5RCw2REFBNkQ7d0JBQzdELDREQUE0RDt3QkFDNUQsNkRBQTZEO3dCQUM3RCwyREFBMkQ7d0JBQzNELElBQUlpQixZQUFZaEMsbUVBQXNCQSxDQUFDZTt3QkFDdkMsSUFBSWlCLGNBQWNqQixrQkFDZCxDQUFDTixNQUFNRixRQUFRLENBQUM0QyxVQUFVLENBQUNQLE9BQU9RLFVBQVUsRUFBRXBCLFlBQVk7NEJBQzFEZSxlQUFlLENBQUNmLFVBQVUsR0FBRzt3QkFDakM7d0JBQ0Esa0VBQWtFO3dCQUNsRSxtRUFBbUU7d0JBQ25FLGlFQUFpRTt3QkFDakUsSUFBSVksTUFBTSxDQUFDN0IsZUFBZSxLQUFLLEtBQUssS0FBSyxDQUFFTixDQUFBQSxpQkFBaUI0QixLQUFJLEdBQUk7NEJBQ2hFLE9BQU9PLE1BQU0sQ0FBQzdCLGVBQWU7d0JBQ2pDO29CQUNKO2dCQUNKO2dCQUNBLElBQUlnQyxnQkFBZ0JLLFVBQVUsSUFDMUIsQ0FBRVYsQ0FBQUEsWUFBWUEsU0FBU1UsVUFBVSxLQUNqQyxrREFBa0Q7Z0JBQ2xELDJEQUEyRDtnQkFDM0QsNERBQTREO2dCQUM1RCwyQ0FBMkM7Z0JBQzNDLElBQUksQ0FBQzdDLFFBQVEsQ0FBQzZCLGlCQUFpQixDQUFDTixPQUFPLEtBQUtjLE9BQU9RLFVBQVUsRUFBRTtvQkFDL0QsT0FBT0wsZ0JBQWdCSyxVQUFVO2dCQUNyQztnQkFDQWxELE9BQU8rQyxJQUFJLENBQUNGLGlCQUFpQkcsT0FBTyxDQUFDLFNBQVVsQixTQUFTO29CQUNwRCxPQUFPdkIsTUFBTUQsS0FBSyxDQUFDNkMsS0FBSyxDQUFDdkIsUUFBUUU7Z0JBQ3JDO1lBQ0o7UUFDSjtJQUNKO0lBQ0ExQixZQUFZc0IsU0FBUyxDQUFDMEIsTUFBTSxHQUFHLFNBQVV4QixNQUFNLEVBQUV5QixNQUFNO1FBQ25ELElBQUk5QyxRQUFRLElBQUk7UUFDaEIsSUFBSTBCLGNBQWMsSUFBSSxDQUFDSixNQUFNLENBQUNEO1FBQzlCLElBQUlLLGFBQWE7WUFDYixJQUFJcUIsa0JBQWtCdEQsT0FBT0MsTUFBTSxDQUFDO1lBQ3BDLElBQUlzRCxnQkFBZ0I7WUFDcEIsSUFBSUMsZUFBZTtZQUNuQixJQUFJQyxrQkFBa0I7Z0JBQ2xCMUQsUUFBUUE7Z0JBQ1JJLFlBQVlBO2dCQUNaWixhQUFhQSw0REFBV0E7Z0JBQ3hCNEIsYUFBYSxJQUFJLENBQUNBLFdBQVc7Z0JBQzdCSCxTQUFTLElBQUksQ0FBQ0EsT0FBTztnQkFDckIwQyxXQUFXLFNBQVVDLGtCQUFrQixFQUFFQyxJQUFJO29CQUN6QyxPQUFPckQsTUFBTUYsUUFBUSxDQUFDcUQsU0FBUyxDQUFDLE9BQU9DLHVCQUF1QixXQUMxRDt3QkFDSTdCLFdBQVc2Qjt3QkFDWEMsTUFBTUEsUUFBUXBFLGtFQUFhQSxDQUFDb0M7b0JBQ2hDLElBQ0UrQixvQkFBb0I7d0JBQUVFLE9BQU90RDtvQkFBTTtnQkFDN0M7WUFDSjtZQUNBUCxPQUFPK0MsSUFBSSxDQUFDZCxhQUFhZSxPQUFPLENBQUMsU0FBVW5DLGNBQWM7Z0JBQ3JELElBQUlpQixZQUFZaEMsbUVBQXNCQSxDQUFDZTtnQkFDdkMsSUFBSWlELGFBQWE3QixXQUFXLENBQUNwQixlQUFlO2dCQUM1QyxJQUFJaUQsZUFBZSxLQUFLLEdBQ3BCO2dCQUNKLElBQUlWLFNBQVMsT0FBT0MsV0FBVyxhQUFhQSxTQUFVQSxNQUFNLENBQUN4QyxlQUFlLElBQUl3QyxNQUFNLENBQUN2QixVQUFVO2dCQUNqRyxJQUFJc0IsUUFBUTtvQkFDUixJQUFJVyxXQUFXWCxXQUFXbEQsY0FBY0gsU0FBVXFELE9BQU8xRCxvRUFBZUEsQ0FBQ29FLGFBQWE5RSwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHeUUsa0JBQWtCO3dCQUFFM0IsV0FBV0E7d0JBQVdqQixnQkFBZ0JBO3dCQUFnQm1ELFNBQVN6RCxNQUFNMEQsVUFBVSxDQUFDckMsUUFBUWY7b0JBQWdCO29CQUN4TyxJQUFJa0QsYUFBYTVELFlBQVk7d0JBQ3pCSSxNQUFNRCxLQUFLLENBQUM2QyxLQUFLLENBQUN2QixRQUFRZjtvQkFDOUIsT0FDSzt3QkFDRCxJQUFJa0QsYUFBYWhFLFFBQ2JnRSxXQUFXLEtBQUs7d0JBQ3BCLElBQUlBLGFBQWFELFlBQVk7NEJBQ3pCUixlQUFlLENBQUN6QyxlQUFlLEdBQUdrRDs0QkFDbENSLGdCQUFnQjs0QkFDaEJPLGFBQWFDOzRCQUNiLElBQUlHLFdBQVdDLE9BQU8sS0FBSyxPQUFPO2dDQUM5QixJQUFJQyxpQkFBaUIsU0FBVTVDLEdBQUc7b0NBQzlCLElBQUlqQixNQUFNc0IsTUFBTSxDQUFDTCxJQUFJVCxLQUFLLE1BQU1zRCxXQUFXO3dDQUN2Q0gsV0FBV0MsT0FBTyxLQUFLLFNBQVNoRixrRUFBU0EsQ0FBQ21GLElBQUksQ0FBQyxHQUFHOUM7d0NBQ2xELE9BQU87b0NBQ1g7Z0NBQ0o7Z0NBQ0EsSUFBSWpDLGdFQUFXQSxDQUFDd0UsV0FBVztvQ0FDdkJLLGVBQWVMO2dDQUNuQixPQUNLLElBQUlRLE1BQU1DLE9BQU8sQ0FBQ1QsV0FBVztvQ0FDOUIsMkVBQTJFO29DQUMzRSxJQUFJVSxnQkFBZ0I7b0NBQ3BCLElBQUlDLG1CQUFtQixLQUFLO29DQUM1QixJQUFLLElBQUlDLEtBQUssR0FBR0MsYUFBYWIsVUFBVVksS0FBS0MsV0FBV0MsTUFBTSxFQUFFRixLQUFNO3dDQUNsRSxJQUFJRyxRQUFRRixVQUFVLENBQUNELEdBQUc7d0NBQzFCLElBQUlwRixnRUFBV0EsQ0FBQ3VGLFFBQVE7NENBQ3BCTCxnQkFBZ0I7NENBQ2hCLElBQUlMLGVBQWVVLFFBQ2Y7d0NBQ1IsT0FDSzs0Q0FDRCwwRUFBMEU7NENBQzFFLDhEQUE4RDs0Q0FDOUQsSUFBSSxPQUFPQSxVQUFVLFlBQVksQ0FBQyxDQUFDQSxPQUFPO2dEQUN0QyxJQUFJeEQsS0FBS2YsTUFBTUYsUUFBUSxDQUFDa0IsUUFBUSxDQUFDdUQsTUFBTSxDQUFDLEVBQUU7Z0RBQzFDLG1HQUFtRztnREFDbkcsSUFBSXhELElBQUk7b0RBQ0pvRCxtQkFBbUJJO2dEQUN2Qjs0Q0FDSjt3Q0FDSjt3Q0FDQSxJQUFJTCxpQkFBaUJDLHFCQUFxQkwsV0FBVzs0Q0FDakRILFdBQVdDLE9BQU8sS0FBSyxTQUFTaEYsa0VBQVNBLENBQUNtRixJQUFJLENBQUMsR0FBR0k7NENBQ2xEO3dDQUNKO29DQUNKO2dDQUNKOzRCQUNKO3dCQUNKO29CQUNKO2dCQUNKO2dCQUNBLElBQUlaLGVBQWUsS0FBSyxHQUFHO29CQUN2Qk4sZUFBZTtnQkFDbkI7WUFDSjtZQUNBLElBQUlELGVBQWU7Z0JBQ2YsSUFBSSxDQUFDOUIsS0FBSyxDQUFDRyxRQUFRMEI7Z0JBQ25CLElBQUlFLGNBQWM7b0JBQ2QsSUFBSSxJQUFJLFlBQVlyQixPQUFPO3dCQUN2QixJQUFJLENBQUMzQixJQUFJLENBQUNvQixPQUFPLEdBQUcsS0FBSztvQkFDN0IsT0FDSzt3QkFDRCxPQUFPLElBQUksQ0FBQ3BCLElBQUksQ0FBQ29CLE9BQU87b0JBQzVCO29CQUNBLElBQUksQ0FBQ3RCLEtBQUssQ0FBQzZDLEtBQUssQ0FBQ3ZCLFFBQVE7Z0JBQzdCO2dCQUNBLE9BQU87WUFDWDtRQUNKO1FBQ0EsT0FBTztJQUNYO0lBQ0EsOERBQThEO0lBQzlELHdFQUF3RTtJQUN4RSxxRUFBcUU7SUFDckUscUVBQXFFO0lBQ3JFLCtFQUErRTtJQUMvRSxzRUFBc0U7SUFDdEV4QixZQUFZc0IsU0FBUyxDQUFDcUQsTUFBTSxHQUFHLFNBQVVuRCxNQUFNLEVBQUVFLFNBQVMsRUFBRWtELElBQUk7UUFDNUQsSUFBSUM7UUFDSixJQUFJaEQsY0FBYyxJQUFJLENBQUNKLE1BQU0sQ0FBQ0Q7UUFDOUIsSUFBSUssYUFBYTtZQUNiLElBQUlpRCxXQUFXLElBQUksQ0FBQ3ZFLGFBQWEsQ0FBQ3NCLGFBQWE7WUFDL0MsSUFBSXBCLGlCQUFpQmlCLGFBQWFrRCxPQUM5QixJQUFJLENBQUMzRSxRQUFRLENBQUM4RSxpQkFBaUIsQ0FBQztnQkFBRUQsVUFBVUE7Z0JBQVVwRCxXQUFXQTtnQkFBV2tELE1BQU1BO1lBQUssS0FDckZsRDtZQUNOLE9BQU8sSUFBSSxDQUFDc0IsTUFBTSxDQUFDeEIsUUFBUWYsaUJBQWtCb0UsQ0FBQUEsS0FBSyxDQUFDLEdBQy9DQSxFQUFFLENBQUNwRSxlQUFlLEdBQUdYLGFBQ3JCK0UsRUFBQyxJQUFLL0U7UUFDZDtRQUNBLE9BQU87SUFDWDtJQUNBRSxZQUFZc0IsU0FBUyxDQUFDMEQsS0FBSyxHQUFHLFNBQVVDLE9BQU8sRUFBRUMsS0FBSztRQUNsRCxJQUFJQyxVQUFVO1FBQ2QsSUFBSUYsUUFBUS9ELEVBQUUsRUFBRTtZQUNaLElBQUl6QiwrQ0FBTUEsQ0FBQ21DLElBQUksQ0FBQyxJQUFJLENBQUN4QixJQUFJLEVBQUU2RSxRQUFRL0QsRUFBRSxHQUFHO2dCQUNwQ2lFLFVBQVUsSUFBSSxDQUFDUixNQUFNLENBQUNNLFFBQVEvRCxFQUFFLEVBQUUrRCxRQUFRdkQsU0FBUyxFQUFFdUQsUUFBUUwsSUFBSTtZQUNyRTtZQUNBLElBQUksSUFBSSxZQUFZN0MsU0FBUyxJQUFJLEtBQUttRCxPQUFPO2dCQUN6Q0MsVUFBVSxJQUFJLENBQUNuRCxNQUFNLENBQUNnRCxLQUFLLENBQUNDLFNBQVNDLFVBQVVDO1lBQ25EO1lBQ0EsOERBQThEO1lBQzlELCtEQUErRDtZQUMvRCxpRUFBaUU7WUFDakUsNkRBQTZEO1lBQzdELElBQUlGLFFBQVF2RCxTQUFTLElBQUl5RCxTQUFTO2dCQUM5QixJQUFJLENBQUNqRixLQUFLLENBQUM2QyxLQUFLLENBQUNrQyxRQUFRL0QsRUFBRSxFQUFFK0QsUUFBUXZELFNBQVMsSUFBSTtZQUN0RDtRQUNKO1FBQ0EsT0FBT3lEO0lBQ1g7SUFDQW5GLFlBQVlzQixTQUFTLENBQUM4RCxLQUFLLEdBQUc7UUFDMUIsSUFBSSxDQUFDQyxPQUFPLENBQUM7SUFDakI7SUFDQXJGLFlBQVlzQixTQUFTLENBQUNnRSxPQUFPLEdBQUc7UUFDNUIsSUFBSW5GLFFBQVEsSUFBSTtRQUNoQixJQUFJb0YsTUFBTSxJQUFJLENBQUNoRSxRQUFRO1FBQ3ZCLElBQUlpRSxlQUFlLEVBQUU7UUFDckIsSUFBSSxDQUFDQyxZQUFZLEdBQUc3QyxPQUFPLENBQUMsU0FBVTFCLEVBQUU7WUFDcEMsSUFBSSxDQUFDekIsK0NBQU1BLENBQUNtQyxJQUFJLENBQUN6QixNQUFNRixRQUFRLENBQUM2QixpQkFBaUIsRUFBRVosS0FBSztnQkFDcERzRSxhQUFhRSxJQUFJLENBQUN4RTtZQUN0QjtRQUNKO1FBQ0EsSUFBSXNFLGFBQWFmLE1BQU0sRUFBRTtZQUNyQmMsSUFBSUksTUFBTSxHQUFHO2dCQUFFSCxjQUFjQSxhQUFhSSxJQUFJO1lBQUc7UUFDckQ7UUFDQSxPQUFPTDtJQUNYO0lBQ0F2RixZQUFZc0IsU0FBUyxDQUFDK0QsT0FBTyxHQUFHLFNBQVVRLE9BQU87UUFDN0MsSUFBSTFGLFFBQVEsSUFBSTtRQUNoQlAsT0FBTytDLElBQUksQ0FBQyxJQUFJLENBQUN2QyxJQUFJLEVBQUV3QyxPQUFPLENBQUMsU0FBVXBCLE1BQU07WUFDM0MsSUFBSSxDQUFFcUUsQ0FBQUEsV0FBV3BHLCtDQUFNQSxDQUFDbUMsSUFBSSxDQUFDaUUsU0FBU3JFLE9BQU0sR0FBSTtnQkFDNUNyQixNQUFNd0UsTUFBTSxDQUFDbkQ7WUFDakI7UUFDSjtRQUNBLElBQUlxRSxTQUFTO1lBQ1QsSUFBSUYsU0FBU0UsUUFBUUYsTUFBTSxFQUFFRyxTQUFTaEgsNkNBQU1BLENBQUMrRyxTQUFTO2dCQUFDO2FBQVM7WUFDaEVqRyxPQUFPK0MsSUFBSSxDQUFDbUQsUUFBUWxELE9BQU8sQ0FBQyxTQUFVcEIsTUFBTTtnQkFDeENyQixNQUFNa0IsS0FBSyxDQUFDRyxRQUFRc0UsTUFBTSxDQUFDdEUsT0FBTztZQUN0QztZQUNBLElBQUltRSxRQUFRO2dCQUNSQSxPQUFPSCxZQUFZLENBQUM1QyxPQUFPLENBQUMsSUFBSSxDQUFDbUQsTUFBTSxFQUFFLElBQUk7WUFDakQ7UUFDSjtJQUNKO0lBQ0EvRixZQUFZc0IsU0FBUyxDQUFDeUUsTUFBTSxHQUFHLFNBQVVDLE1BQU07UUFDM0MsT0FBUSxJQUFJLENBQUMzRixPQUFPLENBQUMyRixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMzRixPQUFPLENBQUMyRixPQUFPLElBQUksS0FBSztJQUNqRTtJQUNBaEcsWUFBWXNCLFNBQVMsQ0FBQzJFLE9BQU8sR0FBRyxTQUFVRCxNQUFNO1FBQzVDLElBQUksSUFBSSxDQUFDM0YsT0FBTyxDQUFDMkYsT0FBTyxHQUFHLEdBQUc7WUFDMUIsSUFBSUUsUUFBUSxFQUFFLElBQUksQ0FBQzdGLE9BQU8sQ0FBQzJGLE9BQU87WUFDbEMsSUFBSSxDQUFDRSxPQUNELE9BQU8sSUFBSSxDQUFDN0YsT0FBTyxDQUFDMkYsT0FBTztZQUMvQixPQUFPRTtRQUNYO1FBQ0EsT0FBTztJQUNYO0lBQ0Esd0VBQXdFO0lBQ3hFLHFEQUFxRDtJQUNyRGxHLFlBQVlzQixTQUFTLENBQUNtRSxZQUFZLEdBQUcsU0FBVVUsR0FBRztRQUM5QyxJQUFJQSxRQUFRLEtBQUssR0FBRztZQUFFQSxNQUFNLElBQUlDO1FBQU87UUFDdkN4RyxPQUFPK0MsSUFBSSxDQUFDLElBQUksQ0FBQ3RDLE9BQU8sRUFBRXVDLE9BQU8sQ0FBQ3VELElBQUlFLEdBQUcsRUFBRUY7UUFDM0MsSUFBSSxJQUFJLFlBQVlwRSxPQUFPO1lBQ3ZCLElBQUksQ0FBQ0MsTUFBTSxDQUFDeUQsWUFBWSxDQUFDVTtRQUM3QixPQUNLO1lBQ0QsK0RBQStEO1lBQy9ELGdFQUFnRTtZQUNoRSwyQ0FBMkM7WUFDM0N2RyxPQUFPK0MsSUFBSSxDQUFDLElBQUksQ0FBQzFDLFFBQVEsQ0FBQzZCLGlCQUFpQixFQUFFYyxPQUFPLENBQUN1RCxJQUFJRSxHQUFHLEVBQUVGO1FBQ2xFO1FBQ0EsT0FBT0E7SUFDWDtJQUNBLDZFQUE2RTtJQUM3RSwwRUFBMEU7SUFDMUUsMkVBQTJFO0lBQzNFLG1EQUFtRDtJQUNuRG5HLFlBQVlzQixTQUFTLENBQUNnRixFQUFFLEdBQUc7UUFDdkIsSUFBSW5HLFFBQVEsSUFBSTtRQUNoQixJQUFJZ0csTUFBTSxJQUFJLENBQUNWLFlBQVk7UUFDM0IsSUFBSWMsV0FBVyxJQUFJLENBQUNoRixRQUFRO1FBQzVCNEUsSUFBSXZELE9BQU8sQ0FBQyxTQUFVMUIsRUFBRTtZQUNwQixJQUFJekIsK0NBQU1BLENBQUNtQyxJQUFJLENBQUMyRSxVQUFVckYsS0FBSztnQkFDM0IsdUVBQXVFO2dCQUN2RSx1RUFBdUU7Z0JBQ3ZFLDRDQUE0QztnQkFDNUN0QixPQUFPK0MsSUFBSSxDQUFDeEMsTUFBTXFHLGVBQWUsQ0FBQ3RGLEtBQUswQixPQUFPLENBQUN1RCxJQUFJRSxHQUFHLEVBQUVGO2dCQUN4RCxzRUFBc0U7Z0JBQ3RFLG1EQUFtRDtnQkFDbkQsT0FBT0ksUUFBUSxDQUFDckYsR0FBRztZQUN2QjtRQUNKO1FBQ0EsSUFBSXVGLGNBQWM3RyxPQUFPK0MsSUFBSSxDQUFDNEQ7UUFDOUIsSUFBSUUsWUFBWWhDLE1BQU0sRUFBRTtZQUNwQixJQUFJaUMsU0FBUyxJQUFJO1lBQ2pCLE1BQU9BLGtCQUFrQjNFLE1BQ3JCMkUsU0FBU0EsT0FBTzFFLE1BQU07WUFDMUJ5RSxZQUFZN0QsT0FBTyxDQUFDLFNBQVUxQixFQUFFO2dCQUFJLE9BQU93RixPQUFPL0IsTUFBTSxDQUFDekQ7WUFBSztRQUNsRTtRQUNBLE9BQU91RjtJQUNYO0lBQ0F6RyxZQUFZc0IsU0FBUyxDQUFDa0YsZUFBZSxHQUFHLFNBQVVoRixNQUFNO1FBQ3BELElBQUksQ0FBQy9CLCtDQUFNQSxDQUFDbUMsSUFBSSxDQUFDLElBQUksQ0FBQ3RCLElBQUksRUFBRWtCLFNBQVM7WUFDakMsSUFBSW1GLFVBQVcsSUFBSSxDQUFDckcsSUFBSSxDQUFDa0IsT0FBTyxHQUFHNUIsT0FBT0MsTUFBTSxDQUFDO1lBQ2pELElBQUkrRyxPQUFPLElBQUksQ0FBQ3hHLElBQUksQ0FBQ29CLE9BQU87WUFDNUIsSUFBSSxDQUFDb0YsTUFDRCxPQUFPRDtZQUNYLElBQUlFLFlBQVksSUFBSVQsSUFBSTtnQkFBQ1E7YUFBSztZQUM5QixxRUFBcUU7WUFDckUsa0VBQWtFO1lBQ2xFQyxVQUFVakUsT0FBTyxDQUFDLFNBQVUyQyxHQUFHO2dCQUMzQixJQUFJcEcsZ0VBQVdBLENBQUNvRyxNQUFNO29CQUNsQm9CLE9BQU8sQ0FBQ3BCLElBQUk1RSxLQUFLLENBQUMsR0FBRztnQkFDckIscUVBQXFFO2dCQUNyRSxxRUFBcUU7Z0JBQ3JFLCtEQUErRDtnQkFDL0QsZ0VBQWdFO2dCQUNoRSxpRUFBaUU7Z0JBQ2pFLHNFQUFzRTtnQkFDdEUsb0VBQW9FO2dCQUN4RTtnQkFDQSxJQUFJbkIsb0VBQWVBLENBQUMrRixNQUFNO29CQUN0QjNGLE9BQU8rQyxJQUFJLENBQUM0QyxLQUFLM0MsT0FBTyxDQUFDLFNBQVVrRSxHQUFHO3dCQUNsQyxJQUFJQyxRQUFReEIsR0FBRyxDQUFDdUIsSUFBSTt3QkFDcEIsb0VBQW9FO3dCQUNwRSw2QkFBNkI7d0JBQzdCLElBQUl0SCxvRUFBZUEsQ0FBQ3VILFFBQVE7NEJBQ3hCRixVQUFVUixHQUFHLENBQUNVO3dCQUNsQjtvQkFDSjtnQkFDSjtZQUNKO1FBQ0o7UUFDQSxPQUFPLElBQUksQ0FBQ3pHLElBQUksQ0FBQ2tCLE9BQU87SUFDNUI7SUFDQXhCLFlBQVlzQixTQUFTLENBQUMwRixZQUFZLEdBQUc7UUFDakMsT0FBTyxJQUFJLENBQUM5RyxLQUFLLENBQUMrRyxRQUFRLENBQUNDLFdBQVcsQ0FBQ0M7SUFDM0M7SUFDQSxPQUFPbkg7QUFDWDtBQUN1QjtBQUN2QiwyRUFBMkU7QUFDM0UsMkVBQTJFO0FBQzNFLDBFQUEwRTtBQUMxRSwwRUFBMEU7QUFDMUUseUVBQXlFO0FBQ3pFLHdFQUF3RTtBQUN4RSw0RUFBNEU7QUFDNUUsMkVBQTJFO0FBQzNFLHlFQUF5RTtBQUN6RSwwRUFBMEU7QUFDMUUsMEVBQTBFO0FBQzFFLDJFQUEyRTtBQUMzRSw0REFBNEQ7QUFDNUQsSUFBSW9ILGFBQWEsV0FBVyxHQUFJO0lBQzVCLFNBQVNBLFdBQVc1RSxPQUFPLEVBQUVSLE1BQU07UUFDL0IsSUFBSUEsV0FBVyxLQUFLLEdBQUc7WUFBRUEsU0FBUztRQUFNO1FBQ3hDLElBQUksQ0FBQ1EsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ1IsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ3FGLENBQUMsR0FBRztRQUNULElBQUksQ0FBQ0MsWUFBWTtJQUNyQjtJQUNBRixXQUFXOUYsU0FBUyxDQUFDZ0csWUFBWSxHQUFHO1FBQ2hDLElBQUksQ0FBQ0QsQ0FBQyxHQUFHLElBQUksQ0FBQzdFLE9BQU8sR0FBR3hELDZDQUFHQSxLQUFLO1FBQ2hDLElBQUksQ0FBQ2lJLFFBQVEsR0FBRyxJQUFJL0gsMkNBQUlBLENBQUNLLCtEQUFhQTtJQUMxQztJQUNBNkgsV0FBVzlGLFNBQVMsQ0FBQ0ssTUFBTSxHQUFHLFNBQVVILE1BQU0sRUFBRWYsY0FBYztRQUMxRCxJQUFJLElBQUksQ0FBQzRHLENBQUMsRUFBRTtZQUNSLElBQUksQ0FBQ0EsQ0FBQyxDQUFDRSxXQUFXL0YsUUFBUWY7WUFDMUIsSUFBSWlCLFlBQVloQyxtRUFBc0JBLENBQUNlO1lBQ3ZDLElBQUlpQixjQUFjakIsZ0JBQWdCO2dCQUM5QiwwREFBMEQ7Z0JBQzFELGlFQUFpRTtnQkFDakUsNkRBQTZEO2dCQUM3RCxnRUFBZ0U7Z0JBQ2hFLHdCQUF3QjtnQkFDeEIsSUFBSSxDQUFDNEcsQ0FBQyxDQUFDRSxXQUFXL0YsUUFBUUU7WUFDOUI7WUFDQSxJQUFJLElBQUksQ0FBQ00sTUFBTSxFQUFFO2dCQUNiLElBQUksQ0FBQ0EsTUFBTSxDQUFDTCxNQUFNLENBQUNILFFBQVFmO1lBQy9CO1FBQ0o7SUFDSjtJQUNBMkcsV0FBVzlGLFNBQVMsQ0FBQ3lCLEtBQUssR0FBRyxTQUFVdkIsTUFBTSxFQUFFZixjQUFjO1FBQ3pELElBQUksSUFBSSxDQUFDNEcsQ0FBQyxFQUFFO1lBQ1IsSUFBSSxDQUFDQSxDQUFDLENBQUN0RSxLQUFLLENBQUN3RSxXQUFXL0YsUUFBUWYsaUJBQ2hDLHVFQUF1RTtZQUN2RSxzRUFBc0U7WUFDdEUsc0VBQXNFO1lBQ3RFLHFFQUFxRTtZQUNyRSx1RUFBdUU7WUFDdkUsd0VBQXdFO1lBQ3hFLDZEQUE2RDtZQUM3REEsbUJBQW1CLGFBQWEsV0FBVztRQUMvQztJQUNKO0lBQ0EsT0FBTzJHO0FBQ1g7QUFDQSxTQUFTRyxXQUFXL0YsTUFBTSxFQUFFZixjQUFjO0lBQ3RDLG9FQUFvRTtJQUNwRSx1RUFBdUU7SUFDdkUsb0RBQW9EO0lBQ3BELE9BQU9BLGlCQUFpQixNQUFNZTtBQUNsQztBQUNPLFNBQVNnRywrQkFBK0IvRCxLQUFLLEVBQUVnRSxRQUFRO0lBQzFELElBQUlDLHNCQUFzQmpFLFFBQVE7UUFDOUIseUVBQXlFO1FBQ3pFLHdFQUF3RTtRQUN4RSwwRUFBMEU7UUFDMUUseUVBQXlFO1FBQ3pFLDRFQUE0RTtRQUM1RSw0RUFBNEU7UUFDNUUsNEVBQTRFO1FBQzVFLCtDQUErQztRQUMvQ0EsTUFBTXZELEtBQUssQ0FBQ3lCLE1BQU0sQ0FBQzhGLFVBQVU7SUFDakM7QUFDSjtBQUNDLFVBQVV6SCxXQUFXO0lBQ2xCLGtFQUFrRTtJQUNsRSxJQUFJMkgsT0FBTyxXQUFXLEdBQUksU0FBVUMsTUFBTTtRQUN0Qy9JLGdEQUFTQSxDQUFDOEksTUFBTUM7UUFDaEIsU0FBU0QsS0FBSzlDLEVBQUU7WUFDWixJQUFJNUUsV0FBVzRFLEdBQUc1RSxRQUFRLEVBQUU0SCxLQUFLaEQsR0FBR2lELGFBQWEsRUFBRUEsZ0JBQWdCRCxPQUFPLEtBQUssSUFBSSxPQUFPQSxJQUFJRSxPQUFPbEQsR0FBR2tELElBQUk7WUFDNUcsSUFBSTVILFFBQVF5SCxPQUFPaEcsSUFBSSxDQUFDLElBQUksRUFBRTNCLFVBQVUsSUFBSW1ILFdBQVdVLG1CQUFtQixJQUFJO1lBQzlFM0gsTUFBTTZILEtBQUssR0FBRyxJQUFJQyxNQUFNOUg7WUFDeEJBLE1BQU0rSCxXQUFXLEdBQUcsSUFBSWhKLDJDQUFJQSxDQUFDSywrREFBYUE7WUFDMUMsSUFBSXdJLE1BQ0E1SCxNQUFNa0YsT0FBTyxDQUFDMEM7WUFDbEIsT0FBTzVIO1FBQ1g7UUFDQXdILEtBQUtyRyxTQUFTLENBQUM2RyxRQUFRLEdBQUcsU0FBVUMsT0FBTyxFQUFFQyxNQUFNO1lBQy9DLHdFQUF3RTtZQUN4RSxzRUFBc0U7WUFDdEUsc0NBQXNDO1lBQ3RDLE9BQU8sSUFBSSxDQUFDTCxLQUFLLENBQUNHLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDeEM7UUFDQVYsS0FBS3JHLFNBQVMsQ0FBQ2dILFdBQVcsR0FBRztZQUN6QiwrQkFBK0I7WUFDL0IsT0FBTyxJQUFJO1FBQ2Y7UUFDQVgsS0FBS3JHLFNBQVMsQ0FBQ3VDLFVBQVUsR0FBRztZQUN4QixPQUFPLElBQUksQ0FBQ3FFLFdBQVcsQ0FBQ2hCLFdBQVcsQ0FBQ0M7UUFDeEM7UUFDQSxPQUFPUTtJQUNYLEVBQUUzSDtJQUNGQSxZQUFZMkgsSUFBSSxHQUFHQTtBQUN2QixHQUFHM0gsZUFBZ0JBLENBQUFBLGNBQWMsQ0FBQztBQUNsQyw2RUFBNkU7QUFDN0UsaUNBQWlDO0FBQ2pDLElBQUkrQixRQUFRLFdBQVcsR0FBSSxTQUFVNkYsTUFBTTtJQUN2Qy9JLGdEQUFTQSxDQUFDa0QsT0FBTzZGO0lBQ2pCLFNBQVM3RixNQUFNYixFQUFFLEVBQUVjLE1BQU0sRUFBRXFHLE1BQU0sRUFBRW5JLEtBQUs7UUFDcEMsSUFBSUMsUUFBUXlILE9BQU9oRyxJQUFJLENBQUMsSUFBSSxFQUFFSSxPQUFPL0IsUUFBUSxFQUFFQyxVQUFVLElBQUk7UUFDN0RDLE1BQU1lLEVBQUUsR0FBR0E7UUFDWGYsTUFBTTZCLE1BQU0sR0FBR0E7UUFDZjdCLE1BQU1rSSxNQUFNLEdBQUdBO1FBQ2ZsSSxNQUFNRCxLQUFLLEdBQUdBO1FBQ2RtSSxPQUFPbEk7UUFDUCxPQUFPQTtJQUNYO0lBQ0E0QixNQUFNVCxTQUFTLENBQUM2RyxRQUFRLEdBQUcsU0FBVUMsT0FBTyxFQUFFQyxNQUFNO1FBQ2hELE9BQU8sSUFBSXRHLE1BQU1xRyxTQUFTLElBQUksRUFBRUMsUUFBUSxJQUFJLENBQUNuSSxLQUFLO0lBQ3REO0lBQ0E2QixNQUFNVCxTQUFTLENBQUNnSCxXQUFXLEdBQUcsU0FBVUYsT0FBTztRQUMzQyxJQUFJakksUUFBUSxJQUFJO1FBQ2hCLGdFQUFnRTtRQUNoRSxJQUFJNkIsU0FBUyxJQUFJLENBQUNBLE1BQU0sQ0FBQ3NHLFdBQVcsQ0FBQ0Y7UUFDckMsSUFBSUEsWUFBWSxJQUFJLENBQUNsSCxFQUFFLEVBQUU7WUFDckIsSUFBSSxJQUFJLENBQUNoQixLQUFLLENBQUNzQyxPQUFPLEVBQUU7Z0JBQ3BCLHVFQUF1RTtnQkFDdkUsdUVBQXVFO2dCQUN2RSx1RUFBdUU7Z0JBQ3ZFLDZDQUE2QztnQkFDN0M1QyxPQUFPK0MsSUFBSSxDQUFDLElBQUksQ0FBQ3ZDLElBQUksRUFBRXdDLE9BQU8sQ0FBQyxTQUFVcEIsTUFBTTtvQkFDM0MsSUFBSStHLGlCQUFpQnBJLE1BQU1DLElBQUksQ0FBQ29CLE9BQU87b0JBQ3ZDLElBQUlnSCxvQkFBb0J4RyxNQUFNLENBQUMsU0FBUyxDQUFDUjtvQkFDekMsSUFBSSxDQUFDZ0gsbUJBQW1CO3dCQUNwQixpRUFBaUU7d0JBQ2pFLGtFQUFrRTt3QkFDbEUsK0RBQStEO3dCQUMvRCxvRUFBb0U7d0JBQ3BFLHNCQUFzQjt3QkFDdEJySSxNQUFNd0UsTUFBTSxDQUFDbkQ7b0JBQ2pCLE9BQ0ssSUFBSSxDQUFDK0csZ0JBQWdCO3dCQUN0QixpRUFBaUU7d0JBQ2pFLGdFQUFnRTt3QkFDaEUsa0VBQWtFO3dCQUNsRSw2Q0FBNkM7d0JBQzdDcEksTUFBTUQsS0FBSyxDQUFDNkMsS0FBSyxDQUFDdkIsUUFBUTt3QkFDMUI1QixPQUFPK0MsSUFBSSxDQUFDNkYsbUJBQW1CNUYsT0FBTyxDQUFDLFNBQVVuQyxjQUFjOzRCQUMzRE4sTUFBTUQsS0FBSyxDQUFDNkMsS0FBSyxDQUFDdkIsUUFBUWY7d0JBQzlCO29CQUNKLE9BQ0ssSUFBSThILG1CQUFtQkMsbUJBQW1CO3dCQUMzQyxrRUFBa0U7d0JBQ2xFLGdFQUFnRTt3QkFDaEUsV0FBVzt3QkFDWDVJLE9BQU8rQyxJQUFJLENBQUM0RixnQkFBZ0IzRixPQUFPLENBQUMsU0FBVW5DLGNBQWM7NEJBQ3hELElBQUksQ0FBQ3hCLG9EQUFLQSxDQUFDc0osY0FBYyxDQUFDOUgsZUFBZSxFQUFFK0gsaUJBQWlCLENBQUMvSCxlQUFlLEdBQUc7Z0NBQzNFTixNQUFNRCxLQUFLLENBQUM2QyxLQUFLLENBQUN2QixRQUFRZjs0QkFDOUI7d0JBQ0o7b0JBQ0o7Z0JBQ0o7WUFDSjtZQUNBLE9BQU91QjtRQUNYO1FBQ0Esa0VBQWtFO1FBQ2xFLElBQUlBLFdBQVcsSUFBSSxDQUFDQSxNQUFNLEVBQ3RCLE9BQU8sSUFBSTtRQUNmLGdEQUFnRDtRQUNoRCxPQUFPQSxPQUFPbUcsUUFBUSxDQUFDLElBQUksQ0FBQ2pILEVBQUUsRUFBRSxJQUFJLENBQUNtSCxNQUFNO0lBQy9DO0lBQ0F0RyxNQUFNVCxTQUFTLENBQUNDLFFBQVEsR0FBRztRQUN2QixPQUFPM0MsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNvRCxNQUFNLENBQUNULFFBQVEsS0FBSyxJQUFJLENBQUNuQixJQUFJO0lBQ25FO0lBQ0EyQixNQUFNVCxTQUFTLENBQUNrRixlQUFlLEdBQUcsU0FBVWhGLE1BQU07UUFDOUMsSUFBSWlILGFBQWEsSUFBSSxDQUFDekcsTUFBTSxDQUFDd0UsZUFBZSxDQUFDaEY7UUFDN0MsT0FBTy9CLCtDQUFNQSxDQUFDbUMsSUFBSSxDQUFDLElBQUksQ0FBQ3hCLElBQUksRUFBRW9CLFVBQVU1QywrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHNkosYUFBYWIsT0FBT3RHLFNBQVMsQ0FBQ2tGLGVBQWUsQ0FBQzVFLElBQUksQ0FBQyxJQUFJLEVBQUVKLFdBQVdpSDtJQUN0STtJQUNBMUcsTUFBTVQsU0FBUyxDQUFDdUMsVUFBVSxHQUFHO1FBQ3pCLElBQUk2RSxJQUFJLElBQUksQ0FBQzFHLE1BQU07UUFDbkIsTUFBTzBHLEVBQUUxRyxNQUFNLENBQ1gwRyxJQUFJQSxFQUFFMUcsTUFBTTtRQUNoQixPQUFPMEcsRUFBRTdFLFVBQVUsQ0FBQzhFLEtBQUssQ0FBQ0QsR0FDMUIsbUJBQW1CO1FBQ25CdkI7SUFDSjtJQUNBLE9BQU9wRjtBQUNYLEVBQUUvQjtBQUNGLDZFQUE2RTtBQUM3RSw2RUFBNkU7QUFDN0UsK0VBQStFO0FBQy9FLGdFQUFnRTtBQUNoRSxJQUFJaUksUUFBUSxXQUFXLEdBQUksU0FBVUwsTUFBTTtJQUN2Qy9JLGdEQUFTQSxDQUFDb0osT0FBT0w7SUFDakIsU0FBU0ssTUFBTXJCLElBQUk7UUFDZixPQUFPZ0IsT0FBT2hHLElBQUksQ0FBQyxJQUFJLEVBQUUscUJBQXFCZ0YsTUFBTSxZQUFjLEdBQUcsSUFBSVEsV0FBV1IsS0FBSzFHLEtBQUssQ0FBQ3NDLE9BQU8sRUFBRW9FLEtBQUsxRyxLQUFLLE1BQU0sSUFBSTtJQUNoSTtJQUNBK0gsTUFBTTNHLFNBQVMsQ0FBQ2dILFdBQVcsR0FBRztRQUMxQixnQ0FBZ0M7UUFDaEMsT0FBTyxJQUFJO0lBQ2Y7SUFDQUwsTUFBTTNHLFNBQVMsQ0FBQ0QsS0FBSyxHQUFHLFNBQVVhLEtBQUssRUFBRUMsS0FBSztRQUMxQywwRUFBMEU7UUFDMUUsc0VBQXNFO1FBQ3RFLHNFQUFzRTtRQUN0RSx1RUFBdUU7UUFDdkUsMkJBQTJCO1FBQzNCLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNYLEtBQUssQ0FBQ2EsT0FBT0M7SUFDcEM7SUFDQSxPQUFPOEY7QUFDWCxFQUFFbEc7QUFDRixTQUFTUSxzQkFBc0JxRyxjQUFjLEVBQUVDLGNBQWMsRUFBRUMsUUFBUTtJQUNuRSxJQUFJQyxnQkFBZ0JILGNBQWMsQ0FBQ0UsU0FBUztJQUM1QyxJQUFJRSxnQkFBZ0JILGNBQWMsQ0FBQ0MsU0FBUztJQUM1Qyx1RUFBdUU7SUFDdkUscUVBQXFFO0lBQ3JFLGlFQUFpRTtJQUNqRSxvRUFBb0U7SUFDcEUsZ0VBQWdFO0lBQ2hFLE9BQU83SixvREFBS0EsQ0FBQzhKLGVBQWVDLGlCQUFpQkQsZ0JBQWdCQztBQUNqRTtBQUNPLFNBQVN0QixzQkFBc0JqRSxLQUFLO0lBQ3ZDLDhEQUE4RDtJQUM5RCxPQUFPLENBQUMsQ0FBRUEsQ0FBQUEsaUJBQWlCekQsZUFBZXlELE1BQU12RCxLQUFLLENBQUNzQyxPQUFPO0FBQ2pFLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2NhY2hlL2lubWVtb3J5L2VudGl0eVN0b3JlLmpzPzUwOGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcywgX19yZXN0IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGRlcCB9IGZyb20gXCJvcHRpbWlzbVwiO1xuaW1wb3J0IHsgZXF1YWwgfSBmcm9tIFwiQHdyeS9lcXVhbGl0eVwiO1xuaW1wb3J0IHsgVHJpZSB9IGZyb20gXCJAd3J5L3RyaWVcIjtcbmltcG9ydCB7IGlzUmVmZXJlbmNlLCBtYWtlUmVmZXJlbmNlLCBEZWVwTWVyZ2VyLCBtYXliZURlZXBGcmVlemUsIGNhblVzZVdlYWtNYXAsIGlzTm9uTnVsbE9iamVjdCwgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBoYXNPd24sIGZpZWxkTmFtZUZyb21TdG9yZU5hbWUgfSBmcm9tIFwiLi9oZWxwZXJzLmpzXCI7XG52YXIgREVMRVRFID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBkZWxNb2RpZmllciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIERFTEVURTsgfTtcbnZhciBJTlZBTElEQVRFID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBFbnRpdHlTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbnRpdHlTdG9yZShwb2xpY2llcywgZ3JvdXApIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5wb2xpY2llcyA9IHBvbGljaWVzO1xuICAgICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuZGF0YSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIC8vIE1hcHMgcm9vdCBlbnRpdHkgSURzIHRvIHRoZSBudW1iZXIgb2YgdGltZXMgdGhleSBoYXZlIGJlZW4gcmV0YWluZWQsIG1pbnVzXG4gICAgICAgIC8vIHRoZSBudW1iZXIgb2YgdGltZXMgdGhleSBoYXZlIGJlZW4gcmVsZWFzZWQuIFJldGFpbmVkIGVudGl0aWVzIGtlZXAgb3RoZXJcbiAgICAgICAgLy8gZW50aXRpZXMgdGhleSByZWZlcmVuY2UgKGV2ZW4gaW5kaXJlY3RseSkgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZC5cbiAgICAgICAgdGhpcy5yb290SWRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgLy8gTGF6aWx5IHRyYWNrcyB7IF9fcmVmOiA8ZGF0YUlkPiB9IHN0cmluZ3MgY29udGFpbmVkIGJ5IHRoaXMuZGF0YVtkYXRhSWRdLlxuICAgICAgICB0aGlzLnJlZnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAvLyBCb3VuZCBmdW5jdGlvbiB0aGF0IGNhbiBiZSBwYXNzZWQgYXJvdW5kIHRvIHByb3ZpZGUgZWFzeSBhY2Nlc3MgdG8gZmllbGRzXG4gICAgICAgIC8vIG9mIFJlZmVyZW5jZSBvYmplY3RzIGFzIHdlbGwgYXMgb3JkaW5hcnkgb2JqZWN0cy5cbiAgICAgICAgdGhpcy5nZXRGaWVsZFZhbHVlID0gZnVuY3Rpb24gKG9iamVjdE9yUmVmZXJlbmNlLCBzdG9yZUZpZWxkTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1heWJlRGVlcEZyZWV6ZShpc1JlZmVyZW5jZShvYmplY3RPclJlZmVyZW5jZSkgP1xuICAgICAgICAgICAgICAgIF90aGlzLmdldChvYmplY3RPclJlZmVyZW5jZS5fX3JlZiwgc3RvcmVGaWVsZE5hbWUpXG4gICAgICAgICAgICAgICAgOiBvYmplY3RPclJlZmVyZW5jZSAmJiBvYmplY3RPclJlZmVyZW5jZVtzdG9yZUZpZWxkTmFtZV0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBSZXR1cm5zIHRydWUgZm9yIG5vbi1ub3JtYWxpemVkIFN0b3JlT2JqZWN0cyBhbmQgbm9uLWRhbmdsaW5nXG4gICAgICAgIC8vIFJlZmVyZW5jZXMsIGluZGljYXRpbmcgdGhhdCByZWFkRmllbGQobmFtZSwgb2JqT3JSZWYpIGhhcyBhIGNoYW5jZSBvZlxuICAgICAgICAvLyB3b3JraW5nLiBVc2VmdWwgZm9yIGZpbHRlcmluZyBvdXQgZGFuZ2xpbmcgcmVmZXJlbmNlcyBmcm9tIGxpc3RzLlxuICAgICAgICB0aGlzLmNhblJlYWQgPSBmdW5jdGlvbiAob2JqT3JSZWYpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1JlZmVyZW5jZShvYmpPclJlZikgP1xuICAgICAgICAgICAgICAgIF90aGlzLmhhcyhvYmpPclJlZi5fX3JlZilcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBvYmpPclJlZiA9PT0gXCJvYmplY3RcIjtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQm91bmQgZnVuY3Rpb24gdGhhdCBjb252ZXJ0cyBhbiBpZCBvciBhbiBvYmplY3Qgd2l0aCBhIF9fdHlwZW5hbWUgYW5kXG4gICAgICAgIC8vIHByaW1hcnkga2V5IGZpZWxkcyB0byBhIFJlZmVyZW5jZSBvYmplY3QuIElmIGNhbGxlZCB3aXRoIGEgUmVmZXJlbmNlIG9iamVjdCxcbiAgICAgICAgLy8gdGhhdCBzYW1lIFJlZmVyZW5jZSBvYmplY3QgaXMgcmV0dXJuZWQuIFBhc3MgdHJ1ZSBmb3IgbWVyZ2VJbnRvU3RvcmUgdG8gcGVyc2lzdFxuICAgICAgICAvLyBhbiBvYmplY3QgaW50byB0aGUgc3RvcmUuXG4gICAgICAgIHRoaXMudG9SZWZlcmVuY2UgPSBmdW5jdGlvbiAob2JqT3JJZE9yUmVmLCBtZXJnZUludG9TdG9yZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpPcklkT3JSZWYgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVJlZmVyZW5jZShvYmpPcklkT3JSZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUmVmZXJlbmNlKG9iak9ySWRPclJlZikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqT3JJZE9yUmVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGlkID0gX3RoaXMucG9saWNpZXMuaWRlbnRpZnkob2JqT3JJZE9yUmVmKVswXTtcbiAgICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSBtYWtlUmVmZXJlbmNlKGlkKTtcbiAgICAgICAgICAgICAgICBpZiAobWVyZ2VJbnRvU3RvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubWVyZ2UoaWQsIG9iak9ySWRPclJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEFsdGhvdWdoIHRoZSBFbnRpdHlTdG9yZSBjbGFzcyBpcyBhYnN0cmFjdCwgaXQgY29udGFpbnMgY29uY3JldGVcbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIHZhcmlvdXMgTm9ybWFsaXplZENhY2hlIGludGVyZmFjZSBtZXRob2RzIHRoYXRcbiAgICAvLyBhcmUgaW5oZXJpdGVkIGJ5IHRoZSBSb290IGFuZCBMYXllciBzdWJjbGFzc2VzLlxuICAgIEVudGl0eVN0b3JlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCB0aGlzLmRhdGEpO1xuICAgIH07XG4gICAgRW50aXR5U3RvcmUucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChkYXRhSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9va3VwKGRhdGFJZCwgdHJ1ZSkgIT09IHZvaWQgMDtcbiAgICB9O1xuICAgIEVudGl0eVN0b3JlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoZGF0YUlkLCBmaWVsZE5hbWUpIHtcbiAgICAgICAgdGhpcy5ncm91cC5kZXBlbmQoZGF0YUlkLCBmaWVsZE5hbWUpO1xuICAgICAgICBpZiAoaGFzT3duLmNhbGwodGhpcy5kYXRhLCBkYXRhSWQpKSB7XG4gICAgICAgICAgICB2YXIgc3RvcmVPYmplY3QgPSB0aGlzLmRhdGFbZGF0YUlkXTtcbiAgICAgICAgICAgIGlmIChzdG9yZU9iamVjdCAmJiBoYXNPd24uY2FsbChzdG9yZU9iamVjdCwgZmllbGROYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZU9iamVjdFtmaWVsZE5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZE5hbWUgPT09IFwiX190eXBlbmFtZVwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLnBvbGljaWVzLnJvb3RUeXBlbmFtZXNCeUlkLCBkYXRhSWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb2xpY2llcy5yb290VHlwZW5hbWVzQnlJZFtkYXRhSWRdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgTGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXQoZGF0YUlkLCBmaWVsZE5hbWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFbnRpdHlTdG9yZS5wcm90b3R5cGUubG9va3VwID0gZnVuY3Rpb24gKGRhdGFJZCwgZGVwZW5kT25FeGlzdGVuY2UpIHtcbiAgICAgICAgLy8gVGhlIGhhcyBtZXRob2QgKGFib3ZlKSBjYWxscyBsb29rdXAgd2l0aCBkZXBlbmRPbkV4aXN0ZW5jZSA9IHRydWUsIHNvXG4gICAgICAgIC8vIHRoYXQgaXQgY2FuIGxhdGVyIGJlIGludmFsaWRhdGVkIHdoZW4gd2UgYWRkIG9yIHJlbW92ZSBhIFN0b3JlT2JqZWN0IGZvclxuICAgICAgICAvLyB0aGlzIGRhdGFJZC4gQW55IGNvbnN1bWVyIHdobyBjYXJlcyBhYm91dCB0aGUgY29udGVudHMgb2YgdGhlIFN0b3JlT2JqZWN0XG4gICAgICAgIC8vIHNob3VsZCBub3QgcmVseSBvbiB0aGlzIGRlcGVuZGVuY3ksIHNpbmNlIHRoZSBjb250ZW50cyBjb3VsZCBjaGFuZ2VcbiAgICAgICAgLy8gd2l0aG91dCB0aGUgb2JqZWN0IGJlaW5nIGFkZGVkIG9yIHJlbW92ZWQuXG4gICAgICAgIGlmIChkZXBlbmRPbkV4aXN0ZW5jZSlcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuZGVwZW5kKGRhdGFJZCwgXCJfX2V4aXN0c1wiKTtcbiAgICAgICAgaWYgKGhhc093bi5jYWxsKHRoaXMuZGF0YSwgZGF0YUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVtkYXRhSWRdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgTGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5sb29rdXAoZGF0YUlkLCBkZXBlbmRPbkV4aXN0ZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucG9saWNpZXMucm9vdFR5cGVuYW1lc0J5SWRbZGF0YUlkXSkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEVudGl0eVN0b3JlLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChvbGRlciwgbmV3ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGRhdGFJZDtcbiAgICAgICAgLy8gQ29udmVydCB1bmV4cGVjdGVkIHJlZmVyZW5jZXMgdG8gSUQgc3RyaW5ncy5cbiAgICAgICAgaWYgKGlzUmVmZXJlbmNlKG9sZGVyKSlcbiAgICAgICAgICAgIG9sZGVyID0gb2xkZXIuX19yZWY7XG4gICAgICAgIGlmIChpc1JlZmVyZW5jZShuZXdlcikpXG4gICAgICAgICAgICBuZXdlciA9IG5ld2VyLl9fcmVmO1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSB0eXBlb2Ygb2xkZXIgPT09IFwic3RyaW5nXCIgPyB0aGlzLmxvb2t1cCgoZGF0YUlkID0gb2xkZXIpKSA6IG9sZGVyO1xuICAgICAgICB2YXIgaW5jb21pbmcgPSB0eXBlb2YgbmV3ZXIgPT09IFwic3RyaW5nXCIgPyB0aGlzLmxvb2t1cCgoZGF0YUlkID0gbmV3ZXIpKSA6IG5ld2VyO1xuICAgICAgICAvLyBJZiBuZXdlciB3YXMgYSBzdHJpbmcgSUQsIGJ1dCB0aGF0IElEIHdhcyBub3QgZGVmaW5lZCBpbiB0aGlzIHN0b3JlLFxuICAgICAgICAvLyB0aGVuIHRoZXJlIGFyZSBubyBmaWVsZHMgdG8gYmUgbWVyZ2VkLCBzbyB3ZSdyZSBkb25lLlxuICAgICAgICBpZiAoIWluY29taW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIGRhdGFJZCA9PT0gXCJzdHJpbmdcIiwgMSk7XG4gICAgICAgIHZhciBtZXJnZWQgPSBuZXcgRGVlcE1lcmdlcihzdG9yZU9iamVjdFJlY29uY2lsZXIpLm1lcmdlKGV4aXN0aW5nLCBpbmNvbWluZyk7XG4gICAgICAgIC8vIEV2ZW4gaWYgbWVyZ2VkID09PSBleGlzdGluZywgZXhpc3RpbmcgbWF5IGhhdmUgY29tZSBmcm9tIGEgbG93ZXJcbiAgICAgICAgLy8gbGF5ZXIsIHNvIHdlIGFsd2F5cyBuZWVkIHRvIHNldCB0aGlzLmRhdGFbZGF0YUlkXSBvbiB0aGlzIGxldmVsLlxuICAgICAgICB0aGlzLmRhdGFbZGF0YUlkXSA9IG1lcmdlZDtcbiAgICAgICAgaWYgKG1lcmdlZCAhPT0gZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlZnNbZGF0YUlkXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwLmNhY2hpbmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmllbGRzVG9EaXJ0eV8xID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBhZGRlZCBhIG5ldyBTdG9yZU9iamVjdCB3aGVyZSB0aGVyZSB3YXMgcHJldmlvdXNseSBub25lLCBkaXJ0eVxuICAgICAgICAgICAgICAgIC8vIGFueXRoaW5nIHRoYXQgZGVwZW5kZWQgb24gdGhlIGV4aXN0ZW5jZSBvZiB0aGlzIGRhdGFJZCwgc3VjaCBhcyB0aGVcbiAgICAgICAgICAgICAgICAvLyBFbnRpdHlTdG9yZSNoYXMgbWV0aG9kLlxuICAgICAgICAgICAgICAgIGlmICghZXhpc3RpbmcpXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkc1RvRGlydHlfMS5fX2V4aXN0cyA9IDE7XG4gICAgICAgICAgICAgICAgLy8gTm93IGludmFsaWRhdGUgZGVwZW5kZW50cyB3aG8gY2FsbGVkIGdldEZpZWxkVmFsdWUgZm9yIGFueSBmaWVsZHNcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGFyZSBjaGFuZ2luZyBhcyBhIHJlc3VsdCBvZiB0aGlzIG1lcmdlLlxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGluY29taW5nKS5mb3JFYWNoKGZ1bmN0aW9uIChzdG9yZUZpZWxkTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWV4aXN0aW5nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1tzdG9yZUZpZWxkTmFtZV0gIT09IG1lcmdlZFtzdG9yZUZpZWxkTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBkaXJ0eSB0aGUgZnVsbCBzdG9yZUZpZWxkTmFtZSwgd2hpY2ggbWF5IGluY2x1ZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlcmlhbGl6ZWQgYXJndW1lbnRzIGZvbGxvd2luZyB0aGUgZmllbGROYW1lIHByZWZpeC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkc1RvRGlydHlfMVtzdG9yZUZpZWxkTmFtZV0gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxzbyBkaXJ0eSBmaWVsZE5hbWVGcm9tU3RvcmVOYW1lKHN0b3JlRmllbGROYW1lKSBpZiBpdCdzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkaWZmZXJlbnQgZnJvbSBzdG9yZUZpZWxkTmFtZSBhbmQgdGhpcyBmaWVsZCBkb2VzIG5vdCBoYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBrZXlBcmdzIGNvbmZpZ3VyZWQsIGJlY2F1c2UgdGhhdCBtZWFucyB0aGUgY2FjaGUgY2FuJ3QgbWFrZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55IGFzc3VtcHRpb25zIGFib3V0IGhvdyBmaWVsZCB2YWx1ZXMgd2l0aCB0aGUgc2FtZSBmaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmFtZSBidXQgZGlmZmVyZW50IGFyZ3VtZW50cyBtaWdodCBiZSBpbnRlcnJlbGF0ZWQsIHNvIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtdXN0IGVyciBvbiB0aGUgc2lkZSBvZiBpbnZhbGlkYXRpbmcgYWxsIGZpZWxkIHZhbHVlcyB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaGFyZSB0aGUgc2FtZSBzaG9ydCBmaWVsZE5hbWUsIHJlZ2FyZGxlc3Mgb2YgYXJndW1lbnRzLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IGZpZWxkTmFtZUZyb21TdG9yZU5hbWUoc3RvcmVGaWVsZE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSAhPT0gc3RvcmVGaWVsZE5hbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhX3RoaXMucG9saWNpZXMuaGFzS2V5QXJncyhtZXJnZWQuX190eXBlbmFtZSwgZmllbGROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkc1RvRGlydHlfMVtmaWVsZE5hbWVdID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG1lcmdlZFtzdG9yZUZpZWxkTmFtZV0gaGFzIGJlY29tZSB1bmRlZmluZWQsIGFuZCB0aGlzIGlzIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm9vdCBsYXllciwgYWN0dWFsbHkgZGVsZXRlIHRoZSBwcm9wZXJ0eSBmcm9tIHRoZSBtZXJnZWQgb2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgZ3VhcmFudGVlZCB0byBoYXZlIGJlZW4gY3JlYXRlZCBmcmVzaCBpbiB0aGlzIG1ldGhvZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXJnZWRbc3RvcmVGaWVsZE5hbWVdID09PSB2b2lkIDAgJiYgIShfdGhpcyBpbnN0YW5jZW9mIExheWVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXJnZWRbc3RvcmVGaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkc1RvRGlydHlfMS5fX3R5cGVuYW1lICYmXG4gICAgICAgICAgICAgICAgICAgICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX190eXBlbmFtZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luY2Ugd2UgcmV0dXJuIGRlZmF1bHQgcm9vdCBfX3R5cGVuYW1lIHN0cmluZ3NcbiAgICAgICAgICAgICAgICAgICAgLy8gYXV0b21hdGljYWxseSBmcm9tIHN0b3JlLmdldCwgd2UgZG9uJ3QgbmVlZCB0byBkaXJ0eSB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gUk9PVF9RVUVSWS5fX3R5cGVuYW1lIGZpZWxkIGlmIG1lcmdlZC5fX3R5cGVuYW1lIGlzIGVxdWFsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHRoZSBkZWZhdWx0IHN0cmluZyAodXN1YWxseSBcIlF1ZXJ5XCIpLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbGljaWVzLnJvb3RUeXBlbmFtZXNCeUlkW2RhdGFJZF0gPT09IG1lcmdlZC5fX3R5cGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBmaWVsZHNUb0RpcnR5XzEuX190eXBlbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoZmllbGRzVG9EaXJ0eV8xKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmdyb3VwLmRpcnR5KGRhdGFJZCwgZmllbGROYW1lKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRW50aXR5U3RvcmUucHJvdG90eXBlLm1vZGlmeSA9IGZ1bmN0aW9uIChkYXRhSWQsIGZpZWxkcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3RvcmVPYmplY3QgPSB0aGlzLmxvb2t1cChkYXRhSWQpO1xuICAgICAgICBpZiAoc3RvcmVPYmplY3QpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2VkRmllbGRzXzEgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgdmFyIG5lZWRUb01lcmdlXzEgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBhbGxEZWxldGVkXzEgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHNoYXJlZERldGFpbHNfMSA9IHtcbiAgICAgICAgICAgICAgICBERUxFVEU6IERFTEVURSxcbiAgICAgICAgICAgICAgICBJTlZBTElEQVRFOiBJTlZBTElEQVRFLFxuICAgICAgICAgICAgICAgIGlzUmVmZXJlbmNlOiBpc1JlZmVyZW5jZSxcbiAgICAgICAgICAgICAgICB0b1JlZmVyZW5jZTogdGhpcy50b1JlZmVyZW5jZSxcbiAgICAgICAgICAgICAgICBjYW5SZWFkOiB0aGlzLmNhblJlYWQsXG4gICAgICAgICAgICAgICAgcmVhZEZpZWxkOiBmdW5jdGlvbiAoZmllbGROYW1lT3JPcHRpb25zLCBmcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5wb2xpY2llcy5yZWFkRmllbGQodHlwZW9mIGZpZWxkTmFtZU9yT3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lOiBmaWVsZE5hbWVPck9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogZnJvbSB8fCBtYWtlUmVmZXJlbmNlKGRhdGFJZCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZpZWxkTmFtZU9yT3B0aW9ucywgeyBzdG9yZTogX3RoaXMgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzdG9yZU9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAoc3RvcmVGaWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmllbGROYW1lID0gZmllbGROYW1lRnJvbVN0b3JlTmFtZShzdG9yZUZpZWxkTmFtZSk7XG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSBzdG9yZU9iamVjdFtzdG9yZUZpZWxkTmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkVmFsdWUgPT09IHZvaWQgMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciBtb2RpZnkgPSB0eXBlb2YgZmllbGRzID09PSBcImZ1bmN0aW9uXCIgPyBmaWVsZHMgOiAoZmllbGRzW3N0b3JlRmllbGROYW1lXSB8fCBmaWVsZHNbZmllbGROYW1lXSk7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGlmeSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBtb2RpZnkgPT09IGRlbE1vZGlmaWVyID8gREVMRVRFIDogKG1vZGlmeShtYXliZURlZXBGcmVlemUoZmllbGRWYWx1ZSksIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzaGFyZWREZXRhaWxzXzEpLCB7IGZpZWxkTmFtZTogZmllbGROYW1lLCBzdG9yZUZpZWxkTmFtZTogc3RvcmVGaWVsZE5hbWUsIHN0b3JhZ2U6IF90aGlzLmdldFN0b3JhZ2UoZGF0YUlkLCBzdG9yZUZpZWxkTmFtZSkgfSkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSBJTlZBTElEQVRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ncm91cC5kaXJ0eShkYXRhSWQsIHN0b3JlRmllbGROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gREVMRVRFKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBmaWVsZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZEZpZWxkc18xW3N0b3JlRmllbGROYW1lXSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRUb01lcmdlXzEgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2tSZWZlcmVuY2UgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMubG9va3VwKHJlZi5fX3JlZikgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50Lndhcm4oMiwgcmVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVmZXJlbmNlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tSZWZlcmVuY2UobmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXYXJuIGFib3V0IHdyaXRpbmcgXCJtaXhlZFwiIGFycmF5cyBvZiBSZWZlcmVuY2UgYW5kIG5vbi1SZWZlcmVuY2Ugb2JqZWN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlZW5SZWZlcmVuY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb21lTm9uUmVmZXJlbmNlID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuZXdWYWx1ZV8xID0gbmV3VmFsdWU7IF9pIDwgbmV3VmFsdWVfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBuZXdWYWx1ZV8xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZWZlcmVuY2UodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZW5SZWZlcmVuY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tSZWZlcmVuY2UodmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3Qgd2FybiBvbiBwcmltaXRpdmUgdmFsdWVzLCBzaW5jZSB0aG9zZSBjb3VsZCBuZXZlciBiZSByZXByZXNlbnRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBieSBhIHJlZmVyZW5jZS4gVGhpcyBpcyBhIHZhbGlkIChhbGJlaXQgdW5jb21tb24pIHVzZSBjYXNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmICEhdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IF90aGlzLnBvbGljaWVzLmlkZW50aWZ5KHZhbHVlKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIG9iamVjdCBjb3VsZCBldmVuIGJlIHJlZmVyZW5jZWQsIG90aGVyd2lzZSB3ZSBhcmUgbm90IGludGVyZXN0ZWQgaW4gaXQgZm9yIHRoaXMgd2FybmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29tZU5vblJlZmVyZW5jZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWVuUmVmZXJlbmNlICYmIHNvbWVOb25SZWZlcmVuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIGludmFyaWFudC53YXJuKDMsIHNvbWVOb25SZWZlcmVuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkVmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICBhbGxEZWxldGVkXzEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChuZWVkVG9NZXJnZV8xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXJnZShkYXRhSWQsIGNoYW5nZWRGaWVsZHNfMSk7XG4gICAgICAgICAgICAgICAgaWYgKGFsbERlbGV0ZWRfMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIExheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFbZGF0YUlkXSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRhdGFbZGF0YUlkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyb3VwLmRpcnR5KGRhdGFJZCwgXCJfX2V4aXN0c1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLy8gSWYgY2FsbGVkIHdpdGggb25seSBvbmUgYXJndW1lbnQsIHJlbW92ZXMgdGhlIGVudGlyZSBlbnRpdHlcbiAgICAvLyBpZGVudGlmaWVkIGJ5IGRhdGFJZC4gSWYgY2FsbGVkIHdpdGggYSBmaWVsZE5hbWUgYXMgd2VsbCwgcmVtb3ZlcyBhbGxcbiAgICAvLyBmaWVsZHMgb2YgdGhhdCBlbnRpdHkgd2hvc2UgbmFtZXMgbWF0Y2ggZmllbGROYW1lIGFjY29yZGluZyB0byB0aGVcbiAgICAvLyBmaWVsZE5hbWVGcm9tU3RvcmVOYW1lIGhlbHBlciBmdW5jdGlvbi4gSWYgY2FsbGVkIHdpdGggYSBmaWVsZE5hbWVcbiAgICAvLyBhbmQgdmFyaWFibGVzLCByZW1vdmVzIGFsbCBmaWVsZHMgb2YgdGhhdCBlbnRpdHkgd2hvc2UgbmFtZXMgbWF0Y2ggZmllbGROYW1lXG4gICAgLy8gYW5kIHdob3NlIGFyZ3VtZW50cyB3aGVuIGNhY2hlZCBleGFjdGx5IG1hdGNoIHRoZSB2YXJpYWJsZXMgcGFzc2VkLlxuICAgIEVudGl0eVN0b3JlLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoZGF0YUlkLCBmaWVsZE5hbWUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgc3RvcmVPYmplY3QgPSB0aGlzLmxvb2t1cChkYXRhSWQpO1xuICAgICAgICBpZiAoc3RvcmVPYmplY3QpIHtcbiAgICAgICAgICAgIHZhciB0eXBlbmFtZSA9IHRoaXMuZ2V0RmllbGRWYWx1ZShzdG9yZU9iamVjdCwgXCJfX3R5cGVuYW1lXCIpO1xuICAgICAgICAgICAgdmFyIHN0b3JlRmllbGROYW1lID0gZmllbGROYW1lICYmIGFyZ3MgP1xuICAgICAgICAgICAgICAgIHRoaXMucG9saWNpZXMuZ2V0U3RvcmVGaWVsZE5hbWUoeyB0eXBlbmFtZTogdHlwZW5hbWUsIGZpZWxkTmFtZTogZmllbGROYW1lLCBhcmdzOiBhcmdzIH0pXG4gICAgICAgICAgICAgICAgOiBmaWVsZE5hbWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RpZnkoZGF0YUlkLCBzdG9yZUZpZWxkTmFtZSA/IChfYSA9IHt9LFxuICAgICAgICAgICAgICAgIF9hW3N0b3JlRmllbGROYW1lXSA9IGRlbE1vZGlmaWVyLFxuICAgICAgICAgICAgICAgIF9hKSA6IGRlbE1vZGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBFbnRpdHlTdG9yZS5wcm90b3R5cGUuZXZpY3QgPSBmdW5jdGlvbiAob3B0aW9ucywgbGltaXQpIHtcbiAgICAgICAgdmFyIGV2aWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG9wdGlvbnMuaWQpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbCh0aGlzLmRhdGEsIG9wdGlvbnMuaWQpKSB7XG4gICAgICAgICAgICAgICAgZXZpY3RlZCA9IHRoaXMuZGVsZXRlKG9wdGlvbnMuaWQsIG9wdGlvbnMuZmllbGROYW1lLCBvcHRpb25zLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBMYXllciAmJiB0aGlzICE9PSBsaW1pdCkge1xuICAgICAgICAgICAgICAgIGV2aWN0ZWQgPSB0aGlzLnBhcmVudC5ldmljdChvcHRpb25zLCBsaW1pdCkgfHwgZXZpY3RlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFsd2F5cyBpbnZhbGlkYXRlIHRoZSBmaWVsZCB0byB0cmlnZ2VyIHJlcmVhZGluZyBvZiB3YXRjaGVkXG4gICAgICAgICAgICAvLyBxdWVyaWVzLCBldmVuIGlmIG5vIGNhY2hlIGRhdGEgd2FzIG1vZGlmaWVkIGJ5IHRoZSBldmljdGlvbixcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgcXVlcmllcyBtYXkgZGVwZW5kIG9uIGNvbXB1dGVkIGZpZWxkcyB3aXRoIGN1c3RvbSByZWFkXG4gICAgICAgICAgICAvLyBmdW5jdGlvbnMsIHdob3NlIHZhbHVlcyBhcmUgbm90IHN0b3JlZCBpbiB0aGUgRW50aXR5U3RvcmUuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5maWVsZE5hbWUgfHwgZXZpY3RlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAuZGlydHkob3B0aW9ucy5pZCwgb3B0aW9ucy5maWVsZE5hbWUgfHwgXCJfX2V4aXN0c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZpY3RlZDtcbiAgICB9O1xuICAgIEVudGl0eVN0b3JlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlKG51bGwpO1xuICAgIH07XG4gICAgRW50aXR5U3RvcmUucHJvdG90eXBlLmV4dHJhY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBvYmogPSB0aGlzLnRvT2JqZWN0KCk7XG4gICAgICAgIHZhciBleHRyYVJvb3RJZHMgPSBbXTtcbiAgICAgICAgdGhpcy5nZXRSb290SWRTZXQoKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd24uY2FsbChfdGhpcy5wb2xpY2llcy5yb290VHlwZW5hbWVzQnlJZCwgaWQpKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFSb290SWRzLnB1c2goaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGV4dHJhUm9vdElkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9iai5fX01FVEEgPSB7IGV4dHJhUm9vdElkczogZXh0cmFSb290SWRzLnNvcnQoKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbiAgICBFbnRpdHlTdG9yZS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIChuZXdEYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuZGF0YSkuZm9yRWFjaChmdW5jdGlvbiAoZGF0YUlkKSB7XG4gICAgICAgICAgICBpZiAoIShuZXdEYXRhICYmIGhhc093bi5jYWxsKG5ld0RhdGEsIGRhdGFJZCkpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVsZXRlKGRhdGFJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobmV3RGF0YSkge1xuICAgICAgICAgICAgdmFyIF9fTUVUQSA9IG5ld0RhdGEuX19NRVRBLCByZXN0XzEgPSBfX3Jlc3QobmV3RGF0YSwgW1wiX19NRVRBXCJdKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHJlc3RfMSkuZm9yRWFjaChmdW5jdGlvbiAoZGF0YUlkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubWVyZ2UoZGF0YUlkLCByZXN0XzFbZGF0YUlkXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChfX01FVEEpIHtcbiAgICAgICAgICAgICAgICBfX01FVEEuZXh0cmFSb290SWRzLmZvckVhY2godGhpcy5yZXRhaW4sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBFbnRpdHlTdG9yZS5wcm90b3R5cGUucmV0YWluID0gZnVuY3Rpb24gKHJvb3RJZCkge1xuICAgICAgICByZXR1cm4gKHRoaXMucm9vdElkc1tyb290SWRdID0gKHRoaXMucm9vdElkc1tyb290SWRdIHx8IDApICsgMSk7XG4gICAgfTtcbiAgICBFbnRpdHlTdG9yZS5wcm90b3R5cGUucmVsZWFzZSA9IGZ1bmN0aW9uIChyb290SWQpIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdElkc1tyb290SWRdID4gMCkge1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gLS10aGlzLnJvb3RJZHNbcm9vdElkXTtcbiAgICAgICAgICAgIGlmICghY291bnQpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucm9vdElkc1tyb290SWRdO1xuICAgICAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgLy8gUmV0dXJuIGEgU2V0PHN0cmluZz4gb2YgYWxsIHRoZSBJRCBzdHJpbmdzIHRoYXQgaGF2ZSBiZWVuIHJldGFpbmVkIGJ5XG4gICAgLy8gdGhpcyBsYXllci9yb290ICphbmQqIGFueSBsYXllcnMvcm9vdHMgYmVuZWF0aCBpdC5cbiAgICBFbnRpdHlTdG9yZS5wcm90b3R5cGUuZ2V0Um9vdElkU2V0ID0gZnVuY3Rpb24gKGlkcykge1xuICAgICAgICBpZiAoaWRzID09PSB2b2lkIDApIHsgaWRzID0gbmV3IFNldCgpOyB9XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMucm9vdElkcykuZm9yRWFjaChpZHMuYWRkLCBpZHMpO1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIExheWVyKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5nZXRSb290SWRTZXQoaWRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE9mZmljaWFsIHNpbmdsZXRvbiBJRHMgbGlrZSBST09UX1FVRVJZIGFuZCBST09UX01VVEFUSU9OIGFyZVxuICAgICAgICAgICAgLy8gYWx3YXlzIGNvbnNpZGVyZWQgcm9vdHMgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbiwgcmVnYXJkbGVzcyBvZlxuICAgICAgICAgICAgLy8gdGhlaXIgcmV0YWlubWVudCBjb3VudHMgaW4gdGhpcy5yb290SWRzLlxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5wb2xpY2llcy5yb290VHlwZW5hbWVzQnlJZCkuZm9yRWFjaChpZHMuYWRkLCBpZHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZHM7XG4gICAgfTtcbiAgICAvLyBUaGUgZ29hbCBvZiBnYXJiYWdlIGNvbGxlY3Rpb24gaXMgdG8gcmVtb3ZlIElEcyBmcm9tIHRoZSBSb290IGxheWVyIG9mIHRoZVxuICAgIC8vIHN0b3JlIHRoYXQgYXJlIG5vIGxvbmdlciByZWFjaGFibGUgc3RhcnRpbmcgZnJvbSBhbnkgSURzIHRoYXQgaGF2ZSBiZWVuXG4gICAgLy8gZXhwbGljaXRseSByZXRhaW5lZCAoc2VlIHJldGFpbiBhbmQgcmVsZWFzZSwgYWJvdmUpLiBSZXR1cm5zIGFuIGFycmF5IG9mXG4gICAgLy8gZGF0YUlkIHN0cmluZ3MgdGhhdCB3ZXJlIHJlbW92ZWQgZnJvbSB0aGUgc3RvcmUuXG4gICAgRW50aXR5U3RvcmUucHJvdG90eXBlLmdjID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaWRzID0gdGhpcy5nZXRSb290SWRTZXQoKTtcbiAgICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy50b09iamVjdCgpO1xuICAgICAgICBpZHMuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChzbmFwc2hvdCwgaWQpKSB7XG4gICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB3ZSBhcmUgaXRlcmF0aW5nIG92ZXIgYW4gRUNNQVNjcmlwdCBTZXQsIHRoZSBJRHMgd2UgYWRkIGhlcmVcbiAgICAgICAgICAgICAgICAvLyB3aWxsIGJlIHZpc2l0ZWQgaW4gbGF0ZXIgaXRlcmF0aW9ucyBvZiB0aGUgZm9yRWFjaCBsb29wIG9ubHkgaWYgdGhleVxuICAgICAgICAgICAgICAgIC8vIHdlcmUgbm90IHByZXZpb3VzbHkgY29udGFpbmVkIGJ5IHRoZSBTZXQuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoX3RoaXMuZmluZENoaWxkUmVmSWRzKGlkKSkuZm9yRWFjaChpZHMuYWRkLCBpZHMpO1xuICAgICAgICAgICAgICAgIC8vIEJ5IHJlbW92aW5nIElEcyBmcm9tIHRoZSBzbmFwc2hvdCBvYmplY3QgaGVyZSwgd2UgcHJvdGVjdCB0aGVtIGZyb21cbiAgICAgICAgICAgICAgICAvLyBnZXR0aW5nIHJlbW92ZWQgZnJvbSB0aGUgcm9vdCBzdG9yZSBsYXllciBiZWxvdy5cbiAgICAgICAgICAgICAgICBkZWxldGUgc25hcHNob3RbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGlkc1RvUmVtb3ZlID0gT2JqZWN0LmtleXMoc25hcHNob3QpO1xuICAgICAgICBpZiAoaWRzVG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgcm9vdF8xID0gdGhpcztcbiAgICAgICAgICAgIHdoaWxlIChyb290XzEgaW5zdGFuY2VvZiBMYXllcilcbiAgICAgICAgICAgICAgICByb290XzEgPSByb290XzEucGFyZW50O1xuICAgICAgICAgICAgaWRzVG9SZW1vdmUuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIHJvb3RfMS5kZWxldGUoaWQpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWRzVG9SZW1vdmU7XG4gICAgfTtcbiAgICBFbnRpdHlTdG9yZS5wcm90b3R5cGUuZmluZENoaWxkUmVmSWRzID0gZnVuY3Rpb24gKGRhdGFJZCkge1xuICAgICAgICBpZiAoIWhhc093bi5jYWxsKHRoaXMucmVmcywgZGF0YUlkKSkge1xuICAgICAgICAgICAgdmFyIGZvdW5kXzEgPSAodGhpcy5yZWZzW2RhdGFJZF0gPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgICAgICAgIHZhciByb290ID0gdGhpcy5kYXRhW2RhdGFJZF07XG4gICAgICAgICAgICBpZiAoIXJvb3QpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kXzE7XG4gICAgICAgICAgICB2YXIgd29ya1NldF8xID0gbmV3IFNldChbcm9vdF0pO1xuICAgICAgICAgICAgLy8gV2l0aGluIHRoZSBzdG9yZSwgb25seSBhcnJheXMgYW5kIG9iamVjdHMgY2FuIGNvbnRhaW4gY2hpbGQgZW50aXR5XG4gICAgICAgICAgICAvLyByZWZlcmVuY2VzLCBzbyB3ZSBjYW4gcHJ1bmUgdGhlIHRyYXZlcnNhbCB1c2luZyB0aGlzIHByZWRpY2F0ZTpcbiAgICAgICAgICAgIHdvcmtTZXRfMS5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZWZlcmVuY2Uob2JqKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZF8xW29iai5fX3JlZl0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiByYXJlIGNhc2VzLCBhIHsgX19yZWYgfSBSZWZlcmVuY2Ugb2JqZWN0IG1heSBoYXZlIG90aGVyIGZpZWxkcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBvZnRlbiBpbmRpY2F0ZXMgYSBtaXNtZXJnaW5nIG9mIFJlZmVyZW5jZXMgd2l0aCBTdG9yZU9iamVjdHMsXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBnYXJiYWdlIGNvbGxlY3Rpb24gc2hvdWxkIG5vdCBiZSBmb29sZWQgYnkgYSBzdHJheSBfX3JlZlxuICAgICAgICAgICAgICAgICAgICAvLyBwcm9wZXJ0eSBpbiBhIFN0b3JlT2JqZWN0IChpZ25vcmluZyBhbGwgdGhlIG90aGVyIGZpZWxkcyBqdXN0XG4gICAgICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhlIFN0b3JlT2JqZWN0IGxvb2tzIGxpa2UgYSBSZWZlcmVuY2UpLiBUbyBhdm9pZCB0aGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHByZW1hdHVyZSB0ZXJtaW5hdGlvbiBvZiBmaW5kQ2hpbGRSZWZJZHMgcmVjdXJzaW9uLCB3ZSBmYWxsIHRocm91Z2hcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gdGhlIGNvZGUgYmVsb3csIHdoaWNoIHdpbGwgaGFuZGxlIGFueSBvdGhlciBwcm9wZXJ0aWVzIG9mIG9iai5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzTm9uTnVsbE9iamVjdChvYmopKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBvYmpba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gYWRkIHByaW1pdGl2ZSB2YWx1ZXMgdG8gdGhlIHdvcmtTZXQsIHNpbmNlIHRoZXkgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250YWluIHJlZmVyZW5jZSBvYmplY3RzLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm9uTnVsbE9iamVjdChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrU2V0XzEuYWRkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVmc1tkYXRhSWRdO1xuICAgIH07XG4gICAgRW50aXR5U3RvcmUucHJvdG90eXBlLm1ha2VDYWNoZUtleSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXAua2V5TWFrZXIubG9va3VwQXJyYXkoYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIHJldHVybiBFbnRpdHlTdG9yZTtcbn0oKSk7XG5leHBvcnQgeyBFbnRpdHlTdG9yZSB9O1xuLy8gQSBzaW5nbGUgQ2FjaGVHcm91cCByZXByZXNlbnRzIGEgc2V0IG9mIG9uZSBvciBtb3JlIEVudGl0eVN0b3JlIG9iamVjdHMsXG4vLyB0eXBpY2FsbHkgdGhlIFJvb3Qgc3RvcmUgaW4gYSBDYWNoZUdyb3VwIGJ5IGl0c2VsZiwgYW5kIGFsbCBhY3RpdmUgTGF5ZXJcbi8vIHN0b3JlcyBpbiBhIGdyb3VwIHRvZ2V0aGVyLiBBIHNpbmdsZSBFbnRpdHlTdG9yZSBvYmplY3QgYmVsb25ncyB0byBvbmx5XG4vLyBvbmUgQ2FjaGVHcm91cCwgc3RvcmUuZ3JvdXAuIFRoZSBDYWNoZUdyb3VwIGlzIHJlc3BvbnNpYmxlIGZvciB0cmFja2luZ1xuLy8gZGVwZW5kZW5jaWVzLCBzbyBzdG9yZS5ncm91cCBpcyBoZWxwZnVsIGZvciBnZW5lcmF0aW5nIHVuaXF1ZSBrZXlzIGZvclxuLy8gY2FjaGVkIHJlc3VsdHMgdGhhdCBuZWVkIHRvIGJlIGludmFsaWRhdGVkIHdoZW4vaWYgdGhvc2UgZGVwZW5kZW5jaWVzXG4vLyBjaGFuZ2UuIElmIHdlIHVzZWQgdGhlIEVudGl0eVN0b3JlIG9iamVjdHMgdGhlbXNlbHZlcyBhcyBjYWNoZSBrZXlzICh0aGF0XG4vLyBpcywgc3RvcmUgcmF0aGVyIHRoYW4gc3RvcmUuZ3JvdXApLCB0aGUgY2FjaGUgd291bGQgYmVjb21lIHVubmVjZXNzYXJpbHlcbi8vIGZyYWdtZW50ZWQgYnkgYWxsIHRoZSBkaWZmZXJlbnQgTGF5ZXIgb2JqZWN0cy4gSW5zdGVhZCwgdGhlIENhY2hlR3JvdXBcbi8vIGFwcHJvYWNoIGFsbG93cyBhbGwgb3B0aW1pc3RpYyBMYXllciBvYmplY3RzIGluIHRoZSBzYW1lIGxpbmtlZCBsaXN0IHRvXG4vLyBiZWxvbmcgdG8gb25lIENhY2hlR3JvdXAsIHdpdGggdGhlIG5vbi1vcHRpbWlzdGljIFJvb3Qgb2JqZWN0IGJlbG9uZ2luZ1xuLy8gdG8gYW5vdGhlciBDYWNoZUdyb3VwLCBhbGxvd2luZyByZXN1bHRDYWNoaW5nIGRlcGVuZGVuY2llcyB0byBiZSB0cmFja2VkXG4vLyBzZXBhcmF0ZWx5IGZvciBvcHRpbWlzdGljIGFuZCBub24tb3B0aW1pc3RpYyBlbnRpdHkgZGF0YS5cbnZhciBDYWNoZUdyb3VwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhY2hlR3JvdXAoY2FjaGluZywgcGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQgPT09IHZvaWQgMCkgeyBwYXJlbnQgPSBudWxsOyB9XG4gICAgICAgIHRoaXMuY2FjaGluZyA9IGNhY2hpbmc7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLmQgPSBudWxsO1xuICAgICAgICB0aGlzLnJlc2V0Q2FjaGluZygpO1xuICAgIH1cbiAgICBDYWNoZUdyb3VwLnByb3RvdHlwZS5yZXNldENhY2hpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZCA9IHRoaXMuY2FjaGluZyA/IGRlcCgpIDogbnVsbDtcbiAgICAgICAgdGhpcy5rZXlNYWtlciA9IG5ldyBUcmllKGNhblVzZVdlYWtNYXApO1xuICAgIH07XG4gICAgQ2FjaGVHcm91cC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gKGRhdGFJZCwgc3RvcmVGaWVsZE5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZCkge1xuICAgICAgICAgICAgdGhpcy5kKG1ha2VEZXBLZXkoZGF0YUlkLCBzdG9yZUZpZWxkTmFtZSkpO1xuICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IGZpZWxkTmFtZUZyb21TdG9yZU5hbWUoc3RvcmVGaWVsZE5hbWUpO1xuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSAhPT0gc3RvcmVGaWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBGaWVsZHMgd2l0aCBhcmd1bWVudHMgdGhhdCBjb250cmlidXRlIGV4dHJhIGlkZW50aWZ5aW5nXG4gICAgICAgICAgICAgICAgLy8gaW5mb3JtYXRpb24gdG8gdGhlIGZpZWxkTmFtZSAodGh1cyBmb3JtaW5nIHRoZSBzdG9yZUZpZWxkTmFtZSlcbiAgICAgICAgICAgICAgICAvLyBkZXBlbmQgbm90IG9ubHkgb24gdGhlIGZ1bGwgc3RvcmVGaWVsZE5hbWUgYnV0IGFsc28gb24gdGhlXG4gICAgICAgICAgICAgICAgLy8gc2hvcnQgZmllbGROYW1lLCBzbyB0aGUgZmllbGQgY2FuIGJlIGludmFsaWRhdGVkIHVzaW5nIGVpdGhlclxuICAgICAgICAgICAgICAgIC8vIGxldmVsIG9mIHNwZWNpZmljaXR5LlxuICAgICAgICAgICAgICAgIHRoaXMuZChtYWtlRGVwS2V5KGRhdGFJZCwgZmllbGROYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5kZXBlbmQoZGF0YUlkLCBzdG9yZUZpZWxkTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhY2hlR3JvdXAucHJvdG90eXBlLmRpcnR5ID0gZnVuY3Rpb24gKGRhdGFJZCwgc3RvcmVGaWVsZE5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZCkge1xuICAgICAgICAgICAgdGhpcy5kLmRpcnR5KG1ha2VEZXBLZXkoZGF0YUlkLCBzdG9yZUZpZWxkTmFtZSksIFxuICAgICAgICAgICAgLy8gV2hlbiBzdG9yZUZpZWxkTmFtZSA9PT0gXCJfX2V4aXN0c1wiLCB0aGF0IG1lYW5zIHRoZSBlbnRpdHkgaWRlbnRpZmllZFxuICAgICAgICAgICAgLy8gYnkgZGF0YUlkIGhhcyBlaXRoZXIgZGlzYXBwZWFyZWQgZnJvbSB0aGUgY2FjaGUgb3Igd2FzIG5ld2x5IGFkZGVkLFxuICAgICAgICAgICAgLy8gc28gdGhlIHJlc3VsdCBjYWNoaW5nIHN5c3RlbSB3b3VsZCBkbyB3ZWxsIHRvIFwiZm9yZ2V0IGV2ZXJ5dGhpbmcgaXRcbiAgICAgICAgICAgIC8vIGtub3dzXCIgYWJvdXQgdGhhdCBvYmplY3QuIFRvIGFjaGlldmUgdGhhdCBraW5kIG9mIGludmFsaWRhdGlvbiwgd2VcbiAgICAgICAgICAgIC8vIG5vdCBvbmx5IGRpcnR5IHRoZSBhc3NvY2lhdGVkIHJlc3VsdCBjYWNoZSBlbnRyeSwgYnV0IGFsc28gcmVtb3ZlIGl0XG4gICAgICAgICAgICAvLyBjb21wbGV0ZWx5IGZyb20gdGhlIGRlcGVuZGVuY3kgZ3JhcGguIEZvciB0aGUgb3B0aW1pc20gaW1wbGVtZW50YXRpb25cbiAgICAgICAgICAgIC8vIGRldGFpbHMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtbi9vcHRpbWlzbS9wdWxsLzE5NS5cbiAgICAgICAgICAgIHN0b3JlRmllbGROYW1lID09PSBcIl9fZXhpc3RzXCIgPyBcImZvcmdldFwiIDogXCJzZXREaXJ0eVwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENhY2hlR3JvdXA7XG59KCkpO1xuZnVuY3Rpb24gbWFrZURlcEtleShkYXRhSWQsIHN0b3JlRmllbGROYW1lKSB7XG4gICAgLy8gU2luY2UgZmllbGQgbmFtZXMgY2Fubm90IGhhdmUgJyMnIGNoYXJhY3RlcnMgaW4gdGhlbSwgdGhpcyBtZXRob2RcbiAgICAvLyBvZiBqb2luaW5nIHRoZSBmaWVsZCBuYW1lIGFuZCB0aGUgSUQgc2hvdWxkIGJlIHVuYW1iaWd1b3VzLCBhbmQgbXVjaFxuICAgIC8vIGNoZWFwZXIgdGhhbiBKU09OLnN0cmluZ2lmeShbZGF0YUlkLCBmaWVsZE5hbWVdKS5cbiAgICByZXR1cm4gc3RvcmVGaWVsZE5hbWUgKyBcIiNcIiArIGRhdGFJZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXliZURlcGVuZE9uRXhpc3RlbmNlT2ZFbnRpdHkoc3RvcmUsIGVudGl0eUlkKSB7XG4gICAgaWYgKHN1cHBvcnRzUmVzdWx0Q2FjaGluZyhzdG9yZSkpIHtcbiAgICAgICAgLy8gV2UgdXNlIHRoaXMgcHNldWRvLWZpZWxkIF9fZXhpc3RzIGVsc2V3aGVyZSBpbiB0aGUgRW50aXR5U3RvcmUgY29kZSB0b1xuICAgICAgICAvLyByZXByZXNlbnQgY2hhbmdlcyBpbiB0aGUgZXhpc3RlbmNlIG9mIHRoZSBlbnRpdHkgb2JqZWN0IGlkZW50aWZpZWQgYnlcbiAgICAgICAgLy8gZW50aXR5SWQuIFRoaXMgZGVwZW5kZW5jeSBnZXRzIHJlbGlhYmx5IGRpcnRpZWQgd2hlbmV2ZXIgYW4gb2JqZWN0IHdpdGhcbiAgICAgICAgLy8gdGhpcyBJRCBpcyBkZWxldGVkIChvciBuZXdseSBjcmVhdGVkKSB3aXRoaW4gdGhpcyBncm91cCwgc28gYW55IHJlc3VsdFxuICAgICAgICAvLyBjYWNoZSBlbnRyaWVzIChmb3IgZXhhbXBsZSwgU3RvcmVSZWFkZXIjZXhlY3V0ZVNlbGVjdGlvblNldCByZXN1bHRzKSB0aGF0XG4gICAgICAgIC8vIGRlcGVuZCBvbiBfX2V4aXN0cyBmb3IgdGhpcyBlbnRpdHlJZCB3aWxsIGdldCBkaXJ0aWVkIGFzIHdlbGwsIGxlYWRpbmcgdG9cbiAgICAgICAgLy8gdGhlIGV2ZW50dWFsIHJlY29tcHV0YXRpb24gKGluc3RlYWQgb2YgcmV1c2UpIG9mIHRob3NlIHJlc3VsdCBvYmplY3RzIHRoZVxuICAgICAgICAvLyBuZXh0IHRpbWUgc29tZW9uZSByZWFkcyB0aGVtIGZyb20gdGhlIGNhY2hlLlxuICAgICAgICBzdG9yZS5ncm91cC5kZXBlbmQoZW50aXR5SWQsIFwiX19leGlzdHNcIik7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChFbnRpdHlTdG9yZSkge1xuICAgIC8vIFJlZmVyIHRvIHRoaXMgY2xhc3MgYXMgRW50aXR5U3RvcmUuUm9vdCBvdXRzaWRlIHRoaXMgbmFtZXNwYWNlLlxuICAgIHZhciBSb290ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoUm9vdCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gUm9vdChfYSkge1xuICAgICAgICAgICAgdmFyIHBvbGljaWVzID0gX2EucG9saWNpZXMsIF9iID0gX2EucmVzdWx0Q2FjaGluZywgcmVzdWx0Q2FjaGluZyA9IF9iID09PSB2b2lkIDAgPyB0cnVlIDogX2IsIHNlZWQgPSBfYS5zZWVkO1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcG9saWNpZXMsIG5ldyBDYWNoZUdyb3VwKHJlc3VsdENhY2hpbmcpKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuc3R1bXAgPSBuZXcgU3R1bXAoX3RoaXMpO1xuICAgICAgICAgICAgX3RoaXMuc3RvcmFnZVRyaWUgPSBuZXcgVHJpZShjYW5Vc2VXZWFrTWFwKTtcbiAgICAgICAgICAgIGlmIChzZWVkKVxuICAgICAgICAgICAgICAgIF90aGlzLnJlcGxhY2Uoc2VlZCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgUm9vdC5wcm90b3R5cGUuYWRkTGF5ZXIgPSBmdW5jdGlvbiAobGF5ZXJJZCwgcmVwbGF5KSB7XG4gICAgICAgICAgICAvLyBBZGRpbmcgYW4gb3B0aW1pc3RpYyBMYXllciBvbiB0b3Agb2YgdGhlIFJvb3QgYWN0dWFsbHkgYWRkcyB0aGUgTGF5ZXJcbiAgICAgICAgICAgIC8vIG9uIHRvcCBvZiB0aGUgU3R1bXAsIHNvIHRoZSBTdHVtcCBhbHdheXMgY29tZXMgYmV0d2VlbiB0aGUgUm9vdCBhbmRcbiAgICAgICAgICAgIC8vIGFueSBMYXllciBvYmplY3RzIHRoYXQgd2UndmUgYWRkZWQuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHVtcC5hZGRMYXllcihsYXllcklkLCByZXBsYXkpO1xuICAgICAgICB9O1xuICAgICAgICBSb290LnByb3RvdHlwZS5yZW1vdmVMYXllciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIE5ldmVyIHJlbW92ZSB0aGUgcm9vdCBsYXllci5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICBSb290LnByb3RvdHlwZS5nZXRTdG9yYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVRyaWUubG9va3VwQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFJvb3Q7XG4gICAgfShFbnRpdHlTdG9yZSkpO1xuICAgIEVudGl0eVN0b3JlLlJvb3QgPSBSb290O1xufSkoRW50aXR5U3RvcmUgfHwgKEVudGl0eVN0b3JlID0ge30pKTtcbi8vIE5vdCBleHBvcnRlZCwgc2luY2UgYWxsIExheWVyIGluc3RhbmNlcyBhcmUgY3JlYXRlZCBieSB0aGUgYWRkTGF5ZXIgbWV0aG9kXG4vLyBvZiB0aGUgRW50aXR5U3RvcmUuUm9vdCBjbGFzcy5cbnZhciBMYXllciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTGF5ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGF5ZXIoaWQsIHBhcmVudCwgcmVwbGF5LCBncm91cCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYXJlbnQucG9saWNpZXMsIGdyb3VwKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pZCA9IGlkO1xuICAgICAgICBfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIF90aGlzLnJlcGxheSA9IHJlcGxheTtcbiAgICAgICAgX3RoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgcmVwbGF5KF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBMYXllci5wcm90b3R5cGUuYWRkTGF5ZXIgPSBmdW5jdGlvbiAobGF5ZXJJZCwgcmVwbGF5KSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF5ZXIobGF5ZXJJZCwgdGhpcywgcmVwbGF5LCB0aGlzLmdyb3VwKTtcbiAgICB9O1xuICAgIExheWVyLnByb3RvdHlwZS5yZW1vdmVMYXllciA9IGZ1bmN0aW9uIChsYXllcklkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIFJlbW92ZSBhbGwgaW5zdGFuY2VzIG9mIHRoZSBnaXZlbiBpZCwgbm90IGp1c3QgdGhlIGZpcnN0IG9uZS5cbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50LnJlbW92ZUxheWVyKGxheWVySWQpO1xuICAgICAgICBpZiAobGF5ZXJJZCA9PT0gdGhpcy5pZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ3JvdXAuY2FjaGluZykge1xuICAgICAgICAgICAgICAgIC8vIERpcnR5IGV2ZXJ5IElEIHdlJ3JlIHJlbW92aW5nLiBUZWNobmljYWxseSB3ZSBtaWdodCBiZSBhYmxlIHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgLy8gZGlydHlpbmcgZmllbGRzIHRoYXQgaGF2ZSB2YWx1ZXMgaW4gaGlnaGVyIGxheWVycywgYnV0IHdlIGRvbid0IGhhdmVcbiAgICAgICAgICAgICAgICAvLyBlYXN5IGFjY2VzcyB0byBoaWdoZXIgbGF5ZXJzIGhlcmUsIGFuZCB3ZSdyZSBhYm91dCB0byByZWNyZWF0ZSB0aG9zZVxuICAgICAgICAgICAgICAgIC8vIGxheWVycyBhbnl3YXkgKHNlZSBwYXJlbnQuYWRkTGF5ZXIgYmVsb3cpLlxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuZGF0YSkuZm9yRWFjaChmdW5jdGlvbiAoZGF0YUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvd25TdG9yZU9iamVjdCA9IF90aGlzLmRhdGFbZGF0YUlkXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudFN0b3JlT2JqZWN0ID0gcGFyZW50W1wibG9va3VwXCJdKGRhdGFJZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFyZW50U3RvcmVPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBTdG9yZU9iamVjdCBpZGVudGlmaWVkIGJ5IGRhdGFJZCB3YXMgZGVmaW5lZCBpbiB0aGlzIGxheWVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgd2lsbCBiZSB1bmRlZmluZWQgaW4gdGhlIHBhcmVudCBsYXllciwgc28gd2UgY2FuIGRlbGV0ZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdob2xlIGVudGl0eSB1c2luZyB0aGlzLmRlbGV0ZShkYXRhSWQpLiBTaW5jZSB3ZSdyZSBhYm91dCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhyb3cgdGhpcyBsYXllciBhd2F5LCB0aGUgb25seSBnb2FsIG9mIHRoaXMgZGVsZXRpb24gaXMgdG8gZGlydHlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSByZW1vdmVkIGZpZWxkcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlbGV0ZShkYXRhSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFvd25TdG9yZU9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBsYXllciBoYWQgYW4gZW50cnkgZm9yIGRhdGFJZCBidXQgaXQgd2FzIHVuZGVmaW5lZCwgd2hpY2hcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lYW5zIHRoZSBlbnRpdHkgd2FzIGRlbGV0ZWQgaW4gdGhpcyBsYXllciwgYW5kIGl0J3MgYWJvdXQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlY29tZSB1bmRlbGV0ZWQgd2hlbiB3ZSByZW1vdmUgdGhpcyBsYXllciwgc28gd2UgbmVlZCB0byBkaXJ0eVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxsIGZpZWxkcyB0aGF0IGFyZSBhYm91dCB0byBiZSByZWV4cG9zZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ncm91cC5kaXJ0eShkYXRhSWQsIFwiX19leGlzdHNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhwYXJlbnRTdG9yZU9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAoc3RvcmVGaWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ncm91cC5kaXJ0eShkYXRhSWQsIHN0b3JlRmllbGROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG93blN0b3JlT2JqZWN0ICE9PSBwYXJlbnRTdG9yZU9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgb3duU3RvcmVPYmplY3QgaXMgbm90IGV4YWN0bHkgdGhlIHNhbWUgYXMgcGFyZW50U3RvcmVPYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXJ0eSBhbnkgZmllbGRzIHdob3NlIHZhbHVlcyB3aWxsIGNoYW5nZSBhcyBhIHJlc3VsdCBvZiB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmFsLlxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMob3duU3RvcmVPYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKHN0b3JlRmllbGROYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlcXVhbChvd25TdG9yZU9iamVjdFtzdG9yZUZpZWxkTmFtZV0sIHBhcmVudFN0b3JlT2JqZWN0W3N0b3JlRmllbGROYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ3JvdXAuZGlydHkoZGF0YUlkLCBzdG9yZUZpZWxkTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm8gY2hhbmdlcyBhcmUgbmVjZXNzYXJ5IGlmIHRoZSBwYXJlbnQgY2hhaW4gcmVtYWlucyBpZGVudGljYWwuXG4gICAgICAgIGlmIChwYXJlbnQgPT09IHRoaXMucGFyZW50KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIC8vIFJlY3JlYXRlIHRoaXMgbGF5ZXIgb24gdG9wIG9mIHRoZSBuZXcgcGFyZW50LlxuICAgICAgICByZXR1cm4gcGFyZW50LmFkZExheWVyKHRoaXMuaWQsIHRoaXMucmVwbGF5KTtcbiAgICB9O1xuICAgIExheWVyLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLnBhcmVudC50b09iamVjdCgpKSwgdGhpcy5kYXRhKTtcbiAgICB9O1xuICAgIExheWVyLnByb3RvdHlwZS5maW5kQ2hpbGRSZWZJZHMgPSBmdW5jdGlvbiAoZGF0YUlkKSB7XG4gICAgICAgIHZhciBmcm9tUGFyZW50ID0gdGhpcy5wYXJlbnQuZmluZENoaWxkUmVmSWRzKGRhdGFJZCk7XG4gICAgICAgIHJldHVybiBoYXNPd24uY2FsbCh0aGlzLmRhdGEsIGRhdGFJZCkgPyBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZnJvbVBhcmVudCksIF9zdXBlci5wcm90b3R5cGUuZmluZENoaWxkUmVmSWRzLmNhbGwodGhpcywgZGF0YUlkKSkgOiBmcm9tUGFyZW50O1xuICAgIH07XG4gICAgTGF5ZXIucHJvdG90eXBlLmdldFN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgIHdoaWxlIChwLnBhcmVudClcbiAgICAgICAgICAgIHAgPSBwLnBhcmVudDtcbiAgICAgICAgcmV0dXJuIHAuZ2V0U3RvcmFnZS5hcHBseShwLCBcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgcmV0dXJuIExheWVyO1xufShFbnRpdHlTdG9yZSkpO1xuLy8gUmVwcmVzZW50cyBhIExheWVyIHBlcm1hbmVudGx5IGluc3RhbGxlZCBqdXN0IGFib3ZlIHRoZSBSb290LCB3aGljaCBhbGxvd3Ncbi8vIHJlYWRpbmcgb3B0aW1pc3RpY2FsbHkgKGFuZCByZWdpc3RlcmluZyBvcHRpbWlzdGljIGRlcGVuZGVuY2llcykgZXZlbiB3aGVuXG4vLyBubyBvcHRpbWlzdGljIGxheWVycyBhcmUgY3VycmVudGx5IGFjdGl2ZS4gVGhlIHN0dW1wLmdyb3VwIENhY2hlR3JvdXAgb2JqZWN0XG4vLyBpcyBzaGFyZWQgYnkgYW55L2FsbCBMYXllciBvYmplY3RzIGFkZGVkIG9uIHRvcCBvZiB0aGUgU3R1bXAuXG52YXIgU3R1bXAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN0dW1wLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN0dW1wKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiRW50aXR5U3RvcmUuU3R1bXBcIiwgcm9vdCwgZnVuY3Rpb24gKCkgeyB9LCBuZXcgQ2FjaGVHcm91cChyb290Lmdyb3VwLmNhY2hpbmcsIHJvb3QuZ3JvdXApKSB8fCB0aGlzO1xuICAgIH1cbiAgICBTdHVtcC5wcm90b3R5cGUucmVtb3ZlTGF5ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIE5ldmVyIHJlbW92ZSB0aGUgU3R1bXAgbGF5ZXIuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgU3R1bXAucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKG9sZGVyLCBuZXdlcikge1xuICAgICAgICAvLyBXZSBuZXZlciB3YW50IHRvIHdyaXRlIGFueSBkYXRhIGludG8gdGhlIFN0dW1wLCBzbyB3ZSBmb3J3YXJkIGFueSBtZXJnZVxuICAgICAgICAvLyBjYWxscyB0byB0aGUgUm9vdCBpbnN0ZWFkLiBBbm90aGVyIG9wdGlvbiBoZXJlIHdvdWxkIGJlIHRvIHRocm93IGFuXG4gICAgICAgIC8vIGV4Y2VwdGlvbiwgYnV0IHRoZSB0b1JlZmVyZW5jZShvYmplY3QsIHRydWUpIGZ1bmN0aW9uIGNhbiBzb21ldGltZXNcbiAgICAgICAgLy8gdHJpZ2dlciBTdHVtcCB3cml0ZXMgKHdoaWNoIHVzZWQgdG8gYmUgUm9vdCB3cml0ZXMsIGJlZm9yZSB0aGUgU3R1bXBcbiAgICAgICAgLy8gY29uY2VwdCB3YXMgaW50cm9kdWNlZCkuXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5tZXJnZShvbGRlciwgbmV3ZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIFN0dW1wO1xufShMYXllcikpO1xuZnVuY3Rpb24gc3RvcmVPYmplY3RSZWNvbmNpbGVyKGV4aXN0aW5nT2JqZWN0LCBpbmNvbWluZ09iamVjdCwgcHJvcGVydHkpIHtcbiAgICB2YXIgZXhpc3RpbmdWYWx1ZSA9IGV4aXN0aW5nT2JqZWN0W3Byb3BlcnR5XTtcbiAgICB2YXIgaW5jb21pbmdWYWx1ZSA9IGluY29taW5nT2JqZWN0W3Byb3BlcnR5XTtcbiAgICAvLyBXaGVyZXZlciB0aGVyZSBpcyBhIGtleSBjb2xsaXNpb24sIHByZWZlciB0aGUgaW5jb21pbmcgdmFsdWUsIHVubGVzc1xuICAgIC8vIGl0IGlzIGRlZXBseSBlcXVhbCB0byB0aGUgZXhpc3RpbmcgdmFsdWUuIEl0J3Mgd29ydGggY2hlY2tpbmcgZGVlcFxuICAgIC8vIGVxdWFsaXR5IGhlcmUgKGV2ZW4gdGhvdWdoIGJsaW5kbHkgcmV0dXJuaW5nIGluY29taW5nIHdvdWxkIGJlXG4gICAgLy8gbG9naWNhbGx5IGNvcnJlY3QpIGJlY2F1c2UgcHJlc2VydmluZyB0aGUgcmVmZXJlbnRpYWwgaWRlbnRpdHkgb2ZcbiAgICAvLyBleGlzdGluZyBkYXRhIGNhbiBwcmV2ZW50IG5lZWRsZXNzIHJlcmVhZGluZyBhbmQgcmVyZW5kZXJpbmcuXG4gICAgcmV0dXJuIGVxdWFsKGV4aXN0aW5nVmFsdWUsIGluY29taW5nVmFsdWUpID8gZXhpc3RpbmdWYWx1ZSA6IGluY29taW5nVmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNSZXN1bHRDYWNoaW5nKHN0b3JlKSB7XG4gICAgLy8gV2hlbiByZXN1bHQgY2FjaGluZyBpcyBkaXNhYmxlZCwgc3RvcmUuZGVwZW5kIHdpbGwgYmUgbnVsbC5cbiAgICByZXR1cm4gISEoc3RvcmUgaW5zdGFuY2VvZiBFbnRpdHlTdG9yZSAmJiBzdG9yZS5ncm91cC5jYWNoaW5nKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudGl0eVN0b3JlLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIl9fZXh0ZW5kcyIsIl9fcmVzdCIsImludmFyaWFudCIsImRlcCIsImVxdWFsIiwiVHJpZSIsImlzUmVmZXJlbmNlIiwibWFrZVJlZmVyZW5jZSIsIkRlZXBNZXJnZXIiLCJtYXliZURlZXBGcmVlemUiLCJjYW5Vc2VXZWFrTWFwIiwiaXNOb25OdWxsT2JqZWN0IiwiaGFzT3duIiwiZmllbGROYW1lRnJvbVN0b3JlTmFtZSIsIkRFTEVURSIsIk9iamVjdCIsImNyZWF0ZSIsImRlbE1vZGlmaWVyIiwiSU5WQUxJREFURSIsIkVudGl0eVN0b3JlIiwicG9saWNpZXMiLCJncm91cCIsIl90aGlzIiwiZGF0YSIsInJvb3RJZHMiLCJyZWZzIiwiZ2V0RmllbGRWYWx1ZSIsIm9iamVjdE9yUmVmZXJlbmNlIiwic3RvcmVGaWVsZE5hbWUiLCJnZXQiLCJfX3JlZiIsImNhblJlYWQiLCJvYmpPclJlZiIsImhhcyIsInRvUmVmZXJlbmNlIiwib2JqT3JJZE9yUmVmIiwibWVyZ2VJbnRvU3RvcmUiLCJpZCIsImlkZW50aWZ5IiwicmVmIiwibWVyZ2UiLCJwcm90b3R5cGUiLCJ0b09iamVjdCIsImRhdGFJZCIsImxvb2t1cCIsImZpZWxkTmFtZSIsImRlcGVuZCIsImNhbGwiLCJzdG9yZU9iamVjdCIsInJvb3RUeXBlbmFtZXNCeUlkIiwiTGF5ZXIiLCJwYXJlbnQiLCJkZXBlbmRPbkV4aXN0ZW5jZSIsIm9sZGVyIiwibmV3ZXIiLCJleGlzdGluZyIsImluY29taW5nIiwibWVyZ2VkIiwic3RvcmVPYmplY3RSZWNvbmNpbGVyIiwiY2FjaGluZyIsImZpZWxkc1RvRGlydHlfMSIsIl9fZXhpc3RzIiwia2V5cyIsImZvckVhY2giLCJoYXNLZXlBcmdzIiwiX190eXBlbmFtZSIsImRpcnR5IiwibW9kaWZ5IiwiZmllbGRzIiwiY2hhbmdlZEZpZWxkc18xIiwibmVlZFRvTWVyZ2VfMSIsImFsbERlbGV0ZWRfMSIsInNoYXJlZERldGFpbHNfMSIsInJlYWRGaWVsZCIsImZpZWxkTmFtZU9yT3B0aW9ucyIsImZyb20iLCJzdG9yZSIsImZpZWxkVmFsdWUiLCJuZXdWYWx1ZSIsInN0b3JhZ2UiLCJnZXRTdG9yYWdlIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJjaGVja1JlZmVyZW5jZSIsInVuZGVmaW5lZCIsIndhcm4iLCJBcnJheSIsImlzQXJyYXkiLCJzZWVuUmVmZXJlbmNlIiwic29tZU5vblJlZmVyZW5jZSIsIl9pIiwibmV3VmFsdWVfMSIsImxlbmd0aCIsInZhbHVlIiwiZGVsZXRlIiwiYXJncyIsIl9hIiwidHlwZW5hbWUiLCJnZXRTdG9yZUZpZWxkTmFtZSIsImV2aWN0Iiwib3B0aW9ucyIsImxpbWl0IiwiZXZpY3RlZCIsImNsZWFyIiwicmVwbGFjZSIsImV4dHJhY3QiLCJvYmoiLCJleHRyYVJvb3RJZHMiLCJnZXRSb290SWRTZXQiLCJwdXNoIiwiX19NRVRBIiwic29ydCIsIm5ld0RhdGEiLCJyZXN0XzEiLCJyZXRhaW4iLCJyb290SWQiLCJyZWxlYXNlIiwiY291bnQiLCJpZHMiLCJTZXQiLCJhZGQiLCJnYyIsInNuYXBzaG90IiwiZmluZENoaWxkUmVmSWRzIiwiaWRzVG9SZW1vdmUiLCJyb290XzEiLCJmb3VuZF8xIiwicm9vdCIsIndvcmtTZXRfMSIsImtleSIsImNoaWxkIiwibWFrZUNhY2hlS2V5Iiwia2V5TWFrZXIiLCJsb29rdXBBcnJheSIsImFyZ3VtZW50cyIsIkNhY2hlR3JvdXAiLCJkIiwicmVzZXRDYWNoaW5nIiwibWFrZURlcEtleSIsIm1heWJlRGVwZW5kT25FeGlzdGVuY2VPZkVudGl0eSIsImVudGl0eUlkIiwic3VwcG9ydHNSZXN1bHRDYWNoaW5nIiwiUm9vdCIsIl9zdXBlciIsIl9iIiwicmVzdWx0Q2FjaGluZyIsInNlZWQiLCJzdHVtcCIsIlN0dW1wIiwic3RvcmFnZVRyaWUiLCJhZGRMYXllciIsImxheWVySWQiLCJyZXBsYXkiLCJyZW1vdmVMYXllciIsIm93blN0b3JlT2JqZWN0IiwicGFyZW50U3RvcmVPYmplY3QiLCJmcm9tUGFyZW50IiwicCIsImFwcGx5IiwiZXhpc3RpbmdPYmplY3QiLCJpbmNvbWluZ09iamVjdCIsInByb3BlcnR5IiwiZXhpc3RpbmdWYWx1ZSIsImluY29taW5nVmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/fragmentRegistry.js":
/*!************************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/fragmentRegistry.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFragmentRegistry: () => (/* binding */ createFragmentRegistry)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n\n\n\n\n\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nfunction createFragmentRegistry() {\n    var fragments = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        fragments[_i] = arguments[_i];\n    }\n    return new (FragmentRegistry.bind.apply(FragmentRegistry, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        void 0\n    ], fragments, false)))();\n}\nvar FragmentRegistry = /** @class */ function() {\n    // Call `createFragmentRegistry` instead of invoking the\n    // FragmentRegistry constructor directly. This reserves the constructor for\n    // future configuration of the FragmentRegistry.\n    function FragmentRegistry() {\n        var fragments = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            fragments[_i] = arguments[_i];\n        }\n        this.registry = Object.create(null);\n        this.resetCaches();\n        if (fragments.length) {\n            this.register.apply(this, fragments);\n        }\n    }\n    FragmentRegistry.prototype.register = function() {\n        var _this = this;\n        var fragments = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            fragments[_i] = arguments[_i];\n        }\n        var definitions = new Map();\n        fragments.forEach(function(doc) {\n            (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(doc).forEach(function(node) {\n                definitions.set(node.name.value, node);\n            });\n        });\n        definitions.forEach(function(node, name) {\n            if (node !== _this.registry[name]) {\n                _this.registry[name] = node;\n                _this.invalidate(name);\n            }\n        });\n        return this;\n    };\n    // Overridden in the resetCaches method below.\n    FragmentRegistry.prototype.invalidate = function(name) {};\n    FragmentRegistry.prototype.resetCaches = function() {\n        var proto = FragmentRegistry.prototype;\n        this.invalidate = (this.lookup = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)(proto.lookup.bind(this), {\n            makeCacheKey: function(arg) {\n                return arg;\n            },\n            max: _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.cacheSizes[\"fragmentRegistry.lookup\"] || 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */ \n        })).dirty; // This dirty function is bound to the wrapped lookup method.\n        this.transform = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)(proto.transform.bind(this), {\n            cache: _wry_caches__WEBPACK_IMPORTED_MODULE_4__.WeakCache,\n            max: _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.cacheSizes[\"fragmentRegistry.transform\"] || 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */ \n        });\n        this.findFragmentSpreads = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)(proto.findFragmentSpreads.bind(this), {\n            cache: _wry_caches__WEBPACK_IMPORTED_MODULE_4__.WeakCache,\n            max: _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.cacheSizes[\"fragmentRegistry.findFragmentSpreads\"] || 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */ \n        });\n    };\n    /*\n     * Note:\n     * This method is only memoized so it can serve as a dependency to `tranform`,\n     * so calling `invalidate` will invalidate cache entries for `transform`.\n     */ FragmentRegistry.prototype.lookup = function(fragmentName) {\n        return this.registry[fragmentName] || null;\n    };\n    FragmentRegistry.prototype.transform = function(document) {\n        var _this = this;\n        var defined = new Map();\n        (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(document).forEach(function(def) {\n            defined.set(def.name.value, def);\n        });\n        var unbound = new Set();\n        var enqueue = function(spreadName) {\n            if (!defined.has(spreadName)) {\n                unbound.add(spreadName);\n            }\n        };\n        var enqueueChildSpreads = function(node) {\n            return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\n        };\n        enqueueChildSpreads(document);\n        var missing = [];\n        var map = Object.create(null);\n        // This Set forEach loop can be extended during iteration by adding\n        // additional strings to the unbound set.\n        unbound.forEach(function(fragmentName) {\n            var knownFragmentDef = defined.get(fragmentName);\n            if (knownFragmentDef) {\n                enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n            } else {\n                missing.push(fragmentName);\n                var def = _this.lookup(fragmentName);\n                if (def) {\n                    enqueueChildSpreads(map[fragmentName] = def);\n                }\n            }\n        });\n        if (missing.length) {\n            var defsToAppend_1 = [];\n            missing.forEach(function(name) {\n                var def = map[name];\n                if (def) {\n                    defsToAppend_1.push(def);\n                }\n            });\n            if (defsToAppend_1.length) {\n                document = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, document), {\n                    definitions: document.definitions.concat(defsToAppend_1)\n                });\n            }\n        }\n        return document;\n    };\n    FragmentRegistry.prototype.findFragmentSpreads = function(root) {\n        var spreads = Object.create(null);\n        (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(root, {\n            FragmentSpread: function(node) {\n                spreads[node.name.value] = node;\n            }\n        });\n        return spreads;\n    };\n    return FragmentRegistry;\n}(); //# sourceMappingURL=fragmentRegistry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/fragmentRegistry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/helpers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOrFieldNameRegExp: () => (/* binding */ TypeOrFieldNameRegExp),\n/* harmony export */   defaultDataIdFromObject: () => (/* binding */ defaultDataIdFromObject),\n/* harmony export */   extractFragmentContext: () => (/* binding */ extractFragmentContext),\n/* harmony export */   fieldNameFromStoreName: () => (/* binding */ fieldNameFromStoreName),\n/* harmony export */   getTypenameFromStoreObject: () => (/* binding */ getTypenameFromStoreObject),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isArray: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray),\n/* harmony export */   isNullish: () => (/* binding */ isNullish),\n/* harmony export */   makeProcessedFieldsMerger: () => (/* binding */ makeProcessedFieldsMerger),\n/* harmony export */   normalizeConfig: () => (/* binding */ normalizeConfig),\n/* harmony export */   selectionSetMatchesResult: () => (/* binding */ selectionSetMatchesResult),\n/* harmony export */   shouldCanonizeResults: () => (/* binding */ shouldCanonizeResults),\n/* harmony export */   storeValueIsStoreObject: () => (/* binding */ storeValueIsStoreObject)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction isNullish(value) {\n    return value === null || value === void 0;\n}\n\nfunction defaultDataIdFromObject(_a, context) {\n    var __typename = _a.__typename, id = _a.id, _id = _a._id;\n    if (typeof __typename === \"string\") {\n        if (context) {\n            context.keyObject = !isNullish(id) ? {\n                id: id\n            } : !isNullish(_id) ? {\n                _id: _id\n            } : void 0;\n        }\n        // If there is no object.id, fall back to object._id.\n        if (isNullish(id) && !isNullish(_id)) {\n            id = _id;\n        }\n        if (!isNullish(id)) {\n            return \"\".concat(__typename, \":\").concat(typeof id === \"number\" || typeof id === \"string\" ? id : JSON.stringify(id));\n        }\n    }\n}\nvar defaultConfig = {\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    // Thanks to the shouldCanonizeResults helper, this should be the only line\n    // you have to change to reenable canonization by default in the future.\n    canonizeResults: false\n};\nfunction normalizeConfig(config) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.compact)(defaultConfig, config);\n}\nfunction shouldCanonizeResults(config) {\n    var value = config.canonizeResults;\n    return value === void 0 ? defaultConfig.canonizeResults : value;\n}\nfunction getTypenameFromStoreObject(store, objectOrReference) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nvar TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nfunction fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(TypeOrFieldNameRegExp);\n    return match ? match[0] : storeFieldName;\n}\nfunction selectionSetMatchesResult(selectionSet, result, variables) {\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(result)) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(result) ? result.every(function(item) {\n            return selectionSetMatchesResult(selectionSet, item, variables);\n        }) : selectionSet.selections.every(function(field) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isField)(field) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(field, variables)) {\n                var key = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.resultKeyNameFromField)(field);\n                return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n            }\n            // If the selection has been skipped with @skip(true) or\n            // @include(false), it should not count against the matching. If\n            // the selection is not a field, it must be a fragment (inline or\n            // named). We will determine if selectionSetMatchesResult for that\n            // fragment when we get to it, so for now we return true.\n            return true;\n        });\n    }\n    return false;\n}\nfunction storeValueIsStoreObject(value) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(value);\n}\nfunction makeProcessedFieldsMerger() {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();\n}\nfunction extractFragmentContext(document, fragments) {\n    // FragmentMap consisting only of fragments defined directly in document, not\n    // including other fragments registered in the FragmentRegistry.\n    var fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentDefinitions)(document));\n    return {\n        fragmentMap: fragmentMap,\n        lookupFragment: function(name) {\n            var def = fragmentMap[name];\n            if (!def && fragments) {\n                def = fragments.lookup(name);\n            }\n            return def || null;\n        }\n    };\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _core_cache_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../core/cache.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/cache.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../core/types/common.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _readFromStore_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./readFromStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js\");\n/* harmony import */ var _writeToStore_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./writeToStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./entityStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reactiveVars.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar InMemoryCache = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) {\n            config = {};\n        }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.addTypenameTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DocumentTransform(_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.addTypenameToDocument);\n        // Override the default value, since InMemoryCache result objects are frozen\n        // in development and expected to remain logically immutable in production.\n        _this.assumeImmutableResults = true;\n        _this.makeVar = _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.makeVar;\n        _this.txCount = 0;\n        _this.config = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.normalizeConfig)(config);\n        _this.addTypename = !!_this.config.addTypename;\n        _this.policies = new _policies_js__WEBPACK_IMPORTED_MODULE_8__.Policies({\n            cache: _this,\n            dataIdFromObject: _this.config.dataIdFromObject,\n            possibleTypes: _this.config.possibleTypes,\n            typePolicies: _this.config.typePolicies\n        });\n        _this.init();\n        return _this;\n    }\n    InMemoryCache.prototype.init = function() {\n        // Passing { resultCaching: false } in the InMemoryCache constructor options\n        // will completely disable dependency tracking, which will improve memory\n        // usage but worsen the performance of repeated reads.\n        var rootStore = this.data = new _entityStore_js__WEBPACK_IMPORTED_MODULE_9__.EntityStore.Root({\n            policies: this.policies,\n            resultCaching: this.config.resultCaching\n        });\n        // When no optimistic writes are currently active, cache.optimisticData ===\n        // cache.data, so there are no additional layers on top of the actual data.\n        // When an optimistic update happens, this.optimisticData will become a\n        // linked list of EntityStore Layer objects that terminates with the\n        // original this.data cache object.\n        this.optimisticData = rootStore.stump;\n        this.resetResultCache();\n    };\n    InMemoryCache.prototype.resetResultCache = function(resetResultIdentities) {\n        var _this = this;\n        var previousReader = this.storeReader;\n        var fragments = this.config.fragments;\n        // The StoreWriter is mostly stateless and so doesn't really need to be\n        // reset, but it does need to have its writer.storeReader reference updated,\n        // so it's simpler to update this.storeWriter as well.\n        this.storeWriter = new _writeToStore_js__WEBPACK_IMPORTED_MODULE_10__.StoreWriter(this, this.storeReader = new _readFromStore_js__WEBPACK_IMPORTED_MODULE_11__.StoreReader({\n            cache: this,\n            addTypename: this.addTypename,\n            resultCacheMaxSize: this.config.resultCacheMaxSize,\n            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.shouldCanonizeResults)(this.config),\n            canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon,\n            fragments: fragments\n        }), fragments);\n        this.maybeBroadcastWatch = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(c, options) {\n            return _this.broadcastWatch(c, options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] || 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n            makeCacheKey: function(c) {\n                // Return a cache key (thus enabling result caching) only if we're\n                // currently using a data store that can track cache dependencies.\n                var store = c.optimistic ? _this.optimisticData : _this.data;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_9__.supportsResultCaching)(store)) {\n                    var optimistic = c.optimistic, id = c.id, variables = c.variables;\n                    return store.makeCacheKey(c.query, // Different watches can have the same query, optimistic\n                    // status, rootId, and variables, but if their callbacks are\n                    // different, the (identical) result needs to be delivered to\n                    // each distinct callback. The easiest way to achieve that\n                    // separation is to include c.callback in the cache key for\n                    // maybeBroadcastWatch calls. See issue #5733.\n                    c.callback, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.canonicalStringify)({\n                        optimistic: optimistic,\n                        id: id,\n                        variables: variables\n                    }));\n                }\n            }\n        });\n        // Since we have thrown away all the cached functions that depend on the\n        // CacheGroup dependencies maintained by EntityStore, we should also reset\n        // all CacheGroup dependency information.\n        new Set([\n            this.data.group,\n            this.optimisticData.group\n        ]).forEach(function(group) {\n            return group.resetCaching();\n        });\n    };\n    InMemoryCache.prototype.restore = function(data) {\n        this.init();\n        // Since calling this.init() discards/replaces the entire StoreReader, along\n        // with the result caches it maintains, this.data.replace(data) won't have\n        // to bother deleting the old data.\n        if (data) this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function(optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return (optimistic ? this.optimisticData : this.data).extract();\n    };\n    InMemoryCache.prototype.read = function(options) {\n        var // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        _a = options.returnPartialData, // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        returnPartialData = _a === void 0 ? false : _a;\n        try {\n            return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                store: options.optimistic ? this.optimisticData : this.data,\n                config: this.config,\n                returnPartialData: returnPartialData\n            })).result || null;\n        } catch (e) {\n            if (e instanceof _core_types_common_js__WEBPACK_IMPORTED_MODULE_14__.MissingFieldError) {\n                // Swallow MissingFieldError and return null, so callers do not need to\n                // worry about catching \"normal\" exceptions resulting from incomplete\n                // cache data. Unexpected errors will be re-thrown. If you need more\n                // information about which fields were missing, use cache.diff instead,\n                // and examine diffResult.missing.\n                return null;\n            }\n            throw e;\n        }\n    };\n    InMemoryCache.prototype.write = function(options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore(this.data, options);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.modify = function(options) {\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(options, \"id\") && !options.id) {\n            // To my knowledge, TypeScript does not currently provide a way to\n            // enforce that an optional property?:type must *not* be undefined\n            // when present. That ability would be useful here, because we want\n            // options.id to default to ROOT_QUERY only when no options.id was\n            // provided. If the caller attempts to pass options.id with a\n            // falsy/undefined value (perhaps because cache.identify failed), we\n            // should not assume the goal was to modify the ROOT_QUERY object.\n            // We could throw, but it seems natural to return false to indicate\n            // that nothing was modified.\n            return false;\n        }\n        var store = options.optimistic // Defaults to false.\n         ? this.optimisticData : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.diff = function(options) {\n        return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n            store: options.optimistic ? this.optimisticData : this.data,\n            rootId: options.id || \"ROOT_QUERY\",\n            config: this.config\n        }));\n    };\n    InMemoryCache.prototype.watch = function(watch) {\n        var _this = this;\n        if (!this.watches.size) {\n            // In case we previously called forgetCache(this) because\n            // this.watches became empty (see below), reattach this cache to any\n            // reactive variables on which it previously depended. It might seem\n            // paradoxical that we're able to recall something we supposedly\n            // forgot, but the point of calling forgetCache(this) is to silence\n            // useless broadcasts while this.watches is empty, and to allow the\n            // cache to be garbage collected. If, however, we manage to call\n            // recallCache(this) here, this cache object must not have been\n            // garbage collected yet, and should resume receiving updates from\n            // reactive variables, now that it has a watcher to notify.\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.recallCache)(this);\n        }\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return function() {\n            // Once we remove the last watch from this.watches, cache.broadcastWatches\n            // no longer does anything, so we preemptively tell the reactive variable\n            // system to exclude this cache from future broadcasts.\n            if (_this.watches.delete(watch) && !_this.watches.size) {\n                (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.forgetCache)(_this);\n            }\n            // Remove this watch from the LRU cache managed by the\n            // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n            // leaks involving the closure of watch.callback.\n            _this.maybeBroadcastWatch.forget(watch);\n        };\n    };\n    InMemoryCache.prototype.gc = function(options) {\n        var _a;\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.canonicalStringify.reset();\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.print.reset();\n        this.addTypenameTransform.resetCache();\n        (_a = this.config.fragments) === null || _a === void 0 ? void 0 : _a.resetCaches();\n        var ids = this.optimisticData.gc();\n        if (options && !this.txCount) {\n            if (options.resetResultCache) {\n                this.resetResultCache(options.resetResultIdentities);\n            } else if (options.resetResultIdentities) {\n                this.storeReader.resetCanon();\n            }\n        }\n        return ids;\n    };\n    // Call this method to ensure the given root ID remains in the cache after\n    // garbage collection, along with its transitive child entities. Note that\n    // the cache automatically retains all directly written entities. By default,\n    // the retainment persists after optimistic updates are removed. Pass true\n    // for the optimistic argument if you would prefer for the retainment to be\n    // discarded when the top-most optimistic layer is removed. Returns the\n    // resulting (non-negative) retainment count.\n    InMemoryCache.prototype.retain = function(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    };\n    // Call this method to undo the effect of the retain method, above. Once the\n    // retainment count falls to zero, the given ID will no longer be preserved\n    // during garbage collection, though it may still be preserved by other safe\n    // entities that refer to it. Returns the resulting (non-negative) retainment\n    // count, in case that's useful.\n    InMemoryCache.prototype.release = function(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    };\n    // Returns the canonical ID for a given StoreObject, obeying typePolicies\n    // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n    // the object must contain a __typename and any primary key fields required\n    // to identify entities of that type. If you pass a query result object, be\n    // sure that none of the primary key fields have been renamed by aliasing.\n    // If you pass a Reference object, its __ref ID string will be returned.\n    InMemoryCache.prototype.identify = function(object) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_16__.isReference)(object)) return object.__ref;\n        try {\n            return this.policies.identify(object)[0];\n        } catch (e) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(e);\n        }\n    };\n    InMemoryCache.prototype.evict = function(options) {\n        if (!options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(options, \"id\")) {\n                // See comment in modify method about why we return false when\n                // options.id exists but is falsy/undefined.\n                return false;\n            }\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                id: \"ROOT_QUERY\"\n            });\n        }\n        try {\n            // It's unlikely that the eviction will end up invoking any other\n            // cache update operations while it's running, but {in,de}crementing\n            // this.txCount still seems like a good idea, for uniformity with\n            // the other update methods.\n            ++this.txCount;\n            // Pass this.data as a limit on the depth of the eviction, so evictions\n            // during optimistic updates (when this.data is temporarily set equal to\n            // this.optimisticData) do not escape their optimistic Layer.\n            return this.optimisticData.evict(options, this.data);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.reset = function(options) {\n        var _this = this;\n        this.init();\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.canonicalStringify.reset();\n        if (options && options.discardWatches) {\n            // Similar to what happens in the unsubscribe function returned by\n            // cache.watch, applied to all current watches.\n            this.watches.forEach(function(watch) {\n                return _this.maybeBroadcastWatch.forget(watch);\n            });\n            this.watches.clear();\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.forgetCache)(this);\n        } else {\n            // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n            // this.broadcastWatches() triggers a broadcast to every current watcher\n            // (letting them know their data is now missing). This default behavior is\n            // convenient because it means the watches do not have to be manually\n            // reestablished after resetting the cache. To prevent this broadcast and\n            // cancel all watches, pass true for options.discardWatches.\n            this.broadcastWatches();\n        }\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function(idToRemove) {\n        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.batch = function(options) {\n        var _this = this;\n        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;\n        var updateResult;\n        var perform = function(layer) {\n            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;\n            ++_this.txCount;\n            if (layer) {\n                _this.data = _this.optimisticData = layer;\n            }\n            try {\n                return updateResult = update(_this);\n            } finally{\n                --_this.txCount;\n                _this.data = data;\n                _this.optimisticData = optimisticData;\n            }\n        };\n        var alreadyDirty = new Set();\n        if (onWatchUpdated && !this.txCount) {\n            // If an options.onWatchUpdated callback is provided, we want to call it\n            // with only the Cache.WatchOptions objects affected by options.update,\n            // but there might be dirty watchers already waiting to be broadcast that\n            // have nothing to do with the update. To prevent including those watchers\n            // in the post-update broadcast, we perform this initial broadcast to\n            // collect the dirty watchers, so we can re-dirty them later, after the\n            // post-update broadcast, allowing them to receive their pending\n            // broadcasts the next time broadcastWatches is called, just as they would\n            // if we never called cache.batch.\n            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                onWatchUpdated: function(watch) {\n                    alreadyDirty.add(watch);\n                    return false;\n                }\n            }));\n        }\n        if (typeof optimistic === \"string\") {\n            // Note that there can be multiple layers with the same optimistic ID.\n            // When removeOptimistic(id) is called for that id, all matching layers\n            // will be removed, and the remaining layers will be reapplied.\n            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n        } else if (optimistic === false) {\n            // Ensure both this.data and this.optimisticData refer to the root\n            // (non-optimistic) layer of the cache during the update. Note that\n            // this.data could be a Layer if we are currently executing an optimistic\n            // update function, but otherwise will always be an EntityStore.Root\n            // instance.\n            perform(this.data);\n        } else {\n            // Otherwise, leave this.data and this.optimisticData unchanged and run\n            // the update with broadcast batching.\n            perform();\n        }\n        if (typeof removeOptimistic === \"string\") {\n            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n        }\n        // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n        // takes the else branch and calls this.broadcastWatches(options), which\n        // does nothing when this.txCount > 0.\n        if (onWatchUpdated && alreadyDirty.size) {\n            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                onWatchUpdated: function(watch, diff) {\n                    var result = onWatchUpdated.call(this, watch, diff);\n                    if (result !== false) {\n                        // Since onWatchUpdated did not return false, this diff is\n                        // about to be broadcast to watch.callback, so we don't need\n                        // to re-dirty it with the other alreadyDirty watches below.\n                        alreadyDirty.delete(watch);\n                    }\n                    return result;\n                }\n            }));\n            // Silently re-dirty any watches that were already dirty before the update\n            // was performed, and were not broadcast just now.\n            if (alreadyDirty.size) {\n                alreadyDirty.forEach(function(watch) {\n                    return _this.maybeBroadcastWatch.dirty(watch);\n                });\n            }\n        } else {\n            // If alreadyDirty is empty or we don't have an onWatchUpdated\n            // function, we don't need to go to the trouble of wrapping\n            // options.onWatchUpdated.\n            this.broadcastWatches(options);\n        }\n        return updateResult;\n    };\n    InMemoryCache.prototype.performTransaction = function(update, optimisticId) {\n        return this.batch({\n            update: update,\n            optimistic: optimisticId || optimisticId !== null\n        });\n    };\n    InMemoryCache.prototype.transformDocument = function(document) {\n        return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n    };\n    InMemoryCache.prototype.broadcastWatches = function(options) {\n        var _this = this;\n        if (!this.txCount) {\n            this.watches.forEach(function(c) {\n                return _this.maybeBroadcastWatch(c, options);\n            });\n        }\n    };\n    InMemoryCache.prototype.addFragmentsToDocument = function(document) {\n        var fragments = this.config.fragments;\n        return fragments ? fragments.transform(document) : document;\n    };\n    InMemoryCache.prototype.addTypenameToDocument = function(document) {\n        if (this.addTypename) {\n            return this.addTypenameTransform.transformDocument(document);\n        }\n        return document;\n    };\n    // This method is wrapped by maybeBroadcastWatch, which is called by\n    // broadcastWatches, so that we compute and broadcast results only when\n    // the data that would be broadcast might have changed. It would be\n    // simpler to check for changes after recomputing a result but before\n    // broadcasting it, but this wrapping approach allows us to skip both\n    // the recomputation and the broadcast, in most cases.\n    InMemoryCache.prototype.broadcastWatch = function(c, options) {\n        var lastDiff = c.lastDiff;\n        // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n        // currently requires no additional properties, so we can use c (a\n        // WatchOptions object) as DiffOptions, without having to allocate a new\n        // object, and without having to enumerate the relevant properties (query,\n        // variables, etc.) explicitly. There will be some additional properties\n        // (lastDiff, callback, etc.), but cache.diff ignores them.\n        var diff = this.diff(c);\n        if (options) {\n            if (c.optimistic && typeof options.optimistic === \"string\") {\n                diff.fromOptimisticTransaction = true;\n            }\n            if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n                // Returning false from the onWatchUpdated callback will prevent\n                // calling c.callback(diff) for this watcher.\n                return;\n            }\n        }\n        if (!lastDiff || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(lastDiff.result, diff.result)) {\n            c.callback(c.lastDiff = diff, lastDiff);\n        }\n    };\n    return InMemoryCache;\n}(_core_cache_js__WEBPACK_IMPORTED_MODULE_17__.ApolloCache);\n\nif (globalThis.__DEV__ !== false) {\n    InMemoryCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_18__.getInMemoryCacheMemoryInternals;\n} //# sourceMappingURL=inMemoryCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/key-extractor.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectSpecifierPaths: () => (/* binding */ collectSpecifierPaths),\n/* harmony export */   extractKeyPath: () => (/* binding */ extractKeyPath),\n/* harmony export */   getSpecifierPaths: () => (/* binding */ getSpecifierPaths),\n/* harmony export */   keyArgsFnFromSpecifier: () => (/* binding */ keyArgsFnFromSpecifier),\n/* harmony export */   keyFieldsFnFromSpecifier: () => (/* binding */ keyFieldsFnFromSpecifier)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n    // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n    // just arrays of strings or nested KeySpecifier arrays, and the order of the\n    // array elements is important (and suitably preserved by JSON.stringify).\n    var cacheKey = JSON.stringify(spec);\n    return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\nfunction keyFieldsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyFieldsFn || (info.keyFieldsFn = function(object, context) {\n        var extract = function(from, key) {\n            return context.readField(key, from);\n        };\n        var keyObject = context.keyObject = collectSpecifierPaths(specifier, function(schemaKeyPath) {\n            var extracted = extractKeyPath(context.storeObject, schemaKeyPath, // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract);\n            if (extracted === void 0 && object !== context.storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(object, schemaKeyPath[0])) {\n                // If context.storeObject fails to provide a value for the requested\n                // path, fall back to the raw result object, if it has a top-level key\n                // matching the first key in the path (schemaKeyPath[0]). This allows\n                // key fields included in the written data to be saved in the cache\n                // even if they are not selected explicitly in context.selectionSet.\n                // Not being mentioned by context.selectionSet is convenient here,\n                // since it means these extra fields cannot be affected by field\n                // aliasing, which is why we can use extractKey instead of\n                // context.readField for this extraction.\n                extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n            }\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(extracted !== void 0, 4, schemaKeyPath.join(\".\"), object);\n            return extracted;\n        });\n        return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n    });\n}\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nfunction keyArgsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyArgsFn || (info.keyArgsFn = function(args, _a) {\n        var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;\n        var collected = collectSpecifierPaths(specifier, function(keyPath) {\n            var firstKey = keyPath[0];\n            var firstChar = firstKey.charAt(0);\n            if (firstChar === \"@\") {\n                if (field && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(field.directives)) {\n                    var directiveName_1 = firstKey.slice(1);\n                    // If the directive appears multiple times, only the first\n                    // occurrence's arguments will be used. TODO Allow repetition?\n                    // TODO Cache this work somehow, a la aliasMap?\n                    var d = field.directives.find(function(d) {\n                        return d.name.value === directiveName_1;\n                    });\n                    // Fortunately argumentsObjectFromField works for DirectiveNode!\n                    var directiveArgs = d && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.argumentsObjectFromField)(d, variables);\n                    // For directives without arguments (d defined, but directiveArgs ===\n                    // null), the presence or absence of the directive still counts as\n                    // part of the field key, so we return null in those cases. If no\n                    // directive with this name was found for this field (d undefined and\n                    // thus directiveArgs undefined), we return undefined, which causes\n                    // this value to be omitted from the key object returned by\n                    // collectSpecifierPaths.\n                    return directiveArgs && extractKeyPath(directiveArgs, // If keyPath.length === 1, this code calls extractKeyPath with an\n                    // empty path, which works because it uses directiveArgs as the\n                    // extracted value.\n                    keyPath.slice(1));\n                }\n                // If the key started with @ but there was no corresponding directive,\n                // we want to omit this value from the key object, not fall through to\n                // treating @whatever as a normal argument name.\n                return;\n            }\n            if (firstChar === \"$\") {\n                var variableName = firstKey.slice(1);\n                if (variables && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(variables, variableName)) {\n                    var varKeyPath = keyPath.slice(0);\n                    varKeyPath[0] = variableName;\n                    return extractKeyPath(variables, varKeyPath);\n                }\n                // If the key started with $ but there was no corresponding variable, we\n                // want to omit this value from the key object, not fall through to\n                // treating $whatever as a normal argument name.\n                return;\n            }\n            if (args) {\n                return extractKeyPath(args, keyPath);\n            }\n        });\n        var suffix = JSON.stringify(collected);\n        // If no arguments were passed to this field, and it didn't have any other\n        // field key contributions from directives or variables, hide the empty\n        // :{} suffix from the field key. However, a field passed no arguments can\n        // still end up with a non-empty :{...} suffix if its key configuration\n        // refers to directives or variables.\n        if (args || suffix !== \"{}\") {\n            fieldName += \":\" + suffix;\n        }\n        return fieldName;\n    });\n}\nfunction collectSpecifierPaths(specifier, extractor) {\n    // For each path specified by specifier, invoke the extractor, and repeatedly\n    // merge the results together, with appropriate ancestor context.\n    var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DeepMerger();\n    return getSpecifierPaths(specifier).reduce(function(collected, path) {\n        var _a;\n        var toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            // This path is not expected to contain array indexes, so the toMerge\n            // reconstruction will not contain arrays. TODO Fix this?\n            for(var i = path.length - 1; i >= 0; --i){\n                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, Object.create(null));\n}\nfunction getSpecifierPaths(spec) {\n    var info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        var paths_1 = info.paths = [];\n        var currentPath_1 = [];\n        spec.forEach(function(s, i) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(s)) {\n                getSpecifierPaths(s).forEach(function(p) {\n                    return paths_1.push(currentPath_1.concat(p));\n                });\n                currentPath_1.length = 0;\n            } else {\n                currentPath_1.push(s);\n                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(spec[i + 1])) {\n                    paths_1.push(currentPath_1.slice(0));\n                    currentPath_1.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nfunction extractKeyPath(object, path, extract) {\n    // For each key in path, extract the corresponding child property from obj,\n    // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n    // possible). The final result of path.reduce is normalized so unexpected leaf\n    // objects have their keys safely sorted. That final result is difficult to\n    // type as anything other than any. You're welcome to try to improve the\n    // return type, but keep in mind extractKeyPath is not a public function\n    // (exported only for testing), so the effort may not be worthwhile unless the\n    // limited set of actual callers (see above) pass arguments that TypeScript\n    // can statically type. If we know only that path is some array of strings\n    // (and not, say, a specific tuple of statically known strings), any (or\n    // possibly unknown) is the honest answer.\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj) ? obj.map(function(child) {\n            return reducer(child, key);\n        }) : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    // Usually the extracted value will be a scalar value, since most primary\n    // key fields are scalar, but just in case we get an object or an array, we\n    // need to do some normalization of the order of (nested) keys.\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isNonNullObject)(value)) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), function(path) {\n            return extractKeyPath(value, path);\n        });\n    }\n    return value;\n} //# sourceMappingURL=key-extractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/object-canon.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectCanon: () => (/* binding */ ObjectCanon)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\nfunction shallowCopy(value) {\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n        return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value) ? value.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            __proto__: Object.getPrototypeOf(value)\n        }, value);\n    }\n    return value;\n}\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nvar ObjectCanon = /** @class */ function() {\n    function ObjectCanon() {\n        // Set of all canonical objects this ObjectCanon has admitted, allowing\n        // canon.admit to return previously-canonicalized objects immediately.\n        this.known = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakSet ? WeakSet : Set)();\n        // Efficient storage/lookup structure for canonical objects.\n        this.pool = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakMap);\n        // Make the ObjectCanon assume this value has already been\n        // canonicalized.\n        this.passes = new WeakMap();\n        // Arrays that contain the same elements in a different order can share\n        // the same SortedKeysInfo object, to save memory.\n        this.keysByJSON = new Map();\n        // This has to come last because it depends on keysByJSON.\n        this.empty = this.admit({});\n    }\n    ObjectCanon.prototype.isKnown = function(value) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && this.known.has(value);\n    };\n    ObjectCanon.prototype.pass = function(value) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n            var copy = shallowCopy(value);\n            this.passes.set(copy, value);\n            return copy;\n        }\n        return value;\n    };\n    ObjectCanon.prototype.admit = function(value) {\n        var _this = this;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n            var original = this.passes.get(value);\n            if (original) return original;\n            var proto = Object.getPrototypeOf(value);\n            switch(proto){\n                case Array.prototype:\n                    {\n                        if (this.known.has(value)) return value;\n                        var array = value.map(this.admit, this);\n                        // Arrays are looked up in the Trie using their recursively\n                        // canonicalized elements, and the known version of the array is\n                        // preserved as node.array.\n                        var node = this.pool.lookupArray(array);\n                        if (!node.array) {\n                            this.known.add(node.array = array);\n                            // Since canonical arrays may be shared widely between\n                            // unrelated consumers, it's important to regard them as\n                            // immutable, even if they are not frozen in production.\n                            if (globalThis.__DEV__ !== false) {\n                                Object.freeze(array);\n                            }\n                        }\n                        return node.array;\n                    }\n                case null:\n                case Object.prototype:\n                    {\n                        if (this.known.has(value)) return value;\n                        var proto_1 = Object.getPrototypeOf(value);\n                        var array_1 = [\n                            proto_1\n                        ];\n                        var keys = this.sortedKeys(value);\n                        array_1.push(keys.json);\n                        var firstValueIndex_1 = array_1.length;\n                        keys.sorted.forEach(function(key) {\n                            array_1.push(_this.admit(value[key]));\n                        });\n                        // Objects are looked up in the Trie by their prototype (which\n                        // is *not* recursively canonicalized), followed by a JSON\n                        // representation of their (sorted) keys, followed by the\n                        // sequence of recursively canonicalized values corresponding to\n                        // those keys. To keep the final results unambiguous with other\n                        // sequences (such as arrays that just happen to contain [proto,\n                        // keys.json, value1, value2, ...]), the known version of the\n                        // object is stored as node.object.\n                        var node = this.pool.lookupArray(array_1);\n                        if (!node.object) {\n                            var obj_1 = node.object = Object.create(proto_1);\n                            this.known.add(obj_1);\n                            keys.sorted.forEach(function(key, i) {\n                                obj_1[key] = array_1[firstValueIndex_1 + i];\n                            });\n                            // Since canonical objects may be shared widely between\n                            // unrelated consumers, it's important to regard them as\n                            // immutable, even if they are not frozen in production.\n                            if (globalThis.__DEV__ !== false) {\n                                Object.freeze(obj_1);\n                            }\n                        }\n                        return node.object;\n                    }\n            }\n        }\n        return value;\n    };\n    // It's worthwhile to cache the sorting of arrays of strings, since the\n    // same initial unsorted arrays tend to be encountered many times.\n    // Fortunately, we can reuse the Trie machinery to look up the sorted\n    // arrays in linear time (which is faster than sorting large arrays).\n    ObjectCanon.prototype.sortedKeys = function(obj) {\n        var keys = Object.keys(obj);\n        var node = this.pool.lookupArray(keys);\n        if (!node.keys) {\n            keys.sort();\n            var json = JSON.stringify(keys);\n            if (!(node.keys = this.keysByJSON.get(json))) {\n                this.keysByJSON.set(json, node.keys = {\n                    sorted: keys,\n                    json: json\n                });\n            }\n        }\n        return node.keys;\n    };\n    return ObjectCanon;\n}();\n //# sourceMappingURL=object-canon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/policies.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Policies: () => (/* binding */ Policies),\n/* harmony export */   normalizeReadFieldOptions: () => (/* binding */ normalizeReadFieldOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reactiveVars.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _key_extractor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./key-extractor.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js\");\n\n\n\n\n\n\nfunction argsFromFieldSpecifier(spec) {\n    return spec.args !== void 0 ? spec.args : spec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.argumentsObjectFromField)(spec.field, spec.variables) : null;\n}\nvar nullKeyFieldsFn = function() {\n    return void 0;\n};\nvar simpleKeyArgsFn = function(_args, context) {\n    return context.fieldName;\n};\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nvar mergeTrueFn = function(existing, incoming, _a) {\n    var mergeObjects = _a.mergeObjects;\n    return mergeObjects(existing, incoming);\n};\nvar mergeFalseFn = function(_, incoming) {\n    return incoming;\n};\nvar Policies = /** @class */ function() {\n    function Policies(config) {\n        this.config = config;\n        this.typePolicies = Object.create(null);\n        this.toBeAdded = Object.create(null);\n        // Map from subtype names to sets of supertype names. Note that this\n        // representation inverts the structure of possibleTypes (whose keys are\n        // supertypes and whose values are arrays of subtypes) because it tends\n        // to be much more efficient to search upwards than downwards.\n        this.supertypeMap = new Map();\n        // Any fuzzy subtypes specified by possibleTypes will be converted to\n        // RegExp objects and recorded here. Every key of this map can also be\n        // found in supertypeMap. In many cases this Map will be empty, which\n        // means no fuzzy subtype checking will happen in fragmentMatches.\n        this.fuzzySubtypes = new Map();\n        this.rootIdsByTypename = Object.create(null);\n        this.rootTypenamesById = Object.create(null);\n        this.usingPossibleTypes = false;\n        this.config = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            dataIdFromObject: _helpers_js__WEBPACK_IMPORTED_MODULE_3__.defaultDataIdFromObject\n        }, config);\n        this.cache = this.config.cache;\n        this.setRootTypename(\"Query\");\n        this.setRootTypename(\"Mutation\");\n        this.setRootTypename(\"Subscription\");\n        if (config.possibleTypes) {\n            this.addPossibleTypes(config.possibleTypes);\n        }\n        if (config.typePolicies) {\n            this.addTypePolicies(config.typePolicies);\n        }\n    }\n    Policies.prototype.identify = function(object, partialContext) {\n        var _a;\n        var policies = this;\n        var typename = partialContext && (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename)) || object.__typename;\n        // It should be possible to write root Query fields with writeFragment,\n        // using { __typename: \"Query\", ... } as the data, but it does not make\n        // sense to allow the same identification behavior for the Mutation and\n        // Subscription types, since application code should never be writing\n        // directly to (or reading directly from) those root objects.\n        if (typename === this.rootTypenamesById.ROOT_QUERY) {\n            return [\n                \"ROOT_QUERY\"\n            ];\n        }\n        // Default context.storeObject to object if not otherwise provided.\n        var storeObject = partialContext && partialContext.storeObject || object;\n        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, partialContext), {\n            typename: typename,\n            storeObject: storeObject,\n            readField: partialContext && partialContext.readField || function() {\n                var options = normalizeReadFieldOptions(arguments, storeObject);\n                return policies.readField(options, {\n                    store: policies.cache[\"data\"],\n                    variables: options.variables\n                });\n            }\n        });\n        var id;\n        var policy = typename && this.getTypePolicy(typename);\n        var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n        while(keyFn){\n            var specifierOrId = keyFn((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, object), storeObject), context);\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(specifierOrId)) {\n                keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyFieldsFnFromSpecifier)(specifierOrId);\n            } else {\n                id = specifierOrId;\n                break;\n            }\n        }\n        id = id ? String(id) : void 0;\n        return context.keyObject ? [\n            id,\n            context.keyObject\n        ] : [\n            id\n        ];\n    };\n    Policies.prototype.addTypePolicies = function(typePolicies) {\n        var _this = this;\n        Object.keys(typePolicies).forEach(function(typename) {\n            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                \"queryType\",\n                \"mutationType\",\n                \"subscriptionType\"\n            ]);\n            // Though {query,mutation,subscription}Type configurations are rare,\n            // it's important to call setRootTypename as early as possible,\n            // since these configurations should apply consistently for the\n            // entire lifetime of the cache. Also, since only one __typename can\n            // qualify as one of these root types, these three properties cannot\n            // be inherited, unlike the rest of the incoming properties. That\n            // restriction is convenient, because the purpose of this.toBeAdded\n            // is to delay the processing of type/field policies until the first\n            // time they're used, allowing policies to be added in any order as\n            // long as all relevant policies (including policies for supertypes)\n            // have been added by the time a given policy is used for the first\n            // time. In other words, since inheritance doesn't matter for these\n            // properties, there's also no need to delay their processing using\n            // the this.toBeAdded queue.\n            if (queryType) _this.setRootTypename(\"Query\", typename);\n            if (mutationType) _this.setRootTypename(\"Mutation\", typename);\n            if (subscriptionType) _this.setRootTypename(\"Subscription\", typename);\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(_this.toBeAdded, typename)) {\n                _this.toBeAdded[typename].push(incoming);\n            } else {\n                _this.toBeAdded[typename] = [\n                    incoming\n                ];\n            }\n        });\n    };\n    Policies.prototype.updateTypePolicy = function(typename, incoming) {\n        var _this = this;\n        var existing = this.getTypePolicy(typename);\n        var keyFields = incoming.keyFields, fields = incoming.fields;\n        function setMerge(existing, merge) {\n            existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n        }\n        // Type policies can define merge functions, as an alternative to\n        // using field policies to merge child objects.\n        setMerge(existing, incoming.merge);\n        existing.keyFn = // Pass false to disable normalization for this typename.\n        keyFields === false ? nullKeyFieldsFn : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(keyFields) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyFieldsFnFromSpecifier)(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n        if (fields) {\n            Object.keys(fields).forEach(function(fieldName) {\n                var existing = _this.getFieldPolicy(typename, fieldName, true);\n                var incoming = fields[fieldName];\n                if (typeof incoming === \"function\") {\n                    existing.read = incoming;\n                } else {\n                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;\n                    existing.keyFn = // Pass false to disable argument-based differentiation of\n                    // field identities.\n                    keyArgs === false ? simpleKeyArgsFn : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(keyArgs) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyArgsFnFromSpecifier)(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n                    if (typeof read === \"function\") {\n                        existing.read = read;\n                    }\n                    setMerge(existing, merge);\n                }\n                if (existing.read && existing.merge) {\n                    // If we have both a read and a merge function, assume\n                    // keyArgs:false, because read and merge together can take\n                    // responsibility for interpreting arguments in and out. This\n                    // default assumption can always be overridden by specifying\n                    // keyArgs explicitly in the FieldPolicy.\n                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n                }\n            });\n        }\n    };\n    Policies.prototype.setRootTypename = function(which, typename) {\n        if (typename === void 0) {\n            typename = which;\n        }\n        var rootId = \"ROOT_\" + which.toUpperCase();\n        var old = this.rootTypenamesById[rootId];\n        if (typename !== old) {\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!old || old === which, 5, which);\n            // First, delete any old __typename associated with this rootId from\n            // rootIdsByTypename.\n            if (old) delete this.rootIdsByTypename[old];\n            // Now make this the only __typename that maps to this rootId.\n            this.rootIdsByTypename[typename] = rootId;\n            // Finally, update the __typename associated with this rootId.\n            this.rootTypenamesById[rootId] = typename;\n        }\n    };\n    Policies.prototype.addPossibleTypes = function(possibleTypes) {\n        var _this = this;\n        this.usingPossibleTypes = true;\n        Object.keys(possibleTypes).forEach(function(supertype) {\n            // Make sure all types have an entry in this.supertypeMap, even if\n            // their supertype set is empty, so we can return false immediately\n            // from policies.fragmentMatches for unknown supertypes.\n            _this.getSupertypeSet(supertype, true);\n            possibleTypes[supertype].forEach(function(subtype) {\n                _this.getSupertypeSet(subtype, true).add(supertype);\n                var match = subtype.match(_helpers_js__WEBPACK_IMPORTED_MODULE_3__.TypeOrFieldNameRegExp);\n                if (!match || match[0] !== subtype) {\n                    // TODO Don't interpret just any invalid typename as a RegExp.\n                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n                }\n            });\n        });\n    };\n    Policies.prototype.getTypePolicy = function(typename) {\n        var _this = this;\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.typePolicies, typename)) {\n            var policy_1 = this.typePolicies[typename] = Object.create(null);\n            policy_1.fields = Object.create(null);\n            // When the TypePolicy for typename is first accessed, instead of\n            // starting with an empty policy object, inherit any properties or\n            // fields from the type policies of the supertypes of typename.\n            //\n            // Any properties or fields defined explicitly within the TypePolicy\n            // for typename will take precedence, and if there are multiple\n            // supertypes, the properties of policies whose types were added\n            // later via addPossibleTypes will take precedence over those of\n            // earlier supertypes. TODO Perhaps we should warn about these\n            // conflicts in development, and recommend defining the property\n            // explicitly in the subtype policy?\n            //\n            // Field policy inheritance is atomic/shallow: you can't inherit a\n            // field policy and then override just its read function, since read\n            // and merge functions often need to cooperate, so changing only one\n            // of them would be a recipe for inconsistency.\n            //\n            // Once the TypePolicy for typename has been accessed, its properties can\n            // still be updated directly using addTypePolicies, but future changes to\n            // inherited supertype policies will not be reflected in this subtype\n            // policy, because this code runs at most once per typename.\n            var supertypes_1 = this.supertypeMap.get(typename);\n            if (!supertypes_1 && this.fuzzySubtypes.size) {\n                // To make the inheritance logic work for unknown typename strings that\n                // may have fuzzy supertypes, we give this typename an empty supertype\n                // set and then populate it with any fuzzy supertypes that match.\n                supertypes_1 = this.getSupertypeSet(typename, true);\n                // This only works for typenames that are directly matched by a fuzzy\n                // supertype. What if there is an intermediate chain of supertypes?\n                // While possible, that situation can only be solved effectively by\n                // specifying the intermediate relationships via possibleTypes, manually\n                // and in a non-fuzzy way.\n                this.fuzzySubtypes.forEach(function(regExp, fuzzy) {\n                    if (regExp.test(typename)) {\n                        // The fuzzy parameter is just the original string version of regExp\n                        // (not a valid __typename string), but we can look up the\n                        // associated supertype(s) in this.supertypeMap.\n                        var fuzzySupertypes = _this.supertypeMap.get(fuzzy);\n                        if (fuzzySupertypes) {\n                            fuzzySupertypes.forEach(function(supertype) {\n                                return supertypes_1.add(supertype);\n                            });\n                        }\n                    }\n                });\n            }\n            if (supertypes_1 && supertypes_1.size) {\n                supertypes_1.forEach(function(supertype) {\n                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                        \"fields\"\n                    ]);\n                    Object.assign(policy_1, rest);\n                    Object.assign(policy_1.fields, fields);\n                });\n            }\n        }\n        var inbox = this.toBeAdded[typename];\n        if (inbox && inbox.length) {\n            // Merge the pending policies into this.typePolicies, in the order they\n            // were originally passed to addTypePolicy.\n            inbox.splice(0).forEach(function(policy) {\n                _this.updateTypePolicy(typename, policy);\n            });\n        }\n        return this.typePolicies[typename];\n    };\n    Policies.prototype.getFieldPolicy = function(typename, fieldName, createIfMissing) {\n        if (typename) {\n            var fieldPolicies = this.getTypePolicy(typename).fields;\n            return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));\n        }\n    };\n    Policies.prototype.getSupertypeSet = function(subtype, createIfMissing) {\n        var supertypeSet = this.supertypeMap.get(subtype);\n        if (!supertypeSet && createIfMissing) {\n            this.supertypeMap.set(subtype, supertypeSet = new Set());\n        }\n        return supertypeSet;\n    };\n    Policies.prototype.fragmentMatches = function(fragment, typename, result, variables) {\n        var _this = this;\n        if (!fragment.typeCondition) return true;\n        // If the fragment has a type condition but the object we're matching\n        // against does not have a __typename, the fragment cannot match.\n        if (!typename) return false;\n        var supertype = fragment.typeCondition.name.value;\n        // Common case: fragment type condition and __typename are the same.\n        if (typename === supertype) return true;\n        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n            var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n            var workQueue_1 = [\n                typenameSupertypeSet\n            ];\n            var maybeEnqueue_1 = function(subtype) {\n                var supertypeSet = _this.getSupertypeSet(subtype, false);\n                if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {\n                    workQueue_1.push(supertypeSet);\n                }\n            };\n            // We need to check fuzzy subtypes only if we encountered fuzzy\n            // subtype strings in addPossibleTypes, and only while writing to\n            // the cache, since that's when selectionSetMatchesResult gives a\n            // strong signal of fragment matching. The StoreReader class calls\n            // policies.fragmentMatches without passing a result object, so\n            // needToCheckFuzzySubtypes is always false while reading.\n            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n            var checkingFuzzySubtypes = false;\n            // It's important to keep evaluating workQueue.length each time through\n            // the loop, because the queue can grow while we're iterating over it.\n            for(var i = 0; i < workQueue_1.length; ++i){\n                var supertypeSet = workQueue_1[i];\n                if (supertypeSet.has(supertype)) {\n                    if (!typenameSupertypeSet.has(supertype)) {\n                        if (checkingFuzzySubtypes) {\n                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(6, typename, supertype);\n                        }\n                        // Record positive results for faster future lookup.\n                        // Unfortunately, we cannot safely cache negative results,\n                        // because new possibleTypes data could always be added to the\n                        // Policies class.\n                        typenameSupertypeSet.add(supertype);\n                    }\n                    return true;\n                }\n                supertypeSet.forEach(maybeEnqueue_1);\n                if (needToCheckFuzzySubtypes && // Start checking fuzzy subtypes only after exhausting all\n                // non-fuzzy subtypes (after the final iteration of the loop).\n                i === workQueue_1.length - 1 && // We could wait to compare fragment.selectionSet to result\n                // after we verify the supertype, but this check is often less\n                // expensive than that search, and we will have to do the\n                // comparison anyway whenever we find a potential match.\n                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.selectionSetMatchesResult)(fragment.selectionSet, result, variables)) {\n                    // We don't always need to check fuzzy subtypes (if no result\n                    // was provided, or !this.fuzzySubtypes.size), but, when we do,\n                    // we only want to check them once.\n                    needToCheckFuzzySubtypes = false;\n                    checkingFuzzySubtypes = true;\n                    // If we find any fuzzy subtypes that match typename, extend the\n                    // workQueue to search through the supertypes of those fuzzy\n                    // subtypes. Otherwise the for-loop will terminate and we'll\n                    // return false below.\n                    this.fuzzySubtypes.forEach(function(regExp, fuzzyString) {\n                        var match = typename.match(regExp);\n                        if (match && match[0] === typename) {\n                            maybeEnqueue_1(fuzzyString);\n                        }\n                    });\n                }\n            }\n        }\n        return false;\n    };\n    Policies.prototype.hasKeyArgs = function(typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return !!(policy && policy.keyFn);\n    };\n    Policies.prototype.getStoreFieldName = function(fieldSpec) {\n        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        var storeFieldName;\n        var keyFn = policy && policy.keyFn;\n        if (keyFn && typename) {\n            var context = {\n                typename: typename,\n                fieldName: fieldName,\n                field: fieldSpec.field || null,\n                variables: fieldSpec.variables\n            };\n            var args = argsFromFieldSpecifier(fieldSpec);\n            while(keyFn){\n                var specifierOrString = keyFn(args, context);\n                if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(specifierOrString)) {\n                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyArgsFnFromSpecifier)(specifierOrString);\n                } else {\n                    // If the custom keyFn returns a falsy value, fall back to\n                    // fieldName instead.\n                    storeFieldName = specifierOrString || fieldName;\n                    break;\n                }\n            }\n        }\n        if (storeFieldName === void 0) {\n            storeFieldName = fieldSpec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.storeKeyNameFromField)(fieldSpec.field, fieldSpec.variables) : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.getStoreKeyName)(fieldName, argsFromFieldSpecifier(fieldSpec));\n        }\n        // Returning false from a keyArgs function is like configuring\n        // keyArgs: false, but more dynamic.\n        if (storeFieldName === false) {\n            return fieldName;\n        }\n        // Make sure custom field names start with the actual field.name.value\n        // of the field, so we can always figure out which properties of a\n        // StoreObject correspond to which original field names.\n        return fieldName === (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n    };\n    Policies.prototype.readField = function(options, context) {\n        var objectOrReference = options.from;\n        if (!objectOrReference) return;\n        var nameOrField = options.field || options.fieldName;\n        if (!nameOrField) return;\n        if (options.typename === void 0) {\n            var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n            if (typename) options.typename = typename;\n        }\n        var storeFieldName = this.getStoreFieldName(options);\n        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n        var policy = this.getFieldPolicy(options.typename, fieldName, false);\n        var read = policy && policy.read;\n        if (read) {\n            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n            // Call read(existing, readOptions) with cacheSlot holding this.cache.\n            return _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.cacheSlot.withValue(this.cache, read, [\n                existing,\n                readOptions\n            ]);\n        }\n        return existing;\n    };\n    Policies.prototype.getReadFunction = function(typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return policy && policy.read;\n    };\n    Policies.prototype.getMergeFunction = function(parentTypename, fieldName, childTypename) {\n        var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n        var merge = policy && policy.merge;\n        if (!merge && childTypename) {\n            policy = this.getTypePolicy(childTypename);\n            merge = policy && policy.merge;\n        }\n        return merge;\n    };\n    Policies.prototype.runMergeFunction = function(existing, incoming, _a, context, storage) {\n        var field = _a.field, typename = _a.typename, merge = _a.merge;\n        if (merge === mergeTrueFn) {\n            // Instead of going to the trouble of creating a full\n            // FieldFunctionOptions object and calling mergeTrueFn, we can\n            // simply call mergeObjects, as mergeTrueFn would.\n            return makeMergeObjectsFunction(context.store)(existing, incoming);\n        }\n        if (merge === mergeFalseFn) {\n            // Likewise for mergeFalseFn, whose implementation is even simpler.\n            return incoming;\n        }\n        // If cache.writeQuery or cache.writeFragment was called with\n        // options.overwrite set to true, we still call merge functions, but\n        // the existing data is always undefined, so the merge function will\n        // not attempt to combine the incoming data with the existing data.\n        if (context.overwrite) {\n            existing = void 0;\n        }\n        return merge(existing, incoming, makeFieldFunctionOptions(this, // Unlike options.readField for read functions, we do not fall\n        // back to the current object if no foreignObjOrRef is provided,\n        // because it's not clear what the current object should be for\n        // merge functions: the (possibly undefined) existing object, or\n        // the incoming object? If you think your merge function needs\n        // to read sibling fields in order to produce a new value for\n        // the current field, you might want to rethink your strategy,\n        // because that's a recipe for making merge behavior sensitive\n        // to the order in which fields are written into the cache.\n        // However, readField(name, ref) is useful for merge functions\n        // that need to deduplicate child objects and references.\n        void 0, {\n            typename: typename,\n            fieldName: field.name.value,\n            field: field,\n            variables: context.variables\n        }, context, storage || Object.create(null)));\n    };\n    return Policies;\n}();\n\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n    var storeFieldName = policies.getStoreFieldName(fieldSpec);\n    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n    var variables = fieldSpec.variables || context.variables;\n    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;\n    return {\n        args: argsFromFieldSpecifier(fieldSpec),\n        field: fieldSpec.field || null,\n        fieldName: fieldName,\n        storeFieldName: storeFieldName,\n        variables: variables,\n        isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference,\n        toReference: toReference,\n        storage: storage,\n        cache: policies.cache,\n        canRead: canRead,\n        readField: function() {\n            return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);\n        },\n        mergeObjects: makeMergeObjectsFunction(context.store)\n    };\n}\nfunction normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n    var fieldNameOrOptions = readFieldArgs[0], from = readFieldArgs[1], argc = readFieldArgs.length;\n    var options;\n    if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n            fieldName: fieldNameOrOptions,\n            // Default to objectOrReference only when no second argument was\n            // passed for the from parameter, not when undefined is explicitly\n            // passed as the second argument.\n            from: argc > 1 ? from : objectOrReference\n        };\n    } else {\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, fieldNameOrOptions);\n        // Default to objectOrReference only when fieldNameOrOptions.from is\n        // actually omitted, rather than just undefined.\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(options, \"from\")) {\n            options.from = objectOrReference;\n        }\n    }\n    if (globalThis.__DEV__ !== false && options.from === void 0) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(7, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.stringifyForDisplay)(Array.from(readFieldArgs)));\n    }\n    if (void 0 === options.variables) {\n        options.variables = variables;\n    }\n    return options;\n}\nfunction makeMergeObjectsFunction(store) {\n    return function mergeObjects(existing, incoming) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(incoming)) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(8);\n        }\n        // These dynamic checks are necessary because the parameters of a\n        // custom merge function can easily have the any type, so the type\n        // system cannot always enforce the StoreObject | Reference parameter\n        // types of options.mergeObjects.\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isNonNullObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isNonNullObject)(incoming)) {\n            var eType = store.getFieldValue(existing, \"__typename\");\n            var iType = store.getFieldValue(incoming, \"__typename\");\n            var typesDiffer = eType && iType && eType !== iType;\n            if (typesDiffer) {\n                return incoming;\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // existing.__ref, preferring/overwriting any fields contributed by the\n                // newer incoming StoreObject.\n                store.merge(existing.__ref, incoming);\n                return existing;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // incoming.__ref, taking fields from the older existing object only if\n                // those fields are not already present in the newer StoreObject\n                // identified by incoming.__ref.\n                store.merge(existing, incoming.__ref);\n                return incoming;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, existing), incoming);\n            }\n        }\n        return incoming;\n    };\n} //# sourceMappingURL=policies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/reactiveVars.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSlot: () => (/* binding */ cacheSlot),\n/* harmony export */   forgetCache: () => (/* binding */ forgetCache),\n/* harmony export */   makeVar: () => (/* binding */ makeVar),\n/* harmony export */   recallCache: () => (/* binding */ recallCache)\n/* harmony export */ });\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nvar cacheSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nvar cacheInfoMap = new WeakMap();\nfunction getCacheInfo(cache) {\n    var info = cacheInfoMap.get(cache);\n    if (!info) {\n        cacheInfoMap.set(cache, info = {\n            vars: new Set(),\n            dep: (0,optimism__WEBPACK_IMPORTED_MODULE_0__.dep)()\n        });\n    }\n    return info;\n}\nfunction forgetCache(cache) {\n    getCacheInfo(cache).vars.forEach(function(rv) {\n        return rv.forgetCache(cache);\n    });\n}\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nfunction recallCache(cache) {\n    getCacheInfo(cache).vars.forEach(function(rv) {\n        return rv.attachCache(cache);\n    });\n}\nfunction makeVar(value) {\n    var caches = new Set();\n    var listeners = new Set();\n    var rv = function(newValue) {\n        if (arguments.length > 0) {\n            if (value !== newValue) {\n                value = newValue;\n                caches.forEach(function(cache) {\n                    // Invalidate any fields with custom read functions that\n                    // consumed this variable, so query results involving those\n                    // fields will be recomputed the next time we read them.\n                    getCacheInfo(cache).dep.dirty(rv);\n                    // Broadcast changes to any caches that have previously read\n                    // from this variable.\n                    broadcast(cache);\n                });\n                // Finally, notify any listeners added via rv.onNextChange.\n                var oldListeners = Array.from(listeners);\n                listeners.clear();\n                oldListeners.forEach(function(listener) {\n                    return listener(value);\n                });\n            }\n        } else {\n            // When reading from the variable, obtain the current cache from\n            // context via cacheSlot. This isn't entirely foolproof, but it's\n            // the same system that powers varDep.\n            var cache = cacheSlot.getValue();\n            if (cache) {\n                attach(cache);\n                getCacheInfo(cache).dep(rv);\n            }\n        }\n        return value;\n    };\n    rv.onNextChange = function(listener) {\n        listeners.add(listener);\n        return function() {\n            listeners.delete(listener);\n        };\n    };\n    var attach = rv.attachCache = function(cache) {\n        caches.add(cache);\n        getCacheInfo(cache).vars.add(rv);\n        return rv;\n    };\n    rv.forgetCache = function(cache) {\n        return caches.delete(cache);\n    };\n    return rv;\n}\nfunction broadcast(cache) {\n    if (cache.broadcastWatches) {\n        cache.broadcastWatches();\n    }\n} //# sourceMappingURL=reactiveVars.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvcmVhY3RpdmVWYXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFDO0FBQ3JDLHlFQUF5RTtBQUN6RSxnQ0FBZ0M7QUFDekIsSUFBSUUsWUFBWSxJQUFJRCwwQ0FBSUEsR0FBRztBQUNsQyxJQUFJRSxlQUFlLElBQUlDO0FBQ3ZCLFNBQVNDLGFBQWFDLEtBQUs7SUFDdkIsSUFBSUMsT0FBT0osYUFBYUssR0FBRyxDQUFDRjtJQUM1QixJQUFJLENBQUNDLE1BQU07UUFDUEosYUFBYU0sR0FBRyxDQUFDSCxPQUFRQyxPQUFPO1lBQzVCRyxNQUFNLElBQUlDO1lBQ1ZYLEtBQUtBLDZDQUFHQTtRQUNaO0lBQ0o7SUFDQSxPQUFPTztBQUNYO0FBQ08sU0FBU0ssWUFBWU4sS0FBSztJQUM3QkQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUFJLE9BQU9BLEdBQUdGLFdBQVcsQ0FBQ047SUFBUTtBQUNuRjtBQUNBLHlFQUF5RTtBQUN6RSxrRUFBa0U7QUFDbEUsMEVBQTBFO0FBQzFFLHNFQUFzRTtBQUN0RSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLG1FQUFtRTtBQUNuRSx3REFBd0Q7QUFDakQsU0FBU1MsWUFBWVQsS0FBSztJQUM3QkQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUFJLE9BQU9BLEdBQUdFLFdBQVcsQ0FBQ1Y7SUFBUTtBQUNuRjtBQUNPLFNBQVNXLFFBQVFDLEtBQUs7SUFDekIsSUFBSUMsU0FBUyxJQUFJUjtJQUNqQixJQUFJUyxZQUFZLElBQUlUO0lBQ3BCLElBQUlHLEtBQUssU0FBVU8sUUFBUTtRQUN2QixJQUFJQyxVQUFVQyxNQUFNLEdBQUcsR0FBRztZQUN0QixJQUFJTCxVQUFVRyxVQUFVO2dCQUNwQkgsUUFBUUc7Z0JBQ1JGLE9BQU9OLE9BQU8sQ0FBQyxTQUFVUCxLQUFLO29CQUMxQix3REFBd0Q7b0JBQ3hELDJEQUEyRDtvQkFDM0Qsd0RBQXdEO29CQUN4REQsYUFBYUMsT0FBT04sR0FBRyxDQUFDd0IsS0FBSyxDQUFDVjtvQkFDOUIsNERBQTREO29CQUM1RCxzQkFBc0I7b0JBQ3RCVyxVQUFVbkI7Z0JBQ2Q7Z0JBQ0EsMkRBQTJEO2dCQUMzRCxJQUFJb0IsZUFBZUMsTUFBTUMsSUFBSSxDQUFDUjtnQkFDOUJBLFVBQVVTLEtBQUs7Z0JBQ2ZILGFBQWFiLE9BQU8sQ0FBQyxTQUFVaUIsUUFBUTtvQkFBSSxPQUFPQSxTQUFTWjtnQkFBUTtZQUN2RTtRQUNKLE9BQ0s7WUFDRCxnRUFBZ0U7WUFDaEUsaUVBQWlFO1lBQ2pFLHNDQUFzQztZQUN0QyxJQUFJWixRQUFRSixVQUFVNkIsUUFBUTtZQUM5QixJQUFJekIsT0FBTztnQkFDUDBCLE9BQU8xQjtnQkFDUEQsYUFBYUMsT0FBT04sR0FBRyxDQUFDYztZQUM1QjtRQUNKO1FBQ0EsT0FBT0k7SUFDWDtJQUNBSixHQUFHbUIsWUFBWSxHQUFHLFNBQVVILFFBQVE7UUFDaENWLFVBQVVjLEdBQUcsQ0FBQ0o7UUFDZCxPQUFPO1lBQ0hWLFVBQVVlLE1BQU0sQ0FBQ0w7UUFDckI7SUFDSjtJQUNBLElBQUlFLFNBQVVsQixHQUFHRSxXQUFXLEdBQUcsU0FBVVYsS0FBSztRQUMxQ2EsT0FBT2UsR0FBRyxDQUFDNUI7UUFDWEQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDd0IsR0FBRyxDQUFDcEI7UUFDN0IsT0FBT0E7SUFDWDtJQUNBQSxHQUFHRixXQUFXLEdBQUcsU0FBVU4sS0FBSztRQUFJLE9BQU9hLE9BQU9nQixNQUFNLENBQUM3QjtJQUFRO0lBQ2pFLE9BQU9RO0FBQ1g7QUFDQSxTQUFTVyxVQUFVbkIsS0FBSztJQUNwQixJQUFJQSxNQUFNOEIsZ0JBQWdCLEVBQUU7UUFDeEI5QixNQUFNOEIsZ0JBQWdCO0lBQzFCO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvcmVhY3RpdmVWYXJzLmpzP2Q3M2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVwLCBTbG90IH0gZnJvbSBcIm9wdGltaXNtXCI7XG4vLyBDb250ZXh0dWFsIFNsb3QgdGhhdCBhY3F1aXJlcyBpdHMgdmFsdWUgd2hlbiBjdXN0b20gcmVhZCBmdW5jdGlvbnMgYXJlXG4vLyBjYWxsZWQgaW4gUG9saWNpZXMjcmVhZEZpZWxkLlxuZXhwb3J0IHZhciBjYWNoZVNsb3QgPSBuZXcgU2xvdCgpO1xudmFyIGNhY2hlSW5mb01hcCA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBnZXRDYWNoZUluZm8oY2FjaGUpIHtcbiAgICB2YXIgaW5mbyA9IGNhY2hlSW5mb01hcC5nZXQoY2FjaGUpO1xuICAgIGlmICghaW5mbykge1xuICAgICAgICBjYWNoZUluZm9NYXAuc2V0KGNhY2hlLCAoaW5mbyA9IHtcbiAgICAgICAgICAgIHZhcnM6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIGRlcDogZGVwKCksXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG5leHBvcnQgZnVuY3Rpb24gZm9yZ2V0Q2FjaGUoY2FjaGUpIHtcbiAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuZm9yRWFjaChmdW5jdGlvbiAocnYpIHsgcmV0dXJuIHJ2LmZvcmdldENhY2hlKGNhY2hlKTsgfSk7XG59XG4vLyBDYWxsaW5nIGZvcmdldENhY2hlKGNhY2hlKSBzZXJ2ZXMgdG8gc2lsZW5jZSBicm9hZGNhc3RzIGFuZCBhbGxvd3MgdGhlXG4vLyBjYWNoZSB0byBiZSBnYXJiYWdlIGNvbGxlY3RlZC4gSG93ZXZlciwgdGhlIHZhcnNCeUNhY2hlIFdlYWtNYXBcbi8vIHByZXNlcnZlcyB0aGUgc2V0IG9mIHJlYWN0aXZlIHZhcmlhYmxlcyB0aGF0IHdlcmUgcHJldmlvdXNseSBhc3NvY2lhdGVkXG4vLyB3aXRoIHRoaXMgY2FjaGUsIHdoaWNoIG1ha2VzIGl0IHBvc3NpYmxlIHRvIFwicmVjYWxsXCIgdGhlIGNhY2hlIGF0IGFcbi8vIGxhdGVyIHRpbWUsIGJ5IHJlYXR0YWNoaW5nIGl0IHRvIHRob3NlIHZhcmlhYmxlcy4gSWYgdGhlIGNhY2hlIGhhcyBiZWVuXG4vLyBnYXJiYWdlIGNvbGxlY3RlZCBpbiB0aGUgbWVhbnRpbWUsIGJlY2F1c2UgaXQgaXMgbm8gbG9uZ2VyIHJlYWNoYWJsZSxcbi8vIHlvdSB3b24ndCBiZSBhYmxlIHRvIGNhbGwgcmVjYWxsQ2FjaGUoY2FjaGUpLCBhbmQgdGhlIGNhY2hlIHdpbGxcbi8vIGF1dG9tYXRpY2FsbHkgZGlzYXBwZWFyIGZyb20gdGhlIHZhcnNCeUNhY2hlIFdlYWtNYXAuXG5leHBvcnQgZnVuY3Rpb24gcmVjYWxsQ2FjaGUoY2FjaGUpIHtcbiAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuZm9yRWFjaChmdW5jdGlvbiAocnYpIHsgcmV0dXJuIHJ2LmF0dGFjaENhY2hlKGNhY2hlKTsgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZVZhcih2YWx1ZSkge1xuICAgIHZhciBjYWNoZXMgPSBuZXcgU2V0KCk7XG4gICAgdmFyIGxpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICB2YXIgcnYgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBjYWNoZXMuZm9yRWFjaChmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZGF0ZSBhbnkgZmllbGRzIHdpdGggY3VzdG9tIHJlYWQgZnVuY3Rpb25zIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3VtZWQgdGhpcyB2YXJpYWJsZSwgc28gcXVlcnkgcmVzdWx0cyBpbnZvbHZpbmcgdGhvc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gZmllbGRzIHdpbGwgYmUgcmVjb21wdXRlZCB0aGUgbmV4dCB0aW1lIHdlIHJlYWQgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgZ2V0Q2FjaGVJbmZvKGNhY2hlKS5kZXAuZGlydHkocnYpO1xuICAgICAgICAgICAgICAgICAgICAvLyBCcm9hZGNhc3QgY2hhbmdlcyB0byBhbnkgY2FjaGVzIHRoYXQgaGF2ZSBwcmV2aW91c2x5IHJlYWRcbiAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSB0aGlzIHZhcmlhYmxlLlxuICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3QoY2FjaGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIEZpbmFsbHksIG5vdGlmeSBhbnkgbGlzdGVuZXJzIGFkZGVkIHZpYSBydi5vbk5leHRDaGFuZ2UuXG4gICAgICAgICAgICAgICAgdmFyIG9sZExpc3RlbmVycyA9IEFycmF5LmZyb20obGlzdGVuZXJzKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBvbGRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKHZhbHVlKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBXaGVuIHJlYWRpbmcgZnJvbSB0aGUgdmFyaWFibGUsIG9idGFpbiB0aGUgY3VycmVudCBjYWNoZSBmcm9tXG4gICAgICAgICAgICAvLyBjb250ZXh0IHZpYSBjYWNoZVNsb3QuIFRoaXMgaXNuJ3QgZW50aXJlbHkgZm9vbHByb29mLCBidXQgaXQnc1xuICAgICAgICAgICAgLy8gdGhlIHNhbWUgc3lzdGVtIHRoYXQgcG93ZXJzIHZhckRlcC5cbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlU2xvdC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoKGNhY2hlKTtcbiAgICAgICAgICAgICAgICBnZXRDYWNoZUluZm8oY2FjaGUpLmRlcChydik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgcnYub25OZXh0Q2hhbmdlID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgYXR0YWNoID0gKHJ2LmF0dGFjaENhY2hlID0gZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICAgIGNhY2hlcy5hZGQoY2FjaGUpO1xuICAgICAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuYWRkKHJ2KTtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgIH0pO1xuICAgIHJ2LmZvcmdldENhY2hlID0gZnVuY3Rpb24gKGNhY2hlKSB7IHJldHVybiBjYWNoZXMuZGVsZXRlKGNhY2hlKTsgfTtcbiAgICByZXR1cm4gcnY7XG59XG5mdW5jdGlvbiBicm9hZGNhc3QoY2FjaGUpIHtcbiAgICBpZiAoY2FjaGUuYnJvYWRjYXN0V2F0Y2hlcykge1xuICAgICAgICBjYWNoZS5icm9hZGNhc3RXYXRjaGVzKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3RpdmVWYXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJkZXAiLCJTbG90IiwiY2FjaGVTbG90IiwiY2FjaGVJbmZvTWFwIiwiV2Vha01hcCIsImdldENhY2hlSW5mbyIsImNhY2hlIiwiaW5mbyIsImdldCIsInNldCIsInZhcnMiLCJTZXQiLCJmb3JnZXRDYWNoZSIsImZvckVhY2giLCJydiIsInJlY2FsbENhY2hlIiwiYXR0YWNoQ2FjaGUiLCJtYWtlVmFyIiwidmFsdWUiLCJjYWNoZXMiLCJsaXN0ZW5lcnMiLCJuZXdWYWx1ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImRpcnR5IiwiYnJvYWRjYXN0Iiwib2xkTGlzdGVuZXJzIiwiQXJyYXkiLCJmcm9tIiwiY2xlYXIiLCJsaXN0ZW5lciIsImdldFZhbHVlIiwiYXR0YWNoIiwib25OZXh0Q2hhbmdlIiwiYWRkIiwiZGVsZXRlIiwiYnJvYWRjYXN0V2F0Y2hlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/readFromStore.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreReader: () => (/* binding */ StoreReader)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./entityStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../core/types/common.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _object_canon_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./object-canon.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js\");\n\n\n\n\n\n\n\n\n\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n        // We split out this property so we can pass different values\n        // independently without modifying options.context itself.\n        options.context.canonizeResults\n    ];\n}\nvar StoreReader = /** @class */ function() {\n    function StoreReader(config) {\n        var _this = this;\n        this.knownResults = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakMap ? WeakMap : Map)();\n        this.config = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.compact)(config, {\n            addTypename: config.addTypename !== false,\n            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.shouldCanonizeResults)(config)\n        });\n        this.canon = config.canon || new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();\n        // memoized functions in this class will be \"garbage-collected\"\n        // by recreating the whole `StoreReader` in\n        // `InMemoryCache.resetResultsCache`\n        // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n        this.executeSelectionSet = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(options) {\n            var _a;\n            var canonizeResults = options.context.canonizeResults;\n            var peekArgs = execSelectionSetKeyArgs(options);\n            // Negate this boolean option so we can find out if we've already read\n            // this result using the other boolean value.\n            peekArgs[3] = !canonizeResults;\n            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n            if (other) {\n                if (canonizeResults) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, other), {\n                        // If we previously read this result without canonizing it, we can\n                        // reuse that result simply by canonizing it now.\n                        result: _this.canon.admit(other.result)\n                    });\n                }\n                // If we previously read this result with canonization enabled, we can\n                // return that canonized result as-is.\n                return other;\n            }\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            // Finally, if we didn't find any useful previous results, run the real\n            // execSelectionSetImpl method with the given options.\n            return _this.execSelectionSetImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes[\"inMemoryCache.executeSelectionSet\"] || 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n            keyArgs: execSelectionSetKeyArgs,\n            // Note that the parameters of makeCacheKey are determined by the\n            // array returned by keyArgs.\n            makeCacheKey: function(selectionSet, parent, context, canonizeResults) {\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n                }\n            }\n        });\n        this.executeSubSelectedArray = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(options) {\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] || 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ ,\n            makeCacheKey: function(_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            }\n        });\n    }\n    StoreReader.prototype.resetCanon = function() {\n        this.canon = new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();\n    };\n    /**\n     * Given a store and a query, return as much of the result as possible and\n     * identify if any data was missing from the store.\n     */ StoreReader.prototype.diffQueryAgainstStore = function(_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? \"ROOT_QUERY\" : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n        var policies = this.config.cache.policies;\n        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getQueryDefinition)(query))), variables);\n        var rootRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.makeReference)(rootId);\n        var execResult = this.executeSelectionSet({\n            selectionSet: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n                store: store,\n                query: query,\n                policies: policies,\n                variables: variables,\n                varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.canonicalStringify)(variables),\n                canonizeResults: canonizeResults\n            }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.extractFragmentContext)(query, this.config.fragments))\n        });\n        var missing;\n        if (execResult.missing) {\n            // For backwards compatibility we still report an array of\n            // MissingFieldError objects, even though there will only ever be at most\n            // one of them, now that all missing field error messages are grouped\n            // together in the execResult.missing tree.\n            missing = [\n                new _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__.MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)\n            ];\n            if (!returnPartialData) {\n                throw missing[0];\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !missing,\n            missing: missing\n        };\n    };\n    StoreReader.prototype.isFresh = function(result, parent, selectionSet, context) {\n        if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store) && this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, // If result is canonical, then it could only have been previously\n            // cached by the canonizing version of executeSelectionSet, so we can\n            // avoid checking both possibilities here.\n            this.canon.isKnown(result));\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // Uncached version of executeSelectionSet.\n    StoreReader.prototype.execSelectionSetImpl = function(_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: this.canon.empty,\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\")\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        var objectsToMerge = [];\n        var missing;\n        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();\n        if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n            // Ensure we always include a default value for the __typename\n            // field, if we have one, and this.config.addTypename is true. Note\n            // that this field can be overridden by other merged objects.\n            objectsToMerge.push({\n                __typename: typename\n            });\n        }\n        function handleMissing(result, resultName) {\n            var _a;\n            if (result.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));\n            }\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function(selection) {\n            var _a, _b;\n            // Omit fields with directives @skip(if: <truthy value>) or\n            // @include(if: <falsy value>).\n            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.shouldInclude)(selection, variables)) return;\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isField)(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference\n                }, context);\n                var resultName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.resultKeyNameFromField)(selection);\n                if (fieldValue === void 0) {\n                    if (!_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2)), _a));\n                    }\n                } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(fieldValue)) {\n                    if (fieldValue.length > 0) {\n                        fieldValue = handleMissing(_this.executeSubSelectedArray({\n                            field: selection,\n                            array: fieldValue,\n                            enclosingRef: enclosingRef,\n                            context: context\n                        }), resultName);\n                    }\n                } else if (!selection.selectionSet) {\n                    // If the field does not have a selection set, then we handle it\n                    // as a scalar value. To keep this.canon from canonicalizing\n                    // this value, we use this.canon.pass to wrap fieldValue in a\n                    // Pass object that this.canon.admit will later unwrap as-is.\n                    if (context.canonizeResults) {\n                        fieldValue = _this.canon.pass(fieldValue);\n                    }\n                } else if (fieldValue != null) {\n                    // In this case, because we know the field has a selection set,\n                    // it must be trying to query a GraphQLObjectType, which is why\n                    // fieldValue must be != null.\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(fieldValue) ? fieldValue : enclosingRef,\n                        context: context\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n                }\n            } else {\n                var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.getFragmentFromSelection)(selection, context.lookupFragment);\n                if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_18__.Kind.FRAGMENT_SPREAD) {\n                    throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(9, selection.name.value);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        var result = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.mergeDeepArray)(objectsToMerge);\n        var finalResult = {\n            result: result,\n            missing: missing\n        };\n        var frozen = context.canonizeResults ? this.canon.admit(finalResult) : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.maybeDeepFreeze)(finalResult);\n        // Store this result with its selection set so that we can quickly\n        // recognize it again in the StoreReader#isFresh method.\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    };\n    // Uncached version of executeSubSelectedArray.\n    StoreReader.prototype.execSubSelectedArrayImpl = function(_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;\n        var missing;\n        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();\n        function handleMissing(childResult, i) {\n            var _a;\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function(item, i) {\n            // null value in array\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    enclosingRef: enclosingRef,\n                    context: context\n                }), i);\n            }\n            // This is an object, run the selection set on it\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(item) ? item : enclosingRef,\n                    context: context\n                }), i);\n            }\n            if (globalThis.__DEV__ !== false) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: context.canonizeResults ? this.canon.admit(array) : array,\n            missing: missing\n        };\n    };\n    return StoreReader;\n}();\n\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, function(_, value) {\n            if (typeof value === \"string\") throw value;\n            return value;\n        });\n    } catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([\n            fieldValue\n        ]);\n        workSet_1.forEach(function(value) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject)(value)) {\n                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(value), 10, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.getTypenameFromStoreObject)(store, value), field.name.value);\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n} //# sourceMappingURL=readFromStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/writeToStore.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreWriter: () => (/* binding */ StoreWriter)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n\n\n\n\n\n\n\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor(context, clientOnly, deferred) {\n    var key = \"\".concat(clientOnly).concat(deferred);\n    var flavored = context.flavors.get(key);\n    if (!flavored) {\n        context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, context), {\n            clientOnly: clientOnly,\n            deferred: deferred\n        }));\n    }\n    return flavored;\n}\nvar StoreWriter = /** @class */ function() {\n    function StoreWriter(cache, reader, fragments) {\n        this.cache = cache;\n        this.reader = reader;\n        this.fragments = fragments;\n    }\n    StoreWriter.prototype.writeToStore = function(store, _a) {\n        var _this = this;\n        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;\n        var operationDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getOperationDefinition)(query);\n        var merger = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.makeProcessedFieldsMerger)();\n        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getDefaultValues)(operationDefinition)), variables);\n        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            store: store,\n            written: Object.create(null),\n            merge: function(existing, incoming) {\n                return merger.merge(existing, incoming);\n            },\n            variables: variables,\n            varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.canonicalStringify)(variables)\n        }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.extractFragmentContext)(query, this.fragments)), {\n            overwrite: !!overwrite,\n            incomingById: new Map(),\n            clientOnly: false,\n            deferred: false,\n            flavors: new Map()\n        });\n        var ref = this.processSelectionSet({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            mergeTree: {\n                map: new Map()\n            },\n            context: context\n        });\n        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(ref)) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(11, result);\n        }\n        // So far, the store has not been modified, so now it's time to process\n        // context.incomingById and merge those incoming fields into context.store.\n        context.incomingById.forEach(function(_a, dataId) {\n            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;\n            var entityRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);\n            if (mergeTree && mergeTree.map.size) {\n                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(applied)) {\n                    // Assume References returned by applyMerges have already been merged\n                    // into the store. See makeMergeObjectsFunction in policies.ts for an\n                    // example of how this can happen.\n                    return;\n                }\n                // Otherwise, applyMerges returned a StoreObject, whose fields we should\n                // merge into the store (see store.merge statement below).\n                storeObject = applied;\n            }\n            if (globalThis.__DEV__ !== false && !context.overwrite) {\n                var fieldsWithSelectionSets_1 = Object.create(null);\n                fieldNodeSet.forEach(function(field) {\n                    if (field.selectionSet) {\n                        fieldsWithSelectionSets_1[field.name.value] = true;\n                    }\n                });\n                var hasSelectionSet_1 = function(storeFieldName) {\n                    return fieldsWithSelectionSets_1[(0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName)] === true;\n                };\n                var hasMergeFunction_1 = function(storeFieldName) {\n                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n                    return Boolean(childTree && childTree.info && childTree.info.merge);\n                };\n                Object.keys(storeObject).forEach(function(storeFieldName) {\n                    // If a merge function was defined for this field, trust that it\n                    // did the right thing about (not) clobbering data. If the field\n                    // has no selection set, it's a scalar field, so it doesn't need\n                    // a merge function (even if it's an object, like JSON data).\n                    if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {\n                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n                    }\n                });\n            }\n            store.merge(dataId, storeObject);\n        });\n        // Any IDs written explicitly to the cache will be retained as\n        // reachable root IDs for garbage collection purposes. Although this\n        // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n        // retainment counts are effectively ignored because cache.gc() always\n        // includes them in its root ID set.\n        store.retain(ref.__ref);\n        return ref;\n    };\n    StoreWriter.prototype.processSelectionSet = function(_a) {\n        var _this = this;\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, // This object allows processSelectionSet to report useful information\n        // to its callers without explicitly returning that information.\n        mergeTree = _a.mergeTree;\n        var policies = this.cache.policies;\n        // This variable will be repeatedly updated using context.merge to\n        // accumulate all fields that need to be written into the store.\n        var incoming = Object.create(null);\n        // If typename was not passed in, infer it. Note that typename is\n        // always passed in for tricky-to-infer cases such as \"Query\" for\n        // ROOT_QUERY.\n        var typename = dataId && policies.rootTypenamesById[dataId] || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n        if (\"string\" === typeof typename) {\n            incoming.__typename = typename;\n        }\n        // This readField function will be passed as context.readField in the\n        // KeyFieldsContext object created within policies.identify (called below).\n        // In addition to reading from the existing context.store (thanks to the\n        // policies.readField(options, context) line at the very bottom), this\n        // version of readField can read from Reference objects that are currently\n        // pending in context.incomingById, which is important whenever keyFields\n        // need to be extracted from a child object that processSelectionSet has\n        // turned into a Reference.\n        var readField = function() {\n            var options = (0,_policies_js__WEBPACK_IMPORTED_MODULE_8__.normalizeReadFieldOptions)(arguments, incoming, context.variables);\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(options.from)) {\n                var info = context.incomingById.get(options.from.__ref);\n                if (info) {\n                    var result_1 = policies.readField((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                        from: info.storeObject\n                    }), context);\n                    if (result_1 !== void 0) {\n                        return result_1;\n                    }\n                }\n            }\n            return policies.readField(options, context);\n        };\n        var fieldNodeSet = new Set();\n        this.flattenFields(selectionSet, result, // This WriteContext will be the default context value for fields returned\n        // by the flattenFields method, but some fields may be assigned a modified\n        // context, depending on the presence of @client and other directives.\n        context, typename).forEach(function(context, field) {\n            var _a;\n            var resultFieldKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field);\n            var value = result[resultFieldKey];\n            fieldNodeSet.add(field);\n            if (value !== void 0) {\n                var storeFieldName = policies.getStoreFieldName({\n                    typename: typename,\n                    fieldName: field.name.value,\n                    field: field,\n                    variables: context.variables\n                });\n                var childTree = getChildMergeTree(mergeTree, storeFieldName);\n                var incomingValue = _this.processFieldValue(value, field, // Reset context.clientOnly and context.deferred to their default\n                // values before processing nested selection sets.\n                field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);\n                // To determine if this field holds a child object with a merge function\n                // defined in its type policy (see PR #7070), we need to figure out the\n                // child object's __typename.\n                var childTypename = void 0;\n                // The field's value can be an object that has a __typename only if the\n                // field has a selection set. Otherwise incomingValue is scalar.\n                if (field.selectionSet && ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incomingValue) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(incomingValue))) {\n                    childTypename = readField(\"__typename\", incomingValue);\n                }\n                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n                if (merge) {\n                    childTree.info = {\n                        // TODO Check compatibility against any existing childTree.field?\n                        field: field,\n                        typename: typename,\n                        merge: merge\n                    };\n                } else {\n                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n                }\n                incoming = context.merge(incoming, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n            } else if (globalThis.__DEV__ !== false && !context.clientOnly && !context.deferred && !_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.addTypenameToDocument.added(field) && // If the field has a read function, it may be a synthetic field or\n            // provide a default value, so its absence from the written data should\n            // not be cause for alarm.\n            !policies.getReadFunction(typename, field.name.value)) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(12, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field), result);\n            }\n        });\n        // Identify the result object, even if dataId was already provided,\n        // since we always need keyObject below.\n        try {\n            var _b = policies.identify(result, {\n                typename: typename,\n                selectionSet: selectionSet,\n                fragmentMap: context.fragmentMap,\n                storeObject: incoming,\n                readField: readField\n            }), id = _b[0], keyObject = _b[1];\n            // If dataId was not provided, fall back to the id just generated by\n            // policies.identify.\n            dataId = dataId || id;\n            // Write any key fields that were used during identification, even if\n            // they were not mentioned in the original query.\n            if (keyObject) {\n                // TODO Reverse the order of the arguments?\n                incoming = context.merge(incoming, keyObject);\n            }\n        } catch (e) {\n            // If dataId was provided, tolerate failure of policies.identify.\n            if (!dataId) throw e;\n        }\n        if (\"string\" === typeof dataId) {\n            var dataRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);\n            // Avoid processing the same entity object using the same selection\n            // set more than once. We use an array instead of a Set since most\n            // entity IDs will be written using only one selection set, so the\n            // size of this array is likely to be very small, meaning indexOf is\n            // likely to be faster than Set.prototype.has.\n            var sets = context.written[dataId] || (context.written[dataId] = []);\n            if (sets.indexOf(selectionSet) >= 0) return dataRef;\n            sets.push(selectionSet);\n            // If we're about to write a result object into the store, but we\n            // happen to know that the exact same (===) result object would be\n            // returned if we were to reread the result with the same inputs,\n            // then we can skip the rest of the processSelectionSet work for\n            // this object, and immediately return a Reference to it.\n            if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n                return dataRef;\n            }\n            var previous_1 = context.incomingById.get(dataId);\n            if (previous_1) {\n                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n                fieldNodeSet.forEach(function(field) {\n                    return previous_1.fieldNodeSet.add(field);\n                });\n            } else {\n                context.incomingById.set(dataId, {\n                    storeObject: incoming,\n                    // Save a reference to mergeTree only if it is not empty, because\n                    // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n                    // reused for entirely different parts of the result tree.\n                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n                    fieldNodeSet: fieldNodeSet\n                });\n            }\n            return dataRef;\n        }\n        return incoming;\n    };\n    StoreWriter.prototype.processFieldValue = function(value, field, context, mergeTree) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            // In development, we need to clone scalar values so that they can be\n            // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n            // it's cheaper to store the scalar values directly in the cache.\n            return globalThis.__DEV__ !== false ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.cloneDeep)(value) : value;\n        }\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(value)) {\n            return value.map(function(item, i) {\n                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n                maybeRecycleChildMergeTree(mergeTree, i);\n                return value;\n            });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            mergeTree: mergeTree\n        });\n    };\n    // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n    // some additions for tracking @client and @defer directives.\n    StoreWriter.prototype.flattenFields = function(selectionSet, result, context, typename) {\n        if (typename === void 0) {\n            typename = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap);\n        }\n        var fieldMap = new Map();\n        var policies = this.cache.policies;\n        var limitingTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false); // No need for WeakMap, since limitingTrie does not escape.\n        (function flatten(selectionSet, inheritedContext) {\n            var visitedNode = limitingTrie.lookup(selectionSet, // Because we take inheritedClientOnly and inheritedDeferred into\n            // consideration here (in addition to selectionSet), it's possible for\n            // the same selection set to be flattened more than once, if it appears\n            // in the query with different @client and/or @directive configurations.\n            inheritedContext.clientOnly, inheritedContext.deferred);\n            if (visitedNode.visited) return;\n            visitedNode.visited = true;\n            selectionSet.selections.forEach(function(selection) {\n                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.shouldInclude)(selection, context.variables)) return;\n                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;\n                if (// Since the presence of @client or @defer on this field can only\n                // cause clientOnly or deferred to become true, we can skip the\n                // forEach loop if both clientOnly and deferred are already true.\n                !(clientOnly && deferred) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isNonEmptyArray)(selection.directives)) {\n                    selection.directives.forEach(function(dir) {\n                        var name = dir.name.value;\n                        if (name === \"client\") clientOnly = true;\n                        if (name === \"defer\") {\n                            var args = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.argumentsObjectFromField)(dir, context.variables);\n                            // The @defer directive takes an optional args.if boolean\n                            // argument, similar to @include(if: boolean). Note that\n                            // @defer(if: false) does not make context.deferred false, but\n                            // instead behaves as if there was no @defer directive.\n                            if (!args || args.if !== false) {\n                                deferred = true;\n                            }\n                        // TODO In the future, we may want to record args.label using\n                        // context.deferred, if a label is specified.\n                        }\n                    });\n                }\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {\n                    var existing = fieldMap.get(selection);\n                    if (existing) {\n                        // If this field has been visited along another recursive path\n                        // before, the final context should have clientOnly or deferred set\n                        // to true only if *all* paths have the directive (hence the &&).\n                        clientOnly = clientOnly && existing.clientOnly;\n                        deferred = deferred && existing.deferred;\n                    }\n                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n                } else {\n                    var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getFragmentFromSelection)(selection, context.lookupFragment);\n                    if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_14__.Kind.FRAGMENT_SPREAD) {\n                        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(13, selection.name.value);\n                    }\n                    if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n                    }\n                }\n            });\n        })(selectionSet, context);\n        return fieldMap;\n    };\n    StoreWriter.prototype.applyMerges = function(mergeTree, existing, incoming, context, getStorageArgs) {\n        var _a;\n        var _this = this;\n        if (mergeTree.map.size && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incoming)) {\n            var e_1 = // Items in the same position in different arrays are not\n            // necessarily related to each other, so when incoming is an array\n            // we process its elements as if there was no existing data.\n            !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming) && // Likewise, existing must be either a Reference or a StoreObject\n            // in order for its fields to be safe to merge with the fields of\n            // the incoming object.\n            ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(existing)) ? existing : void 0;\n            // This narrowing is implied by mergeTree.map.size > 0 and\n            // !isReference(incoming), though TypeScript understandably cannot\n            // hope to infer this type.\n            var i_1 = incoming;\n            // The options.storage objects provided to read and merge functions\n            // are derived from the identity of the parent object plus a\n            // sequence of storeFieldName strings/numbers identifying the nested\n            // field name path of each field value to be merged.\n            if (e_1 && !getStorageArgs) {\n                getStorageArgs = [\n                    (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(e_1) ? e_1.__ref : e_1\n                ];\n            }\n            // It's possible that applying merge functions to this subtree will\n            // not change the incoming data, so this variable tracks the fields\n            // that did change, so we can create a new incoming object when (and\n            // only when) at least one incoming field has changed. We use a Map\n            // to preserve the type of numeric keys.\n            var changedFields_1;\n            var getValue_1 = function(from, name) {\n                return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n            };\n            mergeTree.map.forEach(function(childTree, storeFieldName) {\n                var eVal = getValue_1(e_1, storeFieldName);\n                var iVal = getValue_1(i_1, storeFieldName);\n                // If we have no incoming data, leave any existing data untouched.\n                if (void 0 === iVal) return;\n                if (getStorageArgs) {\n                    getStorageArgs.push(storeFieldName);\n                }\n                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n                if (aVal !== iVal) {\n                    changedFields_1 = changedFields_1 || new Map();\n                    changedFields_1.set(storeFieldName, aVal);\n                }\n                if (getStorageArgs) {\n                    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(getStorageArgs.pop() === storeFieldName);\n                }\n            });\n            if (changedFields_1) {\n                // Shallow clone i so we can add changed fields to it.\n                incoming = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(i_1) ? i_1.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, i_1);\n                changedFields_1.forEach(function(value, name) {\n                    incoming[name] = value;\n                });\n            }\n        }\n        if (mergeTree.info) {\n            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n        }\n        return incoming;\n    };\n    return StoreWriter;\n}();\n\nvar emptyMergeTreePool = [];\nfunction getChildMergeTree(_a, name) {\n    var map = _a.map;\n    if (!map.has(name)) {\n        map.set(name, emptyMergeTreePool.pop() || {\n            map: new Map()\n        });\n    }\n    return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n    if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n    if (!left || mergeTreeIsEmpty(left)) return right;\n    var info = left.info && right.info ? (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, left.info), right.info) : left.info || right.info;\n    var needToMergeMaps = left.map.size && right.map.size;\n    var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n    var merged = {\n        info: info,\n        map: map\n    };\n    if (needToMergeMaps) {\n        var remainingRightKeys_1 = new Set(right.map.keys());\n        left.map.forEach(function(leftTree, key) {\n            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n            remainingRightKeys_1.delete(key);\n        });\n        remainingRightKeys_1.forEach(function(key) {\n            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n        });\n    }\n    return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n    return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(_a, name) {\n    var map = _a.map;\n    var childTree = map.get(name);\n    if (childTree && mergeTreeIsEmpty(childTree)) {\n        emptyMergeTreePool.push(childTree);\n        map.delete(name);\n    }\n}\nvar warnings = new Set();\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n    var getChild = function(objOrRef) {\n        var child = store.getFieldValue(objOrRef, storeFieldName);\n        return typeof child === \"object\" && child;\n    };\n    var existing = getChild(existingRef);\n    if (!existing) return;\n    var incoming = getChild(incomingObj);\n    if (!incoming) return;\n    // It's always safe to replace a reference, since it refers to data\n    // safely stored elsewhere.\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing)) return;\n    // If the values are structurally equivalent, we do not need to worry\n    // about incoming replacing existing.\n    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(existing, incoming)) return;\n    // If we're replacing every key of the existing object, then the\n    // existing data would be overwritten even if the objects were\n    // normalized, so warning would not be helpful here.\n    if (Object.keys(existing).every(function(key) {\n        return store.getFieldValue(incoming, key) !== void 0;\n    })) {\n        return;\n    }\n    var parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName);\n    var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n    // Avoid warning more than once for the same type and field name.\n    if (warnings.has(typeDotName)) return;\n    warnings.add(typeDotName);\n    var childTypenames = [];\n    // Arrays do not have __typename fields, and always need a custom merge\n    // function, even if their elements are normalized entities.\n    if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(existing) && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming)) {\n        [\n            existing,\n            incoming\n        ].forEach(function(child) {\n            var typename = store.getFieldValue(child, \"__typename\");\n            if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n                childTypenames.push(typename);\n            }\n        });\n    }\n    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(14, fieldName, parentType, childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\", typeDotName, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, existing), (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, incoming));\n} //# sourceMappingURL=writeToStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/ApolloClient.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/ApolloClient.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloClient: () => (/* binding */ ApolloClient),\n/* harmony export */   mergeOptions: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../version.js */ \"(ssr)/./node_modules/@apollo/client/version.js\");\n/* harmony import */ var _link_http_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../link/http/index.js */ \"(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js\");\n/* harmony import */ var _QueryManager_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./QueryManager.js */ \"(ssr)/./node_modules/@apollo/client/core/QueryManager.js\");\n/* harmony import */ var _LocalState_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./LocalState.js */ \"(ssr)/./node_modules/@apollo/client/core/LocalState.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\n\n\n\n\nvar hasSuggestedDevtools = false;\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\n\n\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an `ApolloLink` instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through `Observable` instances.\n */ var ApolloClient = /** @class */ function() {\n    /**\n     * Constructs an instance of `ApolloClient`.\n     *\n     * @example\n     * ```js\n     * import { ApolloClient, InMemoryCache } from '@apollo/client';\n     *\n     * const cache = new InMemoryCache();\n     *\n     * const client = new ApolloClient({\n     *   // Provide required constructor fields\n     *   cache: cache,\n     *   uri: 'http://localhost:4000/',\n     *\n     *   // Provide some optional constructor fields\n     *   name: 'react-web-client',\n     *   version: '1.3',\n     *   queryDeduplication: false,\n     *   defaultOptions: {\n     *     watchQuery: {\n     *       fetchPolicy: 'cache-and-network',\n     *     },\n     *   },\n     * });\n     * ```\n     */ function ApolloClient(options) {\n        var _this = this;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        if (!options.cache) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(15);\n        }\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, documentTransform = options.documentTransform, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, defaultContext = options.defaultContext, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? cache.assumeImmutableResults : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version, devtools = options.devtools;\n        var link = options.link;\n        if (!link) {\n            link = uri ? new _link_http_index_js__WEBPACK_IMPORTED_MODULE_2__.HttpLink({\n                uri: uri,\n                credentials: credentials,\n                headers: headers\n            }) : _link_core_index_js__WEBPACK_IMPORTED_MODULE_3__.ApolloLink.empty();\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        this.devtoolsConfig = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, devtools), {\n            enabled: (devtools === null || devtools === void 0 ? void 0 : devtools.enabled) || connectToDevTools\n        });\n        if (this.devtoolsConfig.enabled === undefined) {\n            this.devtoolsConfig.enabled = globalThis.__DEV__ !== false;\n        }\n        if (ssrForceFetchDelay) {\n            setTimeout(function() {\n                return _this.disableNetworkFetches = false;\n            }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.watchFragment = this.watchFragment.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        this.version = _version_js__WEBPACK_IMPORTED_MODULE_5__.version;\n        this.localState = new _LocalState_js__WEBPACK_IMPORTED_MODULE_6__.LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher\n        });\n        this.queryManager = new _QueryManager_js__WEBPACK_IMPORTED_MODULE_7__.QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            defaultContext: defaultContext,\n            documentTransform: documentTransform,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: this.devtoolsConfig.enabled ? function() {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.getQueryStore(),\n                            mutations: _this.queryManager.mutationStore || {}\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true)\n                    });\n                }\n            } : void 0\n        });\n        if (this.devtoolsConfig.enabled) this.connectToDevTools();\n    }\n    ApolloClient.prototype.connectToDevTools = function() {\n        if (true) {\n            return;\n        }\n        var windowWithDevTools = window;\n        var devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n        (windowWithDevTools[devtoolsSymbol] = windowWithDevTools[devtoolsSymbol] || []).push(this);\n        windowWithDevTools.__APOLLO_CLIENT__ = this;\n        /**\n         * Suggest installing the devtools for developers who don't have them\n         */ if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n            hasSuggestedDevtools = true;\n            if (window.document && window.top === window.self && /^(https?|file):$/.test(window.location.protocol)) {\n                setTimeout(function() {\n                    if (!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n                        var nav = window.navigator;\n                        var ua = nav && nav.userAgent;\n                        var url = void 0;\n                        if (typeof ua === \"string\") {\n                            if (ua.indexOf(\"Chrome/\") > -1) {\n                                url = \"https://chrome.google.com/webstore/detail/\" + \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n                            } else if (ua.indexOf(\"Firefox/\") > -1) {\n                                url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n                            }\n                        }\n                        if (url) {\n                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.log(\"Download the Apollo DevTools for a better development \" + \"experience: %s\", url);\n                        }\n                    }\n                }, 10000);\n            }\n        }\n    };\n    Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n        /**\n         * The `DocumentTransform` used to modify GraphQL documents before a request\n         * is made. If a custom `DocumentTransform` is not provided, this will be the\n         * default document transform.\n         */ get: function() {\n            return this.queryManager.documentTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Call this method to terminate any active client processes, making it safe\n     * to dispose of this `ApolloClient` instance.\n     */ ApolloClient.prototype.stop = function() {\n        this.queryManager.stop();\n    };\n    /**\n     * This watches the cache store of the query according to the options specified and\n     * returns an `ObservableQuery`. We can subscribe to this `ObservableQuery` and\n     * receive updated results through an observer when the cache store changes.\n     *\n     * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n     * it uses Apollo's store in order to reactively deliver updates to your query results.\n     *\n     * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n     * first and last name and this person has a particular object identifier, provided by\n     * dataIdFromObject. Later, a different query fetches that same person's\n     * first and last name and the first name has now changed. Then, any observers associated\n     * with the results of the first query will be updated with a new result object.\n     *\n     * Note that if the cache does not change, the subscriber will *not* be notified.\n     *\n     * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n     * a description of store reactivity.\n     */ ApolloClient.prototype.watchQuery = function(options) {\n        if (this.defaultOptions.watchQuery) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.watchQuery, options);\n        }\n        // XXX Overwriting options is probably not the best way to do this long term...\n        if (this.disableNetworkFetches && (options.fetchPolicy === \"network-only\" || options.fetchPolicy === \"cache-and-network\")) {\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                fetchPolicy: \"cache-first\"\n            });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    /**\n     * This resolves a single query according to the options specified and\n     * returns a `Promise` which is either resolved with the resulting data\n     * or rejected with an error.\n     *\n     * @param options - An object of type `QueryOptions` that allows us to\n     * describe how this query should be treated e.g. whether it should hit the\n     * server at all or just resolve from the cache, etc.\n     */ ApolloClient.prototype.query = function(options) {\n        if (this.defaultOptions.query) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.query, options);\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.fetchPolicy !== \"cache-and-network\", 16);\n        if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                fetchPolicy: \"cache-first\"\n            });\n        }\n        return this.queryManager.query(options);\n    };\n    /**\n     * This resolves a single mutation according to the options specified and returns a\n     * Promise which is either resolved with the resulting data or rejected with an\n     * error. In some cases both `data` and `errors` might be undefined, for example\n     * when `errorPolicy` is set to `'ignore'`.\n     *\n     * It takes options as an object with the following keys and values:\n     */ ApolloClient.prototype.mutate = function(options) {\n        if (this.defaultOptions.mutate) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    /**\n     * This subscribes to a graphql subscription according to the options specified and returns an\n     * `Observable` which either emits received data or an error.\n     */ ApolloClient.prototype.subscribe = function(options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL query without making a network request. This method will start at\n     * the root query. To start at a specific id returned by `dataIdFromObject`\n     * use `readFragment`.\n     *\n     * @param optimistic - Set to `true` to allow `readQuery` to return\n     * optimistic results. Is `false` by default.\n     */ ApolloClient.prototype.readQuery = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return this.cache.readQuery(options, optimistic);\n    };\n    /**\n     * Watches the cache store of the fragment according to the options specified\n     * and returns an `Observable`. We can subscribe to this\n     * `Observable` and receive updated results through an\n     * observer when the cache store changes.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @since 3.10.0\n     * @param options - An object of type `WatchFragmentOptions` that allows\n     * the cache to identify the fragment and optionally specify whether to react\n     * to optimistic updates.\n     */ ApolloClient.prototype.watchFragment = function(options) {\n        return this.cache.watchFragment(options);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL fragment without making a network request. This method will read a\n     * GraphQL fragment from any arbitrary id that is currently cached, unlike\n     * `readQuery` which will only read from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @param optimistic - Set to `true` to allow `readFragment` to return\n     * optimistic results. Is `false` by default.\n     */ ApolloClient.prototype.readFragment = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return this.cache.readFragment(options, optimistic);\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL query directly to\n     * the store. This method will start at the root query. To start at a\n     * specific id returned by `dataIdFromObject` then use `writeFragment`.\n     */ ApolloClient.prototype.writeQuery = function(options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL fragment directly to\n     * the store. This method will write to a GraphQL fragment from any arbitrary\n     * id that is currently cached, unlike `writeQuery` which will only write\n     * from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are writing. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     */ ApolloClient.prototype.writeFragment = function(options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function(cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function(payload) {\n        return (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_8__.execute)(this.link, payload);\n    };\n    /**\n     * Resets your entire store by clearing out your cache and then re-executing\n     * all of your active queries. This makes it so that you may guarantee that\n     * there is no data left in your store from a time before you called this\n     * method.\n     *\n     * `resetStore()` is useful when your user just logged out. You’ve removed the\n     * user session, and you now want to make sure that any references to data you\n     * might have fetched while the user session was active is gone.\n     *\n     * It is important to remember that `resetStore()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ ApolloClient.prototype.resetStore = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n            return _this.queryManager.clearStore({\n                discardWatches: false\n            });\n        }).then(function() {\n            return Promise.all(_this.resetStoreCallbacks.map(function(fn) {\n                return fn();\n            }));\n        }).then(function() {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    /**\n     * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n     * not refetch any active queries.\n     */ ApolloClient.prototype.clearStore = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n            return _this.queryManager.clearStore({\n                discardWatches: true\n            });\n        }).then(function() {\n            return Promise.all(_this.clearStoreCallbacks.map(function(fn) {\n                return fn();\n            }));\n        });\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * reset. `onResetStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ ApolloClient.prototype.onResetStore = function(cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function() {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function(c) {\n                return c !== cb;\n            });\n        };\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * cleared. `onClearStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ ApolloClient.prototype.onClearStore = function(cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function() {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function(c) {\n                return c !== cb;\n            });\n        };\n    };\n    /**\n     * Refetches all of your active queries.\n     *\n     * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n     *\n     * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n     */ ApolloClient.prototype.reFetchObservableQueries = function(includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    /**\n     * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n     *\n     * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n     *\n     * It is important to remember that `refetchQueries()` *will* refetch specified active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ ApolloClient.prototype.refetchQueries = function(options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function(result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        // In case you need the raw results immediately, without awaiting\n        // Promise.all(results):\n        result.queries = queries;\n        result.results = results;\n        // If you decide to ignore the result Promise because you're using\n        // result.queries and result.results instead, you shouldn't have to worry\n        // about preventing uncaught rejections for the Promise.all result.\n        result.catch(function(error) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.debug(17, error);\n        });\n        return result;\n    };\n    /**\n     * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n     * query ID strings.\n     *\n     * An \"active\" query is one that has observers and a `fetchPolicy` other than\n     * \"standby\" or \"cache-only\".\n     *\n     * You can include all `ObservableQuery` objects (including the inactive ones)\n     * by passing \"all\" instead of \"active\", or you can include just a subset of\n     * active queries by passing an array of query names or DocumentNode objects.\n     */ ApolloClient.prototype.getObservableQueries = function(include) {\n        if (include === void 0) {\n            include = \"active\";\n        }\n        return this.queryManager.getObservableQueries(include);\n    };\n    /**\n     * Exposes the cache's complete state, in a serializable format for later restoration.\n     */ ApolloClient.prototype.extract = function(optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    /**\n     * Replaces existing state in the cache (if any) with the values expressed by\n     * `serializedState`.\n     *\n     * Called when hydrating a cache (server side rendering, or offline storage),\n     * and also (potentially) during hot reloads.\n     */ ApolloClient.prototype.restore = function(serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    /**\n     * Add additional local resolvers.\n     */ ApolloClient.prototype.addResolvers = function(resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    /**\n     * Set (override existing) local resolvers.\n     */ ApolloClient.prototype.setResolvers = function(resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    /**\n     * Get all registered local resolvers.\n     */ ApolloClient.prototype.getResolvers = function() {\n        return this.localState.getResolvers();\n    };\n    /**\n     * Set a custom local state fragment matcher.\n     */ ApolloClient.prototype.setLocalStateFragmentMatcher = function(fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    /**\n     * Define a new ApolloLink (or link chain) that Apollo Client will use.\n     */ ApolloClient.prototype.setLink = function(newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    Object.defineProperty(ApolloClient.prototype, \"defaultContext\", {\n        get: function() {\n            return this.queryManager.defaultContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ApolloClient;\n}();\n\nif (globalThis.__DEV__ !== false) {\n    ApolloClient.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_9__.getApolloClientMemoryInternals;\n} //# sourceMappingURL=ApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/ApolloClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/LocalState.js":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/core/LocalState.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalState: () => (/* binding */ LocalState)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/predicates.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n\n\n\n\n\nvar LocalState = /** @class */ function() {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function(resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function(resolverGroup) {\n                _this.resolvers = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(_this.resolvers, resolverGroup);\n            });\n        } else {\n            this.resolvers = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function(resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function() {\n        return this.resolvers || {};\n    };\n    // Run local client resolvers against the incoming query and remote data.\n    // Locally resolved field values are merged with the incoming remote data,\n    // and returned. Note that locally resolved fields will overwrite\n    // remote data using the same field name.\n    LocalState.prototype.runResolvers = function(_a) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, arguments, void 0, function(_b) {\n            var document = _b.document, remoteResult = _b.remoteResult, context = _b.context, variables = _b.variables, _c = _b.onlyRunForcedResolvers, onlyRunForcedResolvers = _c === void 0 ? false : _c;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_d) {\n                if (document) {\n                    return [\n                        2 /*return*/ ,\n                        this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function(localResult) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, remoteResult), {\n                                data: localResult.result\n                            });\n                        })\n                    ];\n                }\n                return [\n                    2 /*return*/ ,\n                    remoteResult\n                ];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function(fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function() {\n        return this.fragmentMatcher;\n    };\n    // Client queries contain everything in the incoming document (if a @client\n    // directive is found).\n    LocalState.prototype.clientQuery = function(document) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.hasDirectives)([\n            \"client\"\n        ], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    // Server queries are stripped of all @client based selection sets.\n    LocalState.prototype.serverQuery = function(document) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.removeClientSetsFromDocument)(document);\n    };\n    LocalState.prototype.prepareContext = function(context) {\n        var cache = this.cache;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, context), {\n            cache: cache,\n            // Getting an entry's cache key is useful for local state resolvers.\n            getCacheKey: function(obj) {\n                return cache.identify(obj);\n            }\n        });\n    };\n    // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n    // @client @export fields locally, then pass the resolved values back to be\n    // used alongside the original operation variables.\n    LocalState.prototype.addExportedVariables = function(document_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, arguments, void 0, function(document, variables, context) {\n            if (variables === void 0) {\n                variables = {};\n            }\n            if (context === void 0) {\n                context = {};\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                if (document) {\n                    return [\n                        2 /*return*/ ,\n                        this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function(data) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, variables), data.exportedVariables);\n                        })\n                    ];\n                }\n                return [\n                    2 /*return*/ ,\n                    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, variables)\n                ];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function(document) {\n        var forceResolvers = false;\n        (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n            Directive: {\n                enter: function(node) {\n                    if (node.name.value === \"client\" && node.arguments) {\n                        forceResolvers = node.arguments.some(function(arg) {\n                            return arg.name.value === \"always\" && arg.value.kind === \"BooleanValue\" && arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return graphql__WEBPACK_IMPORTED_MODULE_5__.BREAK;\n                        }\n                    }\n                }\n            }\n        });\n        return forceResolvers;\n    };\n    // Query the cache and return matching data.\n    LocalState.prototype.buildRootValueFromCache = function(document, variables) {\n        return this.cache.diff({\n            query: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.buildQueryFromSelectionSet)(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function(document_1, rootValue_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, arguments, void 0, function(document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            if (context === void 0) {\n                context = {};\n            }\n            if (variables === void 0) {\n                variables = {};\n            }\n            if (fragmentMatcher === void 0) {\n                fragmentMatcher = function() {\n                    return true;\n                };\n            }\n            if (onlyRunForcedResolvers === void 0) {\n                onlyRunForcedResolvers = false;\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_b) {\n                mainDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getMainDefinition)(document);\n                fragments = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getFragmentDefinitions)(document);\n                fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.createFragmentMap)(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : \"Query\";\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, context), {\n                        cache: cache,\n                        client: client\n                    }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers\n                };\n                isClientFieldDescendant = false;\n                return [\n                    2 /*return*/ ,\n                    this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function(result) {\n                        return {\n                            result: result,\n                            exportedVariables: execContext.exportedVariables\n                        };\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function(selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [\n                    rootValue\n                ];\n                execute = function(selection) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(_this, void 0, void 0, function() {\n                        var fragment, typeCondition;\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                            if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                                // Skip selections without @client directives\n                                // (still processing if one of the ancestors or one of the child fields has @client directive)\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.shouldInclude)(selection, variables)) {\n                                // Skip this entirely.\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isField)(selection)) {\n                                return [\n                                    2 /*return*/ ,\n                                    this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function(fieldResult) {\n                                        var _a;\n                                        if (typeof fieldResult !== \"undefined\") {\n                                            resultsToMerge.push((_a = {}, _a[(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.resultKeyNameFromField)(selection)] = fieldResult, _a));\n                                        }\n                                    })\n                                ];\n                            }\n                            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isInlineFragment)(selection)) {\n                                fragment = selection;\n                            } else {\n                                // This is a named fragment.\n                                fragment = fragmentMap[selection.name.value];\n                                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 18, selection.name.value);\n                            }\n                            if (fragment && fragment.typeCondition) {\n                                typeCondition = fragment.typeCondition.name.value;\n                                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                    return [\n                                        2 /*return*/ ,\n                                        this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function(fragmentResult) {\n                                            resultsToMerge.push(fragmentResult);\n                                        })\n                                    ];\n                                }\n                            }\n                            return [\n                                2 /*return*/ \n                            ];\n                        });\n                    });\n                };\n                return [\n                    2 /*return*/ ,\n                    Promise.all(selectionSet.selections.map(execute)).then(function() {\n                        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeepArray)(resultsToMerge);\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function(field, isClientFieldDescendant, rootValue, execContext) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                if (!rootValue) {\n                    return [\n                        2 /*return*/ ,\n                        null\n                    ];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.resultKeyNameFromField)(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                // Usually all local resolvers are run when passing through here, but\n                // if we've specifically identified that we only want to run forced\n                // resolvers (that is, resolvers for fields marked with\n                // `@client(always: true)`), then we'll skip running non-forced resolvers.\n                if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(// In case the resolve function accesses reactive variables,\n                            // set cacheSlot to the current cache instance.\n                            _cache_index_js__WEBPACK_IMPORTED_MODULE_9__.cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.argumentsObjectFromField)(field, variables),\n                                execContext.context,\n                                {\n                                    field: field,\n                                    fragmentMap: execContext.fragmentMap\n                                }\n                            ]));\n                        }\n                    }\n                }\n                return [\n                    2 /*return*/ ,\n                    resultPromise.then(function(result) {\n                        var _a, _b;\n                        if (result === void 0) {\n                            result = defaultResult;\n                        }\n                        // If an @export directive is associated with the current field, store\n                        // the `as` export variable name and current result for later use.\n                        if (field.directives) {\n                            field.directives.forEach(function(directive) {\n                                if (directive.name.value === \"export\" && directive.arguments) {\n                                    directive.arguments.forEach(function(arg) {\n                                        if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        // Handle all scalar types here.\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        // From here down, the field has a selection set, which means it's trying\n                        // to query a GraphQLObjectType.\n                        if (result == null) {\n                            // Basically any field in a GraphQL response can be null, or missing\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function(d) {\n                            return d.name.value === \"client\";\n                        })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        // Returned value is an object, and the query has a sub-selection. Recurse.\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function(field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function(item) {\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse.\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            // This is an object, run the selection set on it.\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    // Collect selection nodes on paths from document root down to all @client directives.\n    // This function takes into account transitive fragment spreads.\n    // Complexity equals to a single `visit` over the full document.\n    LocalState.prototype.collectSelectionsToResolve = function(mainDefinition, fragmentMap) {\n        var isSingleASTNode = function(node) {\n            return !Array.isArray(node);\n        };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(definitionNode, {\n                    Directive: function(node, _, __, ___, ancestors) {\n                        if (node.name.value === \"client\") {\n                            ancestors.forEach(function(node) {\n                                if (isSingleASTNode(node) && (0,graphql__WEBPACK_IMPORTED_MODULE_10__.isSelectionNode)(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function(spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 19, spread.name.value);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            // Fragment for this spread contains @client directive (either directly or transitively)\n                            // Collect selection nodes on paths from the root down to fields with the @client directive\n                            ancestors.forEach(function(node) {\n                                if (isSingleASTNode(node) && (0,graphql__WEBPACK_IMPORTED_MODULE_10__.isSelectionNode)(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function(selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    }\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}();\n //# sourceMappingURL=LocalState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/LocalState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/core/ObservableQuery.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObservableQuery: () => (/* binding */ ObservableQuery),\n/* harmony export */   logMissingFieldErrors: () => (/* binding */ logMissingFieldErrors),\n/* harmony export */   reobserveCacheFirst: () => (/* binding */ reobserveCacheFirst)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _equalByQuery_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./equalByQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\");\n\n\n\n\n\n\n\nvar assign = Object.assign, hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = _super.call(this, function(observer) {\n            // Zen Observable has its own error function, so in order to log correctly\n            // we need to provide a custom error callback.\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            } catch (_a) {}\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            // Deliver most recent error or result.\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            } else if (last && last.result) {\n                observer.next && observer.next(last.result);\n            }\n            // Initiate observation of this query if it hasn't been reported to\n            // the QueryManager yet.\n            if (first) {\n                // Blindly catching here prevents unhandled promise rejections,\n                // and is safe because the ObservableQuery handles this error with\n                // this.observer.error, so we're not just swallowing the error by\n                // ignoring it here.\n                _this.reobserve().catch(function() {});\n            }\n            return function() {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        // related classes\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        // active state\n        _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n        _this.isTornDown = false;\n        _this.subscribeToMore = _this.subscribeToMore.bind(_this);\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        _f = options.initialFetchPolicy, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n        _this.options = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n            // Remember the initial options.fetchPolicy so we can revert back to this\n            // policy when variables change. This information can also be specified\n            // (or overridden) by providing options.initialFetchPolicy explicitly.\n            initialFetchPolicy: initialFetchPolicy,\n            // This ensures this.options.fetchPolicy always has a string value, in\n            // case options.fetchPolicy was not provided.\n            fetchPolicy: fetchPolicy\n        });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getOperationDefinition)(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        // The `query` computed property will always reflect the document transformed\n        // by the last run query. `this.options.query` will always reflect the raw\n        // untransformed query to ensure document transforms with runtime conditionals\n        // are run on the original document.\n        get: function() {\n            return this.lastQuery || this.options.query;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        // Computed shorthand for this.options.variables, preserved for\n        // backwards compatibility.\n        /**\n         * An object containing the variables that were provided for the query.\n         */ get: function() {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function() {\n        var _this = this;\n        return new Promise(function(resolve, reject) {\n            // TODO: this code doesn’t actually make sense insofar as the observer\n            // will never exist in this.observers due how zen-observable wraps observables.\n            // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n            var observer = {\n                next: function(result) {\n                    resolve(result);\n                    // Stop the query within the QueryManager if we can before\n                    // this function returns.\n                    //\n                    // We do this in order to prevent observers piling up within\n                    // the QueryManager. Notice that we only fully unsubscribe\n                    // from the subscription in a setTimeout(..., 0)  call. This call can\n                    // actually be handled by the browser at a much later time. If queries\n                    // are fired in the meantime, observers that should have been removed\n                    // from the QueryManager will continue to fire, causing an unnecessary\n                    // performance hit.\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function() {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    /** @internal */ ObservableQuery.prototype.resetDiff = function() {\n        this.queryInfo.resetDiff();\n    };\n    ObservableQuery.prototype.getCurrentResult = function(saveAsLastResult) {\n        if (saveAsLastResult === void 0) {\n            saveAsLastResult = true;\n        }\n        // Use the last result as long as the variables match this.variables.\n        var lastResult = this.getLastResult(true);\n        var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.ready;\n        var result = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, lastResult), {\n            loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.isNetworkRequestInFlight)(networkStatus),\n            networkStatus: networkStatus\n        });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (// These fetch policies should never deliver data from the cache, unless\n        // redelivering a previously delivered result.\n        skipCacheDataFor(fetchPolicy) || // If this.options.query has @client(always: true) fields, we cannot\n        // trust diff.result, since it was read from the cache without running\n        // local resolvers (and it's too late to run resolvers now, since we must\n        // return a result synchronously).\n        this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {\n        // Fall through.\n        } else if (this.waitForOwnResult) {\n            // This would usually be a part of `QueryInfo.getDiff()`.\n            // which we skip in the waitForOwnResult case since we are not\n            // interested in the diff.\n            this.queryInfo[\"updateWatch\"]();\n        } else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                // Similar to setting result.partial to false, but taking advantage of the\n                // falsiness of missing fields.\n                delete result.partial;\n                // If the diff is complete, and we're using a FetchPolicy that\n                // terminates after a complete cache read, we can assume the next result\n                // we receive will have NetworkStatus.ready and !loading.\n                if (diff.complete && result.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.loading && (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n                    result.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.ready;\n                    result.loading = false;\n                }\n            } else {\n                result.partial = true;\n            }\n            if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    // Compares newResult to the snapshot we took of this.lastResult when it was\n    // first received.\n    ObservableQuery.prototype.isDifferentFromLastResult = function(newResult, variables) {\n        if (!this.last) {\n            return true;\n        }\n        var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ? !(0,_equalByQuery_js__WEBPACK_IMPORTED_MODULE_5__.equalByQuery)(this.query, this.last.result, newResult, this.variables) : !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.last.result, newResult);\n        return resultIsDifferent || variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.last.variables, variables);\n    };\n    ObservableQuery.prototype.getLast = function(key, variablesMustMatch) {\n        var last = this.last;\n        if (last && last[key] && (!variablesMustMatch || (0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    ObservableQuery.prototype.getLastResult = function(variablesMustMatch) {\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.getLastError = function(variablesMustMatch) {\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.resetLastResults = function() {\n        delete this.last;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function() {\n        this.queryManager.resetErrors(this.queryId);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results.\n     * This method should be preferred over `setVariables` in most use cases.\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ ObservableQuery.prototype.refetch = function(variables) {\n        var _a;\n        var reobserveOptions = {\n            // Always disable polling for refetches.\n            pollInterval: 0\n        };\n        // Unless the provided fetchPolicy always consults the network\n        // (no-cache, network-only, or cache-and-network), override it with\n        // network-only to force the refetch for this fetchQuery call.\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === \"cache-and-network\") {\n            reobserveOptions.fetchPolicy = fetchPolicy;\n        } else if (fetchPolicy === \"no-cache\") {\n            reobserveOptions.fetchPolicy = \"no-cache\";\n        } else {\n            reobserveOptions.fetchPolicy = \"network-only\";\n        }\n        if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n            var queryDef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getQueryDefinition)(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function(v) {\n                return v.variable.name.value === \"variables\";\n            })) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(20, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n            }\n        }\n        if (variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.options.variables, variables)) {\n            // Update the existing options with new variables\n            reobserveOptions.variables = this.options.variables = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.refetch);\n    };\n    /**\n     * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n     */ ObservableQuery.prototype.fetchMore = function(fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, fetchMoreOptions.query ? fetchMoreOptions : (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.options), {\n            query: this.options.query\n        }), fetchMoreOptions), {\n            variables: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.options.variables), fetchMoreOptions.variables)\n        })), {\n            // The fetchMore request goes immediately to the network and does\n            // not automatically write its result to the cache (hence no-cache\n            // instead of network-only), because we allow the caller of\n            // fetchMore to provide an updateQuery callback that determines how\n            // the data gets written to the cache.\n            fetchPolicy: \"no-cache\"\n        });\n        combinedOptions.query = this.transformDocument(combinedOptions.query);\n        var qid = this.queryManager.generateQueryId();\n        // If a temporary query is passed to `fetchMore`, we don't want to store\n        // it as the last query result since it may be an optimized query for\n        // pagination. We will however run the transforms on the original document\n        // as well as the document passed in `fetchMoreOptions` to ensure the cache\n        // uses the most up-to-date document which may rely on runtime conditionals.\n        this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n        // Simulate a loading result for the original query with\n        // result.networkStatus === NetworkStatus.fetchMore.\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        var updateQuery = fetchMoreOptions === null || fetchMoreOptions === void 0 ? void 0 : fetchMoreOptions.updateQuery;\n        var isCached = this.options.fetchPolicy !== \"no-cache\";\n        if (!isCached) {\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(updateQuery, 21);\n        }\n        return this.queryManager.fetchQuery(qid, combinedOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore).then(function(fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            if (isCached) {\n                // Performing this cache update inside a cache.batch transaction ensures\n                // any affected cache.watch watchers are notified at most once about any\n                // updates. Most watchers will be using the QueryInfo class, which\n                // responds to notifications by calling reobserveCacheFirst to deliver\n                // fetchMore cache results back to this ObservableQuery.\n                _this.queryManager.cache.batch({\n                    update: function(cache) {\n                        var updateQuery = fetchMoreOptions.updateQuery;\n                        if (updateQuery) {\n                            cache.updateQuery({\n                                query: _this.query,\n                                variables: _this.variables,\n                                returnPartialData: true,\n                                optimistic: false\n                            }, function(previous) {\n                                return updateQuery(previous, {\n                                    fetchMoreResult: fetchMoreResult.data,\n                                    variables: combinedOptions.variables\n                                });\n                            });\n                        } else {\n                            // If we're using a field policy instead of updateQuery, the only\n                            // thing we need to do is write the new data to the cache using\n                            // combinedOptions.variables (instead of this.variables, which is\n                            // what this.updateQuery uses, because it works by abusing the\n                            // original field value, keyed by the original variables).\n                            cache.writeQuery({\n                                query: combinedOptions.query,\n                                variables: combinedOptions.variables,\n                                data: fetchMoreResult.data\n                            });\n                        }\n                    },\n                    onWatchUpdated: function(watch) {\n                        // Record the DocumentNode associated with any watched query whose\n                        // data were updated by the cache writes above.\n                        updatedQuerySet.add(watch.query);\n                    }\n                });\n            } else {\n                // There is a possibility `lastResult` may not be set when\n                // `fetchMore` is called which would cause this to crash. This should\n                // only happen if we haven't previously reported a result. We don't\n                // quite know what the right behavior should be here since this block\n                // of code runs after the fetch result has executed on the network.\n                // We plan to let it crash in the meantime.\n                //\n                // If we get bug reports due to the `data` property access on\n                // undefined, this should give us a real-world scenario that we can\n                // use to test against and determine the right behavior. If we do end\n                // up changing this behavior, this may require, for example, an\n                // adjustment to the types on `updateQuery` since that function\n                // expects that the first argument always contains previous result\n                // data, but not `undefined`.\n                var lastResult = _this.getLast(\"result\");\n                var data = updateQuery(lastResult.data, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables\n                });\n                _this.reportResult((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, lastResult), {\n                    data: data\n                }), _this.variables);\n            }\n            return fetchMoreResult;\n        }).finally(function() {\n            // In case the cache writes above did not generate a broadcast\n            // notification (which would have been intercepted by onWatchUpdated),\n            // likely because the written data were the same as what was already in\n            // the cache, we still want fetchMore to deliver its final loading:false\n            // result with the unchanged data.\n            if (isCached && !updatedQuerySet.has(_this.query)) {\n                reobserveCacheFirst(_this);\n            }\n        });\n    };\n    // XXX the subscription variables are separate from the query variables.\n    // if you want to update subscription variables, right now you have to do that separately,\n    // and you can only do it by stopping the subscription and then subscribing again with new variables.\n    /**\n     * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n     *\n     * This function returns _another_ function that you can call to terminate the subscription.\n     */ ObservableQuery.prototype.subscribeToMore = function(options) {\n        var _this = this;\n        var subscription = this.queryManager.startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context\n        }).subscribe({\n            next: function(subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function(previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables\n                        });\n                    });\n                }\n            },\n            error: function(err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(22, err);\n            }\n        });\n        this.subscriptions.add(subscription);\n        return function() {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function(newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.silentSetOptions = function(newOptions) {\n        var mergedOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.compact)(this.options, newOptions || {});\n        assign(this.options, mergedOptions);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results\n     * if they've changed. Most users should prefer `refetch` instead of\n     * `setVariables` in order to to be properly notified of results even when\n     * they come from the cache.\n     *\n     * Note: the `next` callback will *not* fire if the variables have not changed\n     * or if the result is coming from cache.\n     *\n     * Note: the promise will return the old results immediately if the variables\n     * have not changed.\n     *\n     * Note: the promise will return null immediately if the query is not active\n     * (there are no subscribers).\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ ObservableQuery.prototype.setVariables = function(variables) {\n        if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.variables, variables)) {\n            // If we have no observers, then we don't actually want to make a network\n            // request. As soon as someone observes the query, the request will kick\n            // off. For now, we just store any changes. (See #1077)\n            return this.observers.size ? this.result() : Promise.resolve();\n        }\n        this.options.variables = variables;\n        // See comment above\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            // Reset options.fetchPolicy to its original value.\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables\n        }, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.setVariables);\n    };\n    /**\n     * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n     *\n     * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n     */ ObservableQuery.prototype.updateQuery = function(mapFn) {\n        var queryManager = this.queryManager;\n        var result = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false\n        }).result;\n        var newResult = mapFn(result, {\n            variables: this.variables\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    /**\n     * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n     */ ObservableQuery.prototype.startPolling = function(pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    /**\n     * A function that instructs the query to stop polling after a previous call to `startPolling`.\n     */ ObservableQuery.prototype.stopPolling = function() {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    // Update options.fetchPolicy according to options.nextFetchPolicy.\n    ObservableQuery.prototype.applyNextFetchPolicy = function(reason, // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") {\n            // Do nothing, leaving options.fetchPolicy unchanged.\n            } else if (typeof options.nextFetchPolicy === \"function\") {\n                // When someone chooses \"cache-and-network\" or \"network-only\" as their\n                // initial FetchPolicy, they often do not want future cache updates to\n                // trigger unconditional network requests, which is what repeatedly\n                // applying the \"cache-and-network\" or \"network-only\" policies would\n                // seem to imply. Instead, when the cache reports an update after the\n                // initial network request, it may be desirable for subsequent network\n                // requests to be triggered only if the cache result is incomplete. To\n                // that end, the options.nextFetchPolicy option provides an easy way to\n                // update options.fetchPolicy after the initial network request, without\n                // having to call observableQuery.setOptions.\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy\n                });\n            } else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            } else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function(options, newNetworkStatus, query) {\n        // TODO Make sure we update the networkStatus (and infer fetchVariables)\n        // before actually committing to the fetch.\n        this.queryManager.setObservableQuery(this);\n        return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n    };\n    // Turns polling on or off based on this.options.pollInterval.\n    ObservableQuery.prototype.updatePolling = function() {\n        var _this = this;\n        // Avoid polling in SSR mode\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval || !this.hasObservers()) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo && pollingInfo.interval === pollInterval) {\n            return;\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(pollInterval, 23);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function() {\n            var _a, _b;\n            if (_this.pollingInfo) {\n                if (!(0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.isNetworkRequestInFlight)(_this.queryInfo.networkStatus) && !((_b = (_a = _this.options).skipPollAttempt) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n                    _this.reobserve({\n                        // Most fetchPolicy options don't make sense to use in a polling context, as\n                        // users wouldn't want to be polling the cache directly. However, network-only and\n                        // no-cache are both useful for when the user wants to control whether or not the\n                        // polled results are written to the cache.\n                        fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n                    }, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.poll).then(poll, poll);\n                } else {\n                    poll();\n                }\n            }\n        };\n        var poll = function() {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function(newResult, variables) {\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        var error = this.getLastError();\n        // Preserve this.last.error unless the variables have changed.\n        if (error && this.last && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(variables, this.last.variables)) {\n            error = void 0;\n        }\n        return this.last = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            result: this.queryManager.assumeImmutableResults ? newResult : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.cloneDeep)(newResult),\n            variables: variables\n        }, error ? {\n            error: error\n        } : null);\n    };\n    ObservableQuery.prototype.reobserveAsConcast = function(newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast = // Refetching uses a disposable Concast to allow refetches using different\n        // options/variables, without permanently altering the options of the\n        // original ObservableQuery.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.refetch || // The fetchMore method does not actually call the reobserve method, but,\n        // if it did, it would definitely use a disposable Concast.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore || // Polling uses a disposable Concast so the polling options (which force\n        // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.poll;\n        // Save the old variables, since Object.assign may modify them below.\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.compact)(this.options, newOptions || {});\n        var options = useDisposableConcast ? // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions : assign(this.options, mergedOptions);\n        // Don't update options.query with the transformed query to avoid\n        // overwriting this.options.query when we aren't using a disposable concast.\n        // We want to ensure we can re-run the custom document transforms the next\n        // time a request is made against the original query.\n        var query = this.transformDocument(options.query);\n        this.lastQuery = query;\n        if (!useDisposableConcast) {\n            // We can skip calling updatePolling if we're not changing this.options.\n            this.updatePolling();\n            // Reset options.fetchPolicy to its original value when variables change,\n            // unless a new fetchPolicy was provided by newOptions.\n            if (newOptions && newOptions.variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(newOptions.variables, oldVariables) && // Don't mess with the fetchPolicy if it's currently \"standby\".\n            options.fetchPolicy !== \"standby\" && // If we're changing the fetchPolicy anyway, don't try to change it here\n            // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n            (options.fetchPolicy === oldFetchPolicy || // A `nextFetchPolicy` function has even higher priority, though,\n            // so in that case `applyNextFetchPolicy` must be called.\n            typeof options.nextFetchPolicy === \"function\")) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.setVariables;\n                }\n            }\n        }\n        this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n        var finishWaitingForOwnResult = function() {\n            if (_this.concast === concast) {\n                _this.waitForOwnResult = false;\n            }\n        };\n        var variables = options.variables && (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options.variables);\n        var _a = this.fetch(options, newNetworkStatus, query), concast = _a.concast, fromLink = _a.fromLink;\n        var observer = {\n            next: function(result) {\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportResult(result, variables);\n                }\n            },\n            error: function(error) {\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(_this.variables, variables)) {\n                    // Coming from `getResultsFromLink`, `error` here should always be an `ApolloError`.\n                    // However, calling `concast.cancel` can inject another type of error, so we have to\n                    // wrap it again here.\n                    if (!(0,_errors_index_js__WEBPACK_IMPORTED_MODULE_8__.isApolloError)(error)) {\n                        error = new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.ApolloError({\n                            networkError: error\n                        });\n                    }\n                    finishWaitingForOwnResult();\n                    _this.reportError(error, variables);\n                }\n            }\n        };\n        if (!useDisposableConcast && (fromLink || !this.concast)) {\n            // We use the {add,remove}Observer methods directly to avoid wrapping\n            // observer with an unnecessary SubscriptionObserver object.\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast;\n    };\n    ObservableQuery.prototype.reobserve = function(newOptions, newNetworkStatus) {\n        return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n    };\n    ObservableQuery.prototype.resubscribeAfterError = function() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        // If `lastError` is set in the current when the subscription is re-created,\n        // the subscription will immediately receive the error, which will\n        // cause it to terminate again. To avoid this, we first clear\n        // the last error/result from the `observableQuery` before re-starting\n        // the subscription, and restore the last value afterwards so that the\n        // subscription has a chance to stay open.\n        var last = this.last;\n        this.resetLastResults();\n        var subscription = this.subscribe.apply(this, args);\n        this.last = last;\n        return subscription;\n    };\n    // (Re)deliver the current result to this.observers without applying fetch\n    // policies or making network requests.\n    ObservableQuery.prototype.observe = function() {\n        this.reportResult(// Passing false is important so that this.getCurrentResult doesn't\n        // save the fetchMore result as this.lastResult, causing it to be\n        // ignored due to the this.isDifferentFromLastResult check in\n        // this.reportResult.\n        this.getCurrentResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function(result, variables) {\n        var lastError = this.getLastError();\n        var isDifferent = this.isDifferentFromLastResult(result, variables);\n        // Update the last result even when isDifferentFromLastResult returns false,\n        // because the query may be using the @nonreactive directive, and we want to\n        // save the the latest version of any nonreactive subtrees (in case\n        // getCurrentResult is called), even though we skip broadcasting changes.\n        if (lastError || !result.partial || this.options.returnPartialData) {\n            this.updateLastResult(result, variables);\n        }\n        if (lastError || isDifferent) {\n            (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.iterateObserversSafely)(this.observers, \"next\", result);\n        }\n    };\n    ObservableQuery.prototype.reportError = function(error, variables) {\n        // Since we don't get the current result on errors, only the error, we\n        // must mirror the updates that occur in QueryStore.markQueryError here\n        var errorResult = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.getLastResult()), {\n            error: error,\n            errors: error.graphQLErrors,\n            networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.error,\n            loading: false\n        });\n        this.updateLastResult(errorResult, variables);\n        (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.iterateObserversSafely)(this.observers, \"error\", this.last.error = error);\n    };\n    ObservableQuery.prototype.hasObservers = function() {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function() {\n        if (this.isTornDown) return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        // stop all active GraphQL subscriptions\n        this.subscriptions.forEach(function(sub) {\n            return sub.unsubscribe();\n        });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    ObservableQuery.prototype.transformDocument = function(document) {\n        return this.queryManager.transform(document);\n    };\n    return ObservableQuery;\n}(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.Observable);\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\n(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.fixObservableSubclass)(ObservableQuery);\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nfunction reobserveCacheFirst(obsQuery) {\n    var _a = obsQuery.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n        return obsQuery.reobserve({\n            fetchPolicy: \"cache-first\",\n            // Use a temporary nextFetchPolicy function that replaces itself with the\n            // previous nextFetchPolicy value and returns the original fetchPolicy.\n            nextFetchPolicy: function(currentFetchPolicy, context) {\n                // Replace this nextFetchPolicy function in the options object with the\n                // original this.options.nextFetchPolicy value.\n                this.nextFetchPolicy = nextFetchPolicy;\n                // If the original nextFetchPolicy value was a function, give it a\n                // chance to decide what happens here.\n                if (typeof this.nextFetchPolicy === \"function\") {\n                    return this.nextFetchPolicy(currentFetchPolicy, context);\n                }\n                // Otherwise go back to the original this.options.fetchPolicy.\n                return fetchPolicy;\n            }\n        });\n    }\n    return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(24, error.message, error.stack);\n}\nfunction logMissingFieldErrors(missing) {\n    if (globalThis.__DEV__ !== false && missing) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.debug(25, missing);\n    }\n}\nfunction skipCacheDataFor(fetchPolicy /* `undefined` would mean `\"cache-first\"` */ ) {\n    return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n} //# sourceMappingURL=ObservableQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/QueryInfo.js":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/client/core/QueryInfo.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryInfo: () => (/* binding */ QueryInfo),\n/* harmony export */   shouldWriteResult: () => (/* binding */ shouldWriteResult)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ObservableQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n\n\n\n\n\n\n\nvar destructiveMethodCounts = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        // @ts-expect-error this is just too generic to be typed correctly\n        cache[methodName] = function() {\n            destructiveMethodCounts.set(cache, // The %1e15 allows the count to wrap around to 0 safely every\n            // quadrillion evictions, so there's no risk of overflow. To be\n            // clear, this is more of a pedantic principle than something\n            // that matters in any conceivable practical scenario.\n            (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            // @ts-expect-error this is just too generic to be typed correctly\n            return original.apply(this, arguments);\n        };\n    }\n}\nfunction cancelNotifyTimeout(info) {\n    if (info[\"notifyTimeout\"]) {\n        clearTimeout(info[\"notifyTimeout\"]);\n        info[\"notifyTimeout\"] = void 0;\n    }\n}\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nvar QueryInfo = /** @class */ function() {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) {\n            queryId = queryManager.generateQueryId();\n        }\n        this.queryId = queryId;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.stopped = false;\n        this.dirty = false;\n        this.observableQuery = null;\n        var cache = this.cache = queryManager.cache;\n        // Track how often cache.evict is called, since we want eviction to\n        // override the feud-stopping logic in the markResult method, by\n        // causing shouldWrite to return true. Wrapping the cache.evict method\n        // is a bit of a hack, but it saves us from having to make eviction\n        // counting an official part of the ApolloCache API.\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function(query) {\n        var networkStatus = query.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.loading;\n        if (this.variables && this.networkStatus !== _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.loading && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(this.variables, query.variables)) {\n            networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.setVariables;\n        }\n        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.reset = function() {\n        cancelNotifyTimeout(this);\n        this.dirty = false;\n    };\n    QueryInfo.prototype.resetDiff = function() {\n        this.lastDiff = void 0;\n    };\n    QueryInfo.prototype.getDiff = function() {\n        var options = this.getDiffOptions();\n        if (this.lastDiff && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return {\n                complete: false\n            };\n        }\n        var diff = this.cache.diff(options);\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function(diff, options) {\n        this.lastDiff = diff ? {\n            diff: diff,\n            options: options || this.getDiffOptions()\n        } : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function(variables) {\n        var _a;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n        };\n    };\n    QueryInfo.prototype.setDiff = function(diff) {\n        var _this = this;\n        var _a;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        // If we are trying to deliver an incomplete cache result, we avoid\n        // reporting it if the query has errored, otherwise we let the broadcast try\n        // and repair the partial result by refetching the query. This check avoids\n        // a situation where a query that errors and another succeeds with\n        // overlapping data does not report the partial data result to the errored\n        // query.\n        //\n        // See https://github.com/apollographql/apollo-client/issues/11400 for more\n        // information on this issue.\n        if (diff && !diff.complete && ((_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.getLastError())) {\n            return;\n        }\n        this.updateLastDiff(diff);\n        if (!this.dirty && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(oldDiff && oldDiff.result, diff && diff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function() {\n                    return _this.notify();\n                }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function(oq) {\n        var _this = this;\n        if (oq === this.observableQuery) return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add(this.oqListener = function() {\n                var diff = _this.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    // If this diff came from an optimistic transaction, deliver the\n                    // current cache data to the ObservableQuery, but don't perform a\n                    // reobservation, since oq.reobserveCacheFirst might make a network\n                    // request, and we never want to trigger network requests in the\n                    // middle of optimistic updates.\n                    oq[\"observe\"]();\n                } else {\n                    // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n                    // using a temporary fetch policy of \"cache-first\", so complete cache\n                    // results have a chance to be delivered without triggering additional\n                    // network requests, even when options.fetchPolicy is \"network-only\"\n                    // or \"cache-and-network\". All other fetch policies are preserved by\n                    // this method, and are handled by calling oq.reobserve(). If this\n                    // reobservation is spurious, isDifferentFromLastResult still has a\n                    // chance to catch it before delivery to ObservableQuery subscribers.\n                    (0,_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_3__.reobserveCacheFirst)(oq);\n                }\n            });\n        } else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function() {\n        var _this = this;\n        cancelNotifyTimeout(this);\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function(listener) {\n                return listener(_this);\n            });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function() {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if ((0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.isNetworkRequestInFlight)(this.networkStatus) && this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function() {\n        if (!this.stopped) {\n            this.stopped = true;\n            // Cancel the pending notify timeout\n            this.reset();\n            this.cancel();\n            // Revert back to the no-op version of cancel inherited from\n            // QueryInfo.prototype.\n            this.cancel = QueryInfo.prototype.cancel;\n            var oq = this.observableQuery;\n            if (oq) oq.stopPolling();\n        }\n    };\n    // This method is a no-op by default, until/unless overridden by the\n    // updateWatch method.\n    QueryInfo.prototype.cancel = function() {};\n    QueryInfo.prototype.updateWatch = function(variables) {\n        var _this = this;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, this.getDiffOptions(variables)), {\n            watcher: this,\n            callback: function(diff) {\n                return _this.setDiff(diff);\n            }\n        });\n        if (!this.lastWatch || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function() {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function(result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite && // If cache.evict has been called since the last time we wrote this\n        // data into the cache, there's a chance writing this result into\n        // the cache will repair what was evicted.\n        lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(variables, lastWrite.variables) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function(result, document, options, cacheWriteBehavior) {\n        var _this = this;\n        var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();\n        var graphQLErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];\n        // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n        // requests. To allow future notify timeouts, diff and dirty are reset as well.\n        this.reset();\n        if (\"incremental\" in result && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(result.incremental)) {\n            var mergedData = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.mergeIncrementalData)(this.getDiff().result, result);\n            result.data = mergedData;\n        // Detect the first chunk of a deferred query and merge it with existing\n        // cache data. This ensures a `cache-first` fetch policy that returns\n        // partial cache data or a `cache-and-network` fetch policy that already\n        // has full data in the cache does not complain when trying to merge the\n        // initial deferred server data with existing cache data.\n        } else if (\"hasNext\" in result && result.hasNext) {\n            var diff = this.getDiff();\n            result.data = merger.merge(diff.result, result.data);\n        }\n        this.graphQLErrors = graphQLErrors;\n        if (options.fetchPolicy === \"no-cache\") {\n            this.updateLastDiff({\n                result: result.data,\n                complete: true\n            }, this.getDiffOptions(options.variables));\n        } else if (cacheWriteBehavior !== 0 /* CacheWriteBehavior.FORBID */ ) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                // Using a transaction here so we have a chance to read the result\n                // back from the cache before the watch callback fires as a result\n                // of writeQuery, so we can store the new diff quietly and ignore\n                // it when we receive it redundantly from the watch callback.\n                this.cache.performTransaction(function(cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1 /* CacheWriteBehavior.OVERWRITE */ \n                        });\n                        _this.lastWrite = {\n                            result: result,\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache)\n                        };\n                    } else {\n                        // If result is the same as the last result we received from\n                        // the network (and the variables match too), avoid writing\n                        // result into the cache again. The wisdom of skipping this\n                        // cache write is far from obvious, since any cache write\n                        // could be the one that puts the cache back into a desired\n                        // state, fixing corruption or missing data. However, if we\n                        // always write every network result into the cache, we enable\n                        // feuds between queries competing to update the same data in\n                        // incompatible ways, which can lead to an endless cycle of\n                        // cache broadcasts and useless network requests. As with any\n                        // feud, eventually one side must step back from the brink,\n                        // letting the other side(s) have the last word(s). There may\n                        // be other points where we could break this cycle, such as\n                        // silencing the broadcast for cache.writeQuery (not a good\n                        // idea, since it just delays the feud a bit) or somehow\n                        // avoiding the network request that just happened (also bad,\n                        // because the server could return useful new data). All\n                        // options considered, skipping this cache write seems to be\n                        // the least damaging place to break the cycle, because it\n                        // reflects the intuition that we recently wrote this exact\n                        // result into the cache, so the cache *should* already/still\n                        // contain this data. If some other query has clobbered that\n                        // data in the meantime, that's too bad, but there will be no\n                        // winners if every query blindly reverts to its own version\n                        // of the data. This approach also gives the network a chance\n                        // to return new data, which will be written into the cache as\n                        // usual, notifying only those queries that are directly\n                        // affected by the cache updates, as usual. In the future, an\n                        // even more sophisticated cache could perhaps prevent or\n                        // mitigate the clobbering somehow, but that would make this\n                        // particular cache write even less important, and thus\n                        // skipping it would be even safer than it is today.\n                        if (_this.lastDiff && _this.lastDiff.diff.complete) {\n                            // Reuse data from the last good (complete) diff that we\n                            // received, when possible.\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                    // If the previous this.diff was incomplete, fall through to\n                    // re-reading the latest data with cache.diff, below.\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = cache.diff(diffOptions);\n                    // In case the QueryManager stops this QueryInfo before its\n                    // results are delivered, it's important to avoid restarting the\n                    // cache watch when markResult is called. We also avoid updating\n                    // the watch if we are writing a result that doesn't match the current\n                    // variables to avoid race conditions from broadcasting the wrong\n                    // result.\n                    if (!_this.stopped && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(_this.variables, options.variables)) {\n                        // Any time we're about to update this.diff, we need to make\n                        // sure we've started watching the cache.\n                        _this.updateWatch(options.variables);\n                    }\n                    // If we're allowed to write to the cache, and we can read a\n                    // complete result from the cache, update result.data to be the\n                    // result from the cache, rather than the raw network result.\n                    // Set without setDiff to avoid triggering a notify call, since\n                    // we have other ways of notifying for this result.\n                    _this.updateLastDiff(diff, diffOptions);\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            } else {\n                this.lastWrite = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function() {\n        this.networkError = null;\n        return this.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function(error) {\n        this.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.error;\n        this.lastWrite = void 0;\n        this.reset();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}();\n\nfunction shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) {\n        errorPolicy = \"none\";\n    }\n    var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n    var writeWithErrors = !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n} //# sourceMappingURL=QueryInfo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/QueryInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/QueryManager.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/QueryManager.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryManager: () => (/* binding */ QueryManager)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utilities/common/incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ObservableQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./QueryInfo.js */ \"(ssr)/./node_modules/@apollo/client/core/QueryInfo.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\n\n\nvar QueryManager = /** @class */ function() {\n    function QueryManager(options) {\n        var _this = this;\n        this.clientAwareness = {};\n        // All the queries that the QueryManager is currently managing (not\n        // including mutations and subscriptions).\n        this.queries = new Map();\n        // Maps from queryId strings to Promise rejection functions for\n        // currently active queries and fetches.\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.fetchCancelFns = new Map();\n        this.transformCache = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.AutoCleanedWeakCache(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes[\"queryManager.getDocumentInfo\"] || 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ );\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.inFlightLinkObservables = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false);\n        var defaultDocumentTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DocumentTransform(function(document) {\n            return _this.cache.transformDocument(document);\n        }, // Allow the apollo cache to manage its own transform caches\n        {\n            cache: false\n        });\n        this.cache = options.cache;\n        this.link = options.link;\n        this.defaultOptions = options.defaultOptions;\n        this.queryDeduplication = options.queryDeduplication;\n        this.clientAwareness = options.clientAwareness;\n        this.localState = options.localState;\n        this.ssrMode = options.ssrMode;\n        this.assumeImmutableResults = options.assumeImmutableResults;\n        var documentTransform = options.documentTransform;\n        this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform)// The custom document transform may add new fragment spreads or new\n        // field selections, so we want to give the cache a chance to run\n        // again. For example, the InMemoryCache adds __typename to field\n        // selections and fragments from the fragment registry.\n        .concat(defaultDocumentTransform) : defaultDocumentTransform;\n        this.defaultContext = options.defaultContext || Object.create(null);\n        if (this.onBroadcast = options.onBroadcast) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    /**\n     * Call this method to terminate any active query processes, making it safe\n     * to dispose of this QueryManager instance.\n     */ QueryManager.prototype.stop = function() {\n        var _this = this;\n        this.queries.forEach(function(_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches((0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(26));\n    };\n    QueryManager.prototype.cancelPendingFetches = function(error) {\n        this.fetchCancelFns.forEach(function(cancel) {\n            return cancel(error);\n        });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function(_a) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, arguments, void 0, function(_b) {\n            var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n            var _c, _d;\n            var mutation = _b.mutation, variables = _b.variables, optimisticResponse = _b.optimisticResponse, updateQueries = _b.updateQueries, _e = _b.refetchQueries, refetchQueries = _e === void 0 ? [] : _e, _f = _b.awaitRefetchQueries, awaitRefetchQueries = _f === void 0 ? false : _f, updateWithProxyFn = _b.update, onQueryUpdated = _b.onQueryUpdated, _g = _b.fetchPolicy, fetchPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.fetchPolicy) || \"network-only\" : _g, _h = _b.errorPolicy, errorPolicy = _h === void 0 ? ((_d = this.defaultOptions.mutate) === null || _d === void 0 ? void 0 : _d.errorPolicy) || \"none\" : _h, keepRootFields = _b.keepRootFields, context = _b.context;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function(_j) {\n                switch(_j.label){\n                    case 0:\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(mutation, 27);\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 28);\n                        mutationId = this.generateMutationId();\n                        mutation = this.cache.transformForLink(this.transform(mutation));\n                        hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.localState.addExportedVariables(mutation, variables, context)\n                        ];\n                    case 1:\n                        variables = _j.sent();\n                        _j.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n                            mutation: mutation,\n                            variables: variables,\n                            loading: true,\n                            error: null\n                        });\n                        isOptimistic = optimisticResponse && this.markMutationOptimistic(optimisticResponse, {\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: variables,\n                            fetchPolicy: fetchPolicy,\n                            errorPolicy: errorPolicy,\n                            context: context,\n                            updateQueries: updateQueries,\n                            update: updateWithProxyFn,\n                            keepRootFields: keepRootFields\n                        });\n                        this.broadcastQueries();\n                        self = this;\n                        return [\n                            2 /*return*/ ,\n                            new Promise(function(resolve, reject) {\n                                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.asyncMap)(self.getObservableFromLink(mutation, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, context), {\n                                    optimisticResponse: isOptimistic ? optimisticResponse : void 0\n                                }), variables, {}, false), function(result) {\n                                    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result) && errorPolicy === \"none\") {\n                                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                                            graphQLErrors: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.getGraphQLErrorsFromResult)(result)\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === \"ignore\" && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: isOptimistic ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields\n                                    });\n                                }).subscribe({\n                                    next: function(storeResult) {\n                                        self.broadcastQueries();\n                                        // Since mutations might receive multiple payloads from the\n                                        // ApolloLink chain (e.g. when used with @defer),\n                                        // we resolve with a SingleExecutionResult or after the final\n                                        // ExecutionPatchResult has arrived and we have assembled the\n                                        // multipart response into a single result.\n                                        if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                                            resolve(storeResult);\n                                        }\n                                    },\n                                    error: function(err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (isOptimistic) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError ? err : new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                                            networkError: err\n                                        }));\n                                    }\n                                });\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function(mutation, cache) {\n        var _this = this;\n        if (cache === void 0) {\n            cache = this.cache;\n        }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && (0,_QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.shouldWriteResult)(result, mutation.errorPolicy)) {\n            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchIncrementalResult)(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: \"ROOT_MUTATION\",\n                    query: mutation.document,\n                    variables: mutation.variables\n                });\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchIncrementalResult)(result) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isNonEmptyArray)(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    // The cache complains if passed a mutation where it expects a\n                    // query, so we transform mutations and subscriptions to queries\n                    // (only once, thanks to this.transformCache).\n                    query: this.getDocumentInfo(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.mergeIncrementalData)(diff.result, result);\n                }\n                if (typeof mergedData !== \"undefined\") {\n                    // cast the ExecutionPatchResult to FetchResult here since\n                    // ExecutionPatchResult never has `data` when returned from the server\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: \"ROOT_MUTATION\",\n                        query: mutation.document,\n                        variables: mutation.variables\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function(_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    // Read the current query result from the store.\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        // Run our reducer using the current query result and the mutation result.\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: document && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationName)(document) || void 0,\n                            queryVariables: variables\n                        });\n                        // Write the modified result back into the store if we got a new result.\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: \"ROOT_QUERY\",\n                                query: document,\n                                variables: variables\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 || (mutation.refetchQueries || \"\").length > 0 || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function(cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function(write) {\n                            return cache.write(write);\n                        });\n                    }\n                    // If the mutation has some writes associated with it then we need to\n                    // apply those writes to the store by running this reducer again with\n                    // a write action.\n                    var update = mutation.update;\n                    // Determine whether result is a SingleExecutionResult,\n                    // or the final ExecutionPatchResult.\n                    var isFinalResult = !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchResult)(result) || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchIncrementalResult)(result) && !result.hasNext;\n                    if (update) {\n                        if (!skipCache) {\n                            // Re-read the ROOT_MUTATION data we just wrote into the cache\n                            // (the first cache.write call in the cacheWrites.forEach loop\n                            // above), so field read functions have a chance to run for\n                            // fields within mutation result objects.\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                // The cache complains if passed a mutation where it expects a\n                                // query, so we transform mutations and subscriptions to queries\n                                // (only once, thanks to this.transformCache).\n                                query: _this.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true\n                            });\n                            if (diff.complete) {\n                                result = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result), {\n                                    data: diff.result\n                                });\n                                if (\"incremental\" in result) {\n                                    delete result.incremental;\n                                }\n                                if (\"hasNext\" in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        // If we've received the whole response,\n                        // either a SingleExecutionResult or the final ExecutionPatchResult,\n                        // call the update function.\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables\n                            });\n                        }\n                    }\n                    // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n                    // shallow to allow rolling back optimistic evictions.\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: \"ROOT_MUTATION\",\n                            fields: function(value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            }\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                // Write the final mutation.result to the root layer of the cache.\n                optimistic: false,\n                // Remove the corresponding optimistic layer at the same time as we\n                // write the final non-optimistic result.\n                removeOptimistic: mutation.removeOptimistic,\n                // Let the caller of client.mutate optionally determine the refetching\n                // behavior for watched queries after the mutation.update function runs.\n                // If no onQueryUpdated function was provided for this mutation, pass\n                // null instead of undefined to disable the default refetching behavior.\n                onQueryUpdated: mutation.onQueryUpdated || null\n            }).forEach(function(result) {\n                return results_1.push(result);\n            });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                // Returning a promise here makes the mutation await that promise, so we\n                // include results in that promise's work if awaitRefetchQueries or an\n                // onQueryUpdated function was specified.\n                return Promise.all(results_1).then(function() {\n                    return result;\n                });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function(optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables, {\n            IGNORE: IGNORE\n        }) : optimisticResponse;\n        if (data === IGNORE) {\n            return false;\n        }\n        this.cache.recordOptimisticTransaction(function(cache) {\n            try {\n                _this.markMutationResult((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, mutation), {\n                    result: {\n                        data: data\n                    }\n                }), cache);\n            } catch (error) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(error);\n            }\n        }, mutation.mutationId);\n        return true;\n    };\n    QueryManager.prototype.fetchQuery = function(queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;\n    };\n    QueryManager.prototype.getQueryStore = function() {\n        var store = Object.create(null);\n        this.queries.forEach(function(info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function(queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function(document) {\n        return this.documentTransform.transformDocument(document);\n    };\n    QueryManager.prototype.getDocumentInfo = function(document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cacheEntry = {\n                // TODO These three calls (hasClientExports, shouldForceResolvers, and\n                // usesNonreactiveDirective) are performing independent full traversals\n                // of the transformed document. We should consider merging these\n                // traversals into a single pass in the future, though the work is\n                // cached after the first time.\n                hasClientExports: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.hasClientExports)(document),\n                hasForcedResolvers: this.localState.shouldForceResolvers(document),\n                hasNonreactiveDirective: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.hasDirectives)([\n                    \"nonreactive\"\n                ], document),\n                clientQuery: this.localState.clientQuery(document),\n                serverQuery: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.removeDirectivesFromDocument)([\n                    {\n                        name: \"client\",\n                        remove: true\n                    },\n                    {\n                        name: \"connection\"\n                    },\n                    {\n                        name: \"nonreactive\"\n                    }\n                ], document),\n                defaultVars: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationDefinition)(document)),\n                // Transform any mutation or subscription operations to query operations\n                // so we can read/write them from/to the cache.\n                asQuery: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, document), {\n                    definitions: document.definitions.map(function(def) {\n                        if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, def), {\n                                operation: \"query\"\n                            });\n                        }\n                        return def;\n                    })\n                })\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function(document, variables) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.getDocumentInfo(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function(options) {\n        var query = this.transform(options.query);\n        // assign variable default values if supplied\n        // NOTE: We don't modify options.query here with the transformed query to\n        // ensure observable.options.query is set to the raw untransformed query.\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n            variables: this.getVariables(query, options.variables)\n        });\n        if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.QueryInfo(this);\n        var observable = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options\n        });\n        observable[\"lastQuery\"] = query;\n        this.queries.set(observable.queryId, queryInfo);\n        // We give queryInfo the transformed query to ensure the first cache diff\n        // uses the transformed query instead of the raw query\n        queryInfo.init({\n            document: query,\n            observableQuery: observable,\n            variables: observable.variables\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function(options, queryId) {\n        var _this = this;\n        if (queryId === void 0) {\n            queryId = this.generateQueryId();\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.query, 29);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.query.kind === \"Document\", 30);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!options.returnPartialData, 31);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!options.pollInterval, 32);\n        return this.fetchQuery(queryId, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n            query: this.transform(options.query)\n        })).finally(function() {\n            return _this.stopQuery(queryId);\n        });\n    };\n    QueryManager.prototype.generateQueryId = function() {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function() {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function() {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function(queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function(queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function(options) {\n        if (options === void 0) {\n            options = {\n                discardWatches: true\n            };\n        }\n        // Before we have sent the reset action to the store, we can no longer\n        // rely on the results returned by in-flight requests since these may\n        // depend on values that previously existed in the data portion of the\n        // store. So, we cancel the promises and observers that we have issued\n        // so far and not yet resolved (in the case of queries).\n        this.cancelPendingFetches((0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(33));\n        this.queries.forEach(function(queryInfo) {\n            if (queryInfo.observableQuery) {\n                // Set loading to true so listeners don't trigger unless they want\n                // results with partial data.\n                queryInfo.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.loading;\n            } else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        // begin removing data from the store\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function(include) {\n        var _this = this;\n        if (include === void 0) {\n            include = \"active\";\n        }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function(desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                } else if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_18__.isDocumentNode)(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc), false);\n                } else if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.isNonNullObject)(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function(_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n                    return;\n                }\n                if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n                    queries.set(queryId, oq);\n                    if (queryName) queryNamesAndDocs.set(queryName, true);\n                    if (document) queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function(options) {\n                // We will be issuing a fresh network request for this query, so we\n                // pre-allocate a new query ID here, using a special prefix to enable\n                // cleaning up these temporary queries later, after fetching.\n                var queryId = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.makeUniqueId)(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables\n                });\n                var oq = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                        fetchPolicy: \"network-only\"\n                    })\n                });\n                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function(included, nameOrDoc) {\n                if (!included) {\n                    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(typeof nameOrDoc === \"string\" ? 34 : 35, nameOrDoc);\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function(includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) {\n            includeStandby = false;\n        }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function(observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function(observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function(_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, _b = _a.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, variables = _a.variables, _c = _a.context, context = _c === void 0 ? {} : _c, _d = _a.extensions, extensions = _d === void 0 ? {} : _d;\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        var makeObservable = function(variables) {\n            return _this.getObservableFromLink(query, context, variables, extensions).map(function(result) {\n                if (fetchPolicy !== \"no-cache\") {\n                    // the subscription interface should handle not sending us results we no longer subscribe to.\n                    // XXX I don't think we ever send in an object with errors, but we might in the future...\n                    if ((0,_QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.shouldWriteResult)(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: \"ROOT_SUBSCRIPTION\",\n                            variables: variables\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result);\n                var hasProtocolErrors = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasProtocolErrors)(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors = {};\n                    if (hasErrors) {\n                        errors.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors.protocolErrors = result.extensions[_errors_index_js__WEBPACK_IMPORTED_MODULE_9__.PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    // `errorPolicy` is a mechanism for handling GraphQL errors, according\n                    // to our documentation, so we throw protocol errors regardless of the\n                    // set error policy.\n                    if (errorPolicy === \"none\" || hasProtocolErrors) {\n                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError(errors);\n                    }\n                }\n                if (errorPolicy === \"ignore\") {\n                    delete result.errors;\n                }\n                return result;\n            });\n        };\n        if (this.getDocumentInfo(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.Observable(function(observer) {\n                var sub = null;\n                observablePromise_1.then(function(observable) {\n                    return sub = observable.subscribe(observer);\n                }, observer.error);\n                return function() {\n                    return sub && sub.unsubscribe();\n                };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function(queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function(queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function(queryId) {\n        // teardown all links\n        // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n        // that each add their reject functions to fetchCancelFns.\n        // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n        // The same queryId could have two rejection fns for two promises\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function() {\n        if (this.onBroadcast) this.onBroadcast();\n        this.queries.forEach(function(info) {\n            return info.notify();\n        });\n    };\n    QueryManager.prototype.getLocalState = function() {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function(query, context, variables, extensions, // Prefer context.queryDeduplication if specified.\n    deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) {\n            deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n        }\n        var observable;\n        var _b = this.getDocumentInfo(query), serverQuery = _b.serverQuery, clientQuery = _b.clientQuery;\n        if (serverQuery) {\n            var _c = this, inFlightLinkObservables_1 = _c.inFlightLinkObservables, link = _c.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationName)(serverQuery) || void 0,\n                context: this.prepareContext((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, context), {\n                    forceFetch: !deduplication\n                })),\n                extensions: extensions\n            };\n            context = operation.context;\n            if (deduplication) {\n                var printedServerQuery_1 = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_22__.print)(serverQuery);\n                var varJson_1 = (0,_cache_index_js__WEBPACK_IMPORTED_MODULE_23__.canonicalStringify)(variables);\n                var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n                observable = entry.observable;\n                if (!observable) {\n                    var concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_24__.Concast([\n                        (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_25__.execute)(link, operation)\n                    ]);\n                    observable = entry.observable = concast;\n                    concast.beforeNext(function() {\n                        inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n                    });\n                }\n            } else {\n                observable = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_24__.Concast([\n                    (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_25__.execute)(link, operation)\n                ]);\n            }\n        } else {\n            observable = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_24__.Concast([\n                _utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.Observable.of({\n                    data: {}\n                })\n            ]);\n            context = this.prepareContext(context);\n        }\n        if (clientQuery) {\n            observable = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.asyncMap)(observable, function(result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function(queryInfo, cacheWriteBehavior, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        // Performing transformForLink here gives this.cache a chance to fill in\n        // missing fragment definitions (for example) before sending this document\n        // through the link chain.\n        var linkDocument = this.cache.transformForLink(options.query);\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.asyncMap)(this.getObservableFromLink(linkDocument, options.context, options.variables), function(result) {\n            var graphQLErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.getGraphQLErrorsFromResult)(result);\n            var hasErrors = graphQLErrors.length > 0;\n            var errorPolicy = options.errorPolicy;\n            // If we interrupted this request by calling getResultsFromLink again\n            // with the same QueryInfo object, we ignore the old results.\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && errorPolicy === \"none\") {\n                    // Throwing here effectively calls observer.error.\n                    throw queryInfo.markError(new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                        graphQLErrors: graphQLErrors\n                    }));\n                }\n                // Use linkDocument rather than queryInfo.document so the\n                // operation/fragments used to write the result are the same as the\n                // ones used to obtain it from the link.\n                queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.ready\n            };\n            // In the case we start multiple network requests simulatenously, we\n            // want to ensure we properly set `data` if we're reporting on an old\n            // result which will not be caught by the conditional above that ends up\n            // throwing the markError result.\n            if (hasErrors && errorPolicy === \"none\") {\n                aqr.data = void 0;\n            }\n            if (hasErrors && errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.error;\n            }\n            return aqr;\n        }, function(networkError) {\n            var error = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_9__.isApolloError)(networkError) ? networkError : new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                networkError: networkError\n            });\n            // Avoid storing errors from older interrupted queries.\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function(queryId, options, // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus, query) {\n        var _this = this;\n        if (networkStatus === void 0) {\n            networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.loading;\n        }\n        if (query === void 0) {\n            query = options.query;\n        }\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context\n        });\n        var fromVariables = function(variables) {\n            // Since normalized is always a fresh copy of options, it's safe to\n            // modify its properties here, rather than creating yet another new\n            // WatchQueryOptions object.\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (// If we're in standby, postpone advancing options.fetchPolicy using\n            // applyNextFetchPolicy.\n            normalized.fetchPolicy !== \"standby\" && // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n            // this is another way to detect when nothing was done/fetched.\n            sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        // This cancel function needs to be set before the concast is created,\n        // in case concast creation synchronously cancels the request.\n        var cleanupCancelFn = function() {\n            return _this.fetchCancelFns.delete(queryId);\n        };\n        this.fetchCancelFns.set(queryId, function(reason) {\n            cleanupCancelFn();\n            // This delay ensures the concast variable has been initialized.\n            setTimeout(function() {\n                return concast.cancel(reason);\n            });\n        });\n        var concast, containsDataFromLink;\n        // If the query has @export(as: ...) directives, then we need to\n        // process those directives asynchronously. When there are no\n        // @export directives (the common case), we deliberately avoid\n        // wrapping the result of this.fetchQueryByPolicy in a Promise,\n        // since the timing of result delivery is (unfortunately) important\n        // for backwards compatibility. TODO This code could be simpler if\n        // we deprecated and removed LocalState.\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_24__.Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function(sourcesWithInfo) {\n                return sourcesWithInfo.sources;\n            }));\n            // there is just no way we can synchronously get the *right* value here,\n            // so we will assume `true`, which is the behaviour before the bug fix in\n            // #10597. This means that bug is not fixed in that case, and is probably\n            // un-fixable with reasonable effort for the edge case of @export as\n            // directives.\n            containsDataFromLink = true;\n        } else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_24__.Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink\n        };\n    };\n    QueryManager.prototype.refetchQueries = function(_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.makeUniqueId)(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function(oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff()\n                });\n            });\n        }\n        var results = new Map();\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                // Since you can perform any combination of cache reads and/or writes in\n                // the cache.batch update function, its optimistic option can be either\n                // a boolean or a string, representing three distinct modes of\n                // operation:\n                //\n                // * false: read/write only the root layer\n                // * true: read/write the topmost layer\n                // * string: read/write a fresh optimistic layer with that ID string\n                //\n                // When typeof optimistic === \"string\", a new optimistic layer will be\n                // temporarily created within cache.batch with that string as its ID. If\n                // we then pass that same string as the removeOptimistic option, we can\n                // make cache.batch immediately remove the optimistic layer after\n                // running the updateCache function, triggering only one broadcast.\n                //\n                // However, the refetchQueries method accepts only true or false for its\n                // optimistic option (not string). We interpret true to mean a temporary\n                // optimistic layer should be created, to allow efficiently rolling back\n                // the effect of the updateCache function, which involves passing a\n                // string instead of true as the optimistic option to cache.batch, when\n                // refetchQueries receives optimistic: true.\n                //\n                // In other words, we are deliberately not supporting the use case of\n                // writing to an *existing* optimistic layer (using the refetchQueries\n                // updateCache function), since that would potentially interfere with\n                // other optimistic updates in progress. Instead, you can read/write\n                // only the root layer by passing optimistic: false to refetchQueries,\n                // or you can read/write a brand new optimistic layer that will be\n                // automatically removed by passing optimistic: true.\n                optimistic: optimistic && removeOptimistic || false,\n                // The removeOptimistic option can also be provided by itself, even if\n                // optimistic === false, to remove some previously-added optimistic\n                // layer safely and efficiently, like we do in markMutationResult.\n                //\n                // If an explicit removeOptimistic string is provided with optimistic:\n                // true, the removeOptimistic string will determine the ID of the\n                // temporary optimistic layer, in case that ever matters.\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function(watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.QueryInfo && watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            // Since we're about to handle this query now, remove it from\n                            // includedQueriesById, in case it was added earlier because of\n                            // options.include.\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                // The onQueryUpdated function requested the default refetching\n                                // behavior by returning true.\n                                result = oq.refetch();\n                            }\n                            // Record the result in the results Map, as long as onQueryUpdated\n                            // did not return false to skip/ignore this result.\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            // Allow the default cache broadcast to happen, except when\n                            // onQueryUpdated returns false.\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            // If we don't have an onQueryUpdated function, and onQueryUpdated\n                            // was not disabled by passing null, make sure this query is\n                            // \"included\" like any other options.include-specified query.\n                            includedQueriesById.set(oq.queryId, {\n                                oq: oq,\n                                lastDiff: lastDiff,\n                                diff: diff\n                            });\n                        }\n                    }\n                }\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function(_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                // If onQueryUpdated is provided, we want to use it for all included\n                // queries, even the QueryOptions ones.\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset(); // Force info.getDiff() to read from cache.\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                // Otherwise, we fall back to refetching.\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            // In case no updateCache callback was provided (so cache.batch was not\n            // called above, and thus did not already remove the optimistic layer),\n            // remove it here. Since this is a no-op when the layer has already been\n            // removed, we do it even if we called cache.batch above, since it's\n            // possible this.cache is an instance of some ApolloCache subclass other\n            // than InMemoryCache, and does not fully support the removeOptimistic\n            // option for cache.batch.\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function(queryInfo, _a, // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus\n        });\n        var readCache = function() {\n            return queryInfo.getDiff();\n        };\n        var resultsFromCache = function(diff, networkStatus) {\n            if (networkStatus === void 0) {\n                networkStatus = queryInfo.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.loading;\n            }\n            var data = diff.result;\n            if (globalThis.__DEV__ !== false && !returnPartialData && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(data, {})) {\n                (0,_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.logMissingFieldErrors)(diff.missing);\n            }\n            var fromData = function(data) {\n                return _utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.Observable.of((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n                    data: data,\n                    loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.isNetworkRequestInFlight)(networkStatus),\n                    networkStatus: networkStatus\n                }, diff.complete ? null : {\n                    partial: true\n                }));\n            };\n            if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: {\n                        data: data\n                    },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true\n                }).then(function(resolved) {\n                    return fromData(resolved.data || void 0);\n                });\n            }\n            // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n            // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n            // data was incorrectly returned from the cache on refetch:\n            // if diff.missing exists, we should not return cache data.\n            if (errorPolicy === \"none\" && networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.refetch && Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */  : networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 /* CacheWriteBehavior.OVERWRITE */  : 2 /* CacheWriteBehavior.MERGE */ ;\n        var resultsFromLink = function() {\n            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n                query: query,\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy\n            });\n        };\n        var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.isNetworkRequestInFlight)(networkStatus);\n        switch(fetchPolicy){\n            default:\n            case \"cache-first\":\n                {\n                    var diff = readCache();\n                    if (diff.complete) {\n                        return {\n                            fromLink: false,\n                            sources: [\n                                resultsFromCache(diff, queryInfo.markReady())\n                            ]\n                        };\n                    }\n                    if (returnPartialData || shouldNotify) {\n                        return {\n                            fromLink: true,\n                            sources: [\n                                resultsFromCache(diff),\n                                resultsFromLink()\n                            ]\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromLink()\n                        ]\n                    };\n                }\n            case \"cache-and-network\":\n                {\n                    var diff = readCache();\n                    if (diff.complete || returnPartialData || shouldNotify) {\n                        return {\n                            fromLink: true,\n                            sources: [\n                                resultsFromCache(diff),\n                                resultsFromLink()\n                            ]\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromLink()\n                        ]\n                    };\n                }\n            case \"cache-only\":\n                return {\n                    fromLink: false,\n                    sources: [\n                        resultsFromCache(readCache(), queryInfo.markReady())\n                    ]\n                };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromCache(readCache()),\n                            resultsFromLink()\n                        ]\n                    };\n                }\n                return {\n                    fromLink: true,\n                    sources: [\n                        resultsFromLink()\n                    ]\n                };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        // Note that queryInfo.getDiff() for no-cache queries does not call\n                        // cache.diff, but instead returns a { complete: false } stub result\n                        // when there is no queryInfo.diff already defined.\n                        sources: [\n                            resultsFromCache(queryInfo.getDiff()),\n                            resultsFromLink()\n                        ]\n                    };\n                }\n                return {\n                    fromLink: true,\n                    sources: [\n                        resultsFromLink()\n                    ]\n                };\n            case \"standby\":\n                return {\n                    fromLink: false,\n                    sources: []\n                };\n        }\n    };\n    QueryManager.prototype.getQuery = function(queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function(context) {\n        if (context === void 0) {\n            context = {};\n        }\n        var newContext = this.localState.prepareContext(context);\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.defaultContext), newContext), {\n            clientAwareness: this.clientAwareness\n        });\n    };\n    return QueryManager;\n}();\n //# sourceMappingURL=QueryManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/QueryManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/equalByQuery.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/equalByQuery.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equalByQuery: () => (/* binding */ equalByQuery)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n\n\n\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nfunction equalByQuery(query, _a, _b, variables) {\n    var aData = _a.data, aRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n        \"data\"\n    ]);\n    var bData = _b.data, bRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_b, [\n        \"data\"\n    ]);\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aRest, bRest) && equalBySelectionSet((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(query).selectionSet, aData, bData, {\n        fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(query)),\n        variables: variables\n    });\n}\nfunction equalBySelectionSet(selectionSet, aResult, bResult, context) {\n    if (aResult === bResult) {\n        return true;\n    }\n    var seenSelections = new Set();\n    // Returning true from this Array.prototype.every callback function skips the\n    // current field/subtree. Returning false aborts the entire traversal\n    // immediately, causing equalBySelectionSet to return false.\n    return selectionSet.selections.every(function(selection) {\n        // Avoid re-processing the same selection at the same level of recursion, in\n        // case the same field gets included via multiple indirect fragment spreads.\n        if (seenSelections.has(selection)) return true;\n        seenSelections.add(selection);\n        // Ignore @skip(if: true) and @include(if: false) fields.\n        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(selection, context.variables)) return true;\n        // If the field or (named) fragment spread has a @nonreactive directive on\n        // it, we don't care if it's different, so we pretend it's the same.\n        if (selectionHasNonreactiveDirective(selection)) return true;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isField)(selection)) {\n            var resultKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.resultKeyNameFromField)(selection);\n            var aResultChild = aResult && aResult[resultKey];\n            var bResultChild = bResult && bResult[resultKey];\n            var childSelectionSet = selection.selectionSet;\n            if (!childSelectionSet) {\n                // These are scalar values, so we can compare them with deep equal\n                // without redoing the main recursive work.\n                return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aResultChild, bResultChild);\n            }\n            var aChildIsArray = Array.isArray(aResultChild);\n            var bChildIsArray = Array.isArray(bResultChild);\n            if (aChildIsArray !== bChildIsArray) return false;\n            if (aChildIsArray && bChildIsArray) {\n                var length_1 = aResultChild.length;\n                if (bResultChild.length !== length_1) {\n                    return false;\n                }\n                for(var i = 0; i < length_1; ++i){\n                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);\n        } else {\n            var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, context.fragmentMap);\n            if (fragment) {\n                // The fragment might === selection if it's an inline fragment, but\n                // could be !== if it's a named fragment ...spread.\n                if (selectionHasNonreactiveDirective(fragment)) return true;\n                return equalBySelectionSet(fragment.selectionSet, // Notice that we reuse the same aResult and bResult values here,\n                // since the fragment ...spread does not specify a field name, but\n                // consists of multiple fields (within the fragment's selection set)\n                // that should be applied to the current result value(s).\n                aResult, bResult, context);\n            }\n        }\n    });\n}\nfunction selectionHasNonreactiveDirective(selection) {\n    return !!selection.directives && selection.directives.some(directiveIsNonreactive);\n}\nfunction directiveIsNonreactive(dir) {\n    return dir.name.value === \"nonreactive\";\n} //# sourceMappingURL=equalByQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9lcXVhbEJ5UXVlcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUErQjtBQUNHO0FBQzhJO0FBQ2hMLCtFQUErRTtBQUMvRSwyRUFBMkU7QUFDcEUsU0FBU1MsYUFBYUMsS0FBSyxFQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsU0FBUztJQUNqRCxJQUFJQyxRQUFRSCxHQUFHSSxJQUFJLEVBQUVDLFFBQVFoQiw2Q0FBTUEsQ0FBQ1csSUFBSTtRQUFDO0tBQU87SUFDaEQsSUFBSU0sUUFBUUwsR0FBR0csSUFBSSxFQUFFRyxRQUFRbEIsNkNBQU1BLENBQUNZLElBQUk7UUFBQztLQUFPO0lBQ2hELE9BQVFYLHlEQUFLQSxDQUFDZSxPQUFPRSxVQUNqQkMsb0JBQW9CZCxzRUFBaUJBLENBQUNLLE9BQU9VLFlBQVksRUFBRU4sT0FBT0csT0FBTztRQUNyRUksYUFBYW5CLHNFQUFpQkEsQ0FBQ0MsMkVBQXNCQSxDQUFDTztRQUN0REcsV0FBV0E7SUFDZjtBQUNSO0FBQ0EsU0FBU00sb0JBQW9CQyxZQUFZLEVBQUVFLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxPQUFPO0lBQ2hFLElBQUlGLFlBQVlDLFNBQVM7UUFDckIsT0FBTztJQUNYO0lBQ0EsSUFBSUUsaUJBQWlCLElBQUlDO0lBQ3pCLDZFQUE2RTtJQUM3RSxxRUFBcUU7SUFDckUsNERBQTREO0lBQzVELE9BQU9OLGFBQWFPLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDLFNBQVVDLFNBQVM7UUFDcEQsNEVBQTRFO1FBQzVFLDRFQUE0RTtRQUM1RSxJQUFJSixlQUFlSyxHQUFHLENBQUNELFlBQ25CLE9BQU87UUFDWEosZUFBZU0sR0FBRyxDQUFDRjtRQUNuQix5REFBeUQ7UUFDekQsSUFBSSxDQUFDckIsa0VBQWFBLENBQUNxQixXQUFXTCxRQUFRWCxTQUFTLEdBQzNDLE9BQU87UUFDWCwwRUFBMEU7UUFDMUUsb0VBQW9FO1FBQ3BFLElBQUltQixpQ0FBaUNILFlBQ2pDLE9BQU87UUFDWCxJQUFJdkIsNERBQU9BLENBQUN1QixZQUFZO1lBQ3BCLElBQUlJLFlBQVkxQiwyRUFBc0JBLENBQUNzQjtZQUN2QyxJQUFJSyxlQUFlWixXQUFXQSxPQUFPLENBQUNXLFVBQVU7WUFDaEQsSUFBSUUsZUFBZVosV0FBV0EsT0FBTyxDQUFDVSxVQUFVO1lBQ2hELElBQUlHLG9CQUFvQlAsVUFBVVQsWUFBWTtZQUM5QyxJQUFJLENBQUNnQixtQkFBbUI7Z0JBQ3BCLGtFQUFrRTtnQkFDbEUsMkNBQTJDO2dCQUMzQyxPQUFPbkMseURBQUtBLENBQUNpQyxjQUFjQztZQUMvQjtZQUNBLElBQUlFLGdCQUFnQkMsTUFBTUMsT0FBTyxDQUFDTDtZQUNsQyxJQUFJTSxnQkFBZ0JGLE1BQU1DLE9BQU8sQ0FBQ0o7WUFDbEMsSUFBSUUsa0JBQWtCRyxlQUNsQixPQUFPO1lBQ1gsSUFBSUgsaUJBQWlCRyxlQUFlO2dCQUNoQyxJQUFJQyxXQUFXUCxhQUFhUSxNQUFNO2dCQUNsQyxJQUFJUCxhQUFhTyxNQUFNLEtBQUtELFVBQVU7b0JBQ2xDLE9BQU87Z0JBQ1g7Z0JBQ0EsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlGLFVBQVUsRUFBRUUsRUFBRztvQkFDL0IsSUFBSSxDQUFDeEIsb0JBQW9CaUIsbUJBQW1CRixZQUFZLENBQUNTLEVBQUUsRUFBRVIsWUFBWSxDQUFDUSxFQUFFLEVBQUVuQixVQUFVO3dCQUNwRixPQUFPO29CQUNYO2dCQUNKO2dCQUNBLE9BQU87WUFDWDtZQUNBLE9BQU9MLG9CQUFvQmlCLG1CQUFtQkYsY0FBY0MsY0FBY1g7UUFDOUUsT0FDSztZQUNELElBQUlvQixXQUFXeEMsNkVBQXdCQSxDQUFDeUIsV0FBV0wsUUFBUUgsV0FBVztZQUN0RSxJQUFJdUIsVUFBVTtnQkFDVixtRUFBbUU7Z0JBQ25FLG1EQUFtRDtnQkFDbkQsSUFBSVosaUNBQWlDWSxXQUNqQyxPQUFPO2dCQUNYLE9BQU96QixvQkFBb0J5QixTQUFTeEIsWUFBWSxFQUNoRCxpRUFBaUU7Z0JBQ2pFLGtFQUFrRTtnQkFDbEUsb0VBQW9FO2dCQUNwRSx5REFBeUQ7Z0JBQ3pERSxTQUFTQyxTQUFTQztZQUN0QjtRQUNKO0lBQ0o7QUFDSjtBQUNBLFNBQVNRLGlDQUFpQ0gsU0FBUztJQUMvQyxPQUFRLENBQUMsQ0FBQ0EsVUFBVWdCLFVBQVUsSUFBSWhCLFVBQVVnQixVQUFVLENBQUNDLElBQUksQ0FBQ0M7QUFDaEU7QUFDQSxTQUFTQSx1QkFBdUJDLEdBQUc7SUFDL0IsT0FBT0EsSUFBSUMsSUFBSSxDQUFDQyxLQUFLLEtBQUs7QUFDOUIsRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9lcXVhbEJ5UXVlcnkuanM/OWZmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBlcXVhbCBmcm9tIFwiQHdyeS9lcXVhbGl0eVwiO1xuaW1wb3J0IHsgY3JlYXRlRnJhZ21lbnRNYXAsIGdldEZyYWdtZW50RGVmaW5pdGlvbnMsIGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbiwgZ2V0TWFpbkRlZmluaXRpb24sIGlzRmllbGQsIHJlc3VsdEtleU5hbWVGcm9tRmllbGQsIHNob3VsZEluY2x1ZGUsIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuLy8gUmV0dXJucyB0cnVlIGlmIGFSZXN1bHQgYW5kIGJSZXN1bHQgYXJlIGRlZXBseSBlcXVhbCBhY2NvcmRpbmcgdG8gdGhlIGZpZWxkc1xuLy8gc2VsZWN0ZWQgYnkgdGhlIGdpdmVuIHF1ZXJ5LCBpZ25vcmluZyBhbnkgZmllbGRzIG1hcmtlZCBhcyBAbm9ucmVhY3RpdmUuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxCeVF1ZXJ5KHF1ZXJ5LCBfYSwgX2IsIHZhcmlhYmxlcykge1xuICAgIHZhciBhRGF0YSA9IF9hLmRhdGEsIGFSZXN0ID0gX19yZXN0KF9hLCBbXCJkYXRhXCJdKTtcbiAgICB2YXIgYkRhdGEgPSBfYi5kYXRhLCBiUmVzdCA9IF9fcmVzdChfYiwgW1wiZGF0YVwiXSk7XG4gICAgcmV0dXJuIChlcXVhbChhUmVzdCwgYlJlc3QpICYmXG4gICAgICAgIGVxdWFsQnlTZWxlY3Rpb25TZXQoZ2V0TWFpbkRlZmluaXRpb24ocXVlcnkpLnNlbGVjdGlvblNldCwgYURhdGEsIGJEYXRhLCB7XG4gICAgICAgICAgICBmcmFnbWVudE1hcDogY3JlYXRlRnJhZ21lbnRNYXAoZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhxdWVyeSkpLFxuICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgIH0pKTtcbn1cbmZ1bmN0aW9uIGVxdWFsQnlTZWxlY3Rpb25TZXQoc2VsZWN0aW9uU2V0LCBhUmVzdWx0LCBiUmVzdWx0LCBjb250ZXh0KSB7XG4gICAgaWYgKGFSZXN1bHQgPT09IGJSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBzZWVuU2VsZWN0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICAvLyBSZXR1cm5pbmcgdHJ1ZSBmcm9tIHRoaXMgQXJyYXkucHJvdG90eXBlLmV2ZXJ5IGNhbGxiYWNrIGZ1bmN0aW9uIHNraXBzIHRoZVxuICAgIC8vIGN1cnJlbnQgZmllbGQvc3VidHJlZS4gUmV0dXJuaW5nIGZhbHNlIGFib3J0cyB0aGUgZW50aXJlIHRyYXZlcnNhbFxuICAgIC8vIGltbWVkaWF0ZWx5LCBjYXVzaW5nIGVxdWFsQnlTZWxlY3Rpb25TZXQgdG8gcmV0dXJuIGZhbHNlLlxuICAgIHJldHVybiBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5ldmVyeShmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIC8vIEF2b2lkIHJlLXByb2Nlc3NpbmcgdGhlIHNhbWUgc2VsZWN0aW9uIGF0IHRoZSBzYW1lIGxldmVsIG9mIHJlY3Vyc2lvbiwgaW5cbiAgICAgICAgLy8gY2FzZSB0aGUgc2FtZSBmaWVsZCBnZXRzIGluY2x1ZGVkIHZpYSBtdWx0aXBsZSBpbmRpcmVjdCBmcmFnbWVudCBzcHJlYWRzLlxuICAgICAgICBpZiAoc2VlblNlbGVjdGlvbnMuaGFzKHNlbGVjdGlvbikpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgc2VlblNlbGVjdGlvbnMuYWRkKHNlbGVjdGlvbik7XG4gICAgICAgIC8vIElnbm9yZSBAc2tpcChpZjogdHJ1ZSkgYW5kIEBpbmNsdWRlKGlmOiBmYWxzZSkgZmllbGRzLlxuICAgICAgICBpZiAoIXNob3VsZEluY2x1ZGUoc2VsZWN0aW9uLCBjb250ZXh0LnZhcmlhYmxlcykpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgLy8gSWYgdGhlIGZpZWxkIG9yIChuYW1lZCkgZnJhZ21lbnQgc3ByZWFkIGhhcyBhIEBub25yZWFjdGl2ZSBkaXJlY3RpdmUgb25cbiAgICAgICAgLy8gaXQsIHdlIGRvbid0IGNhcmUgaWYgaXQncyBkaWZmZXJlbnQsIHNvIHdlIHByZXRlbmQgaXQncyB0aGUgc2FtZS5cbiAgICAgICAgaWYgKHNlbGVjdGlvbkhhc05vbnJlYWN0aXZlRGlyZWN0aXZlKHNlbGVjdGlvbikpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGlzRmllbGQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdEtleSA9IHJlc3VsdEtleU5hbWVGcm9tRmllbGQoc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIHZhciBhUmVzdWx0Q2hpbGQgPSBhUmVzdWx0ICYmIGFSZXN1bHRbcmVzdWx0S2V5XTtcbiAgICAgICAgICAgIHZhciBiUmVzdWx0Q2hpbGQgPSBiUmVzdWx0ICYmIGJSZXN1bHRbcmVzdWx0S2V5XTtcbiAgICAgICAgICAgIHZhciBjaGlsZFNlbGVjdGlvblNldCA9IHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQ7XG4gICAgICAgICAgICBpZiAoIWNoaWxkU2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlc2UgYXJlIHNjYWxhciB2YWx1ZXMsIHNvIHdlIGNhbiBjb21wYXJlIHRoZW0gd2l0aCBkZWVwIGVxdWFsXG4gICAgICAgICAgICAgICAgLy8gd2l0aG91dCByZWRvaW5nIHRoZSBtYWluIHJlY3Vyc2l2ZSB3b3JrLlxuICAgICAgICAgICAgICAgIHJldHVybiBlcXVhbChhUmVzdWx0Q2hpbGQsIGJSZXN1bHRDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYUNoaWxkSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoYVJlc3VsdENoaWxkKTtcbiAgICAgICAgICAgIHZhciBiQ2hpbGRJc0FycmF5ID0gQXJyYXkuaXNBcnJheShiUmVzdWx0Q2hpbGQpO1xuICAgICAgICAgICAgaWYgKGFDaGlsZElzQXJyYXkgIT09IGJDaGlsZElzQXJyYXkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKGFDaGlsZElzQXJyYXkgJiYgYkNoaWxkSXNBcnJheSkge1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGhfMSA9IGFSZXN1bHRDaGlsZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGJSZXN1bHRDaGlsZC5sZW5ndGggIT09IGxlbmd0aF8xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGhfMTsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXF1YWxCeVNlbGVjdGlvblNldChjaGlsZFNlbGVjdGlvblNldCwgYVJlc3VsdENoaWxkW2ldLCBiUmVzdWx0Q2hpbGRbaV0sIGNvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXF1YWxCeVNlbGVjdGlvblNldChjaGlsZFNlbGVjdGlvblNldCwgYVJlc3VsdENoaWxkLCBiUmVzdWx0Q2hpbGQsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uKHNlbGVjdGlvbiwgY29udGV4dC5mcmFnbWVudE1hcCk7XG4gICAgICAgICAgICBpZiAoZnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZnJhZ21lbnQgbWlnaHQgPT09IHNlbGVjdGlvbiBpZiBpdCdzIGFuIGlubGluZSBmcmFnbWVudCwgYnV0XG4gICAgICAgICAgICAgICAgLy8gY291bGQgYmUgIT09IGlmIGl0J3MgYSBuYW1lZCBmcmFnbWVudCAuLi5zcHJlYWQuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkhhc05vbnJlYWN0aXZlRGlyZWN0aXZlKGZyYWdtZW50KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVxdWFsQnlTZWxlY3Rpb25TZXQoZnJhZ21lbnQuc2VsZWN0aW9uU2V0LCBcbiAgICAgICAgICAgICAgICAvLyBOb3RpY2UgdGhhdCB3ZSByZXVzZSB0aGUgc2FtZSBhUmVzdWx0IGFuZCBiUmVzdWx0IHZhbHVlcyBoZXJlLFxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBmcmFnbWVudCAuLi5zcHJlYWQgZG9lcyBub3Qgc3BlY2lmeSBhIGZpZWxkIG5hbWUsIGJ1dFxuICAgICAgICAgICAgICAgIC8vIGNvbnNpc3RzIG9mIG11bHRpcGxlIGZpZWxkcyAod2l0aGluIHRoZSBmcmFnbWVudCdzIHNlbGVjdGlvbiBzZXQpXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBzaG91bGQgYmUgYXBwbGllZCB0byB0aGUgY3VycmVudCByZXN1bHQgdmFsdWUocykuXG4gICAgICAgICAgICAgICAgYVJlc3VsdCwgYlJlc3VsdCwgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNlbGVjdGlvbkhhc05vbnJlYWN0aXZlRGlyZWN0aXZlKHNlbGVjdGlvbikge1xuICAgIHJldHVybiAoISFzZWxlY3Rpb24uZGlyZWN0aXZlcyAmJiBzZWxlY3Rpb24uZGlyZWN0aXZlcy5zb21lKGRpcmVjdGl2ZUlzTm9ucmVhY3RpdmUpKTtcbn1cbmZ1bmN0aW9uIGRpcmVjdGl2ZUlzTm9ucmVhY3RpdmUoZGlyKSB7XG4gICAgcmV0dXJuIGRpci5uYW1lLnZhbHVlID09PSBcIm5vbnJlYWN0aXZlXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcXVhbEJ5UXVlcnkuanMubWFwIl0sIm5hbWVzIjpbIl9fcmVzdCIsImVxdWFsIiwiY3JlYXRlRnJhZ21lbnRNYXAiLCJnZXRGcmFnbWVudERlZmluaXRpb25zIiwiZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uIiwiZ2V0TWFpbkRlZmluaXRpb24iLCJpc0ZpZWxkIiwicmVzdWx0S2V5TmFtZUZyb21GaWVsZCIsInNob3VsZEluY2x1ZGUiLCJlcXVhbEJ5UXVlcnkiLCJxdWVyeSIsIl9hIiwiX2IiLCJ2YXJpYWJsZXMiLCJhRGF0YSIsImRhdGEiLCJhUmVzdCIsImJEYXRhIiwiYlJlc3QiLCJlcXVhbEJ5U2VsZWN0aW9uU2V0Iiwic2VsZWN0aW9uU2V0IiwiZnJhZ21lbnRNYXAiLCJhUmVzdWx0IiwiYlJlc3VsdCIsImNvbnRleHQiLCJzZWVuU2VsZWN0aW9ucyIsIlNldCIsInNlbGVjdGlvbnMiLCJldmVyeSIsInNlbGVjdGlvbiIsImhhcyIsImFkZCIsInNlbGVjdGlvbkhhc05vbnJlYWN0aXZlRGlyZWN0aXZlIiwicmVzdWx0S2V5IiwiYVJlc3VsdENoaWxkIiwiYlJlc3VsdENoaWxkIiwiY2hpbGRTZWxlY3Rpb25TZXQiLCJhQ2hpbGRJc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiYkNoaWxkSXNBcnJheSIsImxlbmd0aF8xIiwibGVuZ3RoIiwiaSIsImZyYWdtZW50IiwiZGlyZWN0aXZlcyIsInNvbWUiLCJkaXJlY3RpdmVJc05vbnJlYWN0aXZlIiwiZGlyIiwibmFtZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@apollo/client/core/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloCache: () => (/* reexport safe */ _cache_index_js__WEBPACK_IMPORTED_MODULE_6__.ApolloCache),\n/* harmony export */   ApolloClient: () => (/* reexport safe */ _ApolloClient_js__WEBPACK_IMPORTED_MODULE_0__.ApolloClient),\n/* harmony export */   ApolloError: () => (/* reexport safe */ _errors_index_js__WEBPACK_IMPORTED_MODULE_4__.ApolloError),\n/* harmony export */   ApolloLink: () => (/* reexport safe */ _link_core_index_js__WEBPACK_IMPORTED_MODULE_11__.ApolloLink),\n/* harmony export */   Cache: () => (/* reexport safe */ _cache_index_js__WEBPACK_IMPORTED_MODULE_5__.Cache),\n/* harmony export */   DocumentTransform: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.DocumentTransform),\n/* harmony export */   HttpLink: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.HttpLink),\n/* harmony export */   InMemoryCache: () => (/* reexport safe */ _cache_index_js__WEBPACK_IMPORTED_MODULE_7__.InMemoryCache),\n/* harmony export */   MissingFieldError: () => (/* reexport safe */ _cache_index_js__WEBPACK_IMPORTED_MODULE_8__.MissingFieldError),\n/* harmony export */   NetworkStatus: () => (/* reexport safe */ _networkStatus_js__WEBPACK_IMPORTED_MODULE_3__.NetworkStatus),\n/* harmony export */   Observable: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_18__.Observable),\n/* harmony export */   ObservableQuery: () => (/* reexport safe */ _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_2__.ObservableQuery),\n/* harmony export */   checkFetcher: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.checkFetcher),\n/* harmony export */   concat: () => (/* reexport safe */ _link_core_index_js__WEBPACK_IMPORTED_MODULE_11__.concat),\n/* harmony export */   createHttpLink: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.createHttpLink),\n/* harmony export */   createSignalIfSupported: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.createSignalIfSupported),\n/* harmony export */   defaultDataIdFromObject: () => (/* reexport safe */ _cache_index_js__WEBPACK_IMPORTED_MODULE_9__.defaultDataIdFromObject),\n/* harmony export */   defaultPrinter: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.defaultPrinter),\n/* harmony export */   disableExperimentalFragmentVariables: () => (/* reexport safe */ graphql_tag__WEBPACK_IMPORTED_MODULE_21__.disableExperimentalFragmentVariables),\n/* harmony export */   disableFragmentWarnings: () => (/* reexport safe */ graphql_tag__WEBPACK_IMPORTED_MODULE_21__.disableFragmentWarnings),\n/* harmony export */   empty: () => (/* reexport safe */ _link_core_index_js__WEBPACK_IMPORTED_MODULE_11__.empty),\n/* harmony export */   enableExperimentalFragmentVariables: () => (/* reexport safe */ graphql_tag__WEBPACK_IMPORTED_MODULE_21__.enableExperimentalFragmentVariables),\n/* harmony export */   execute: () => (/* reexport safe */ _link_core_index_js__WEBPACK_IMPORTED_MODULE_11__.execute),\n/* harmony export */   fallbackHttpConfig: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.fallbackHttpConfig),\n/* harmony export */   from: () => (/* reexport safe */ _link_core_index_js__WEBPACK_IMPORTED_MODULE_11__.from),\n/* harmony export */   fromError: () => (/* reexport safe */ _link_utils_index_js__WEBPACK_IMPORTED_MODULE_13__.fromError),\n/* harmony export */   fromPromise: () => (/* reexport safe */ _link_utils_index_js__WEBPACK_IMPORTED_MODULE_15__.fromPromise),\n/* harmony export */   gql: () => (/* reexport safe */ graphql_tag__WEBPACK_IMPORTED_MODULE_21__.gql),\n/* harmony export */   isApolloError: () => (/* reexport safe */ _errors_index_js__WEBPACK_IMPORTED_MODULE_4__.isApolloError),\n/* harmony export */   isNetworkRequestSettled: () => (/* reexport safe */ _networkStatus_js__WEBPACK_IMPORTED_MODULE_3__.isNetworkRequestSettled),\n/* harmony export */   isReference: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.isReference),\n/* harmony export */   makeReference: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.makeReference),\n/* harmony export */   makeVar: () => (/* reexport safe */ _cache_index_js__WEBPACK_IMPORTED_MODULE_10__.makeVar),\n/* harmony export */   mergeOptions: () => (/* reexport safe */ _ApolloClient_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions),\n/* harmony export */   parseAndCheckHttpResponse: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.parseAndCheckHttpResponse),\n/* harmony export */   resetCaches: () => (/* reexport safe */ graphql_tag__WEBPACK_IMPORTED_MODULE_21__.resetCaches),\n/* harmony export */   rewriteURIForGET: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.rewriteURIForGET),\n/* harmony export */   selectHttpOptionsAndBody: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.selectHttpOptionsAndBody),\n/* harmony export */   selectHttpOptionsAndBodyInternal: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.selectHttpOptionsAndBodyInternal),\n/* harmony export */   selectURI: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.selectURI),\n/* harmony export */   serializeFetchParameter: () => (/* reexport safe */ _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__.serializeFetchParameter),\n/* harmony export */   setLogVerbosity: () => (/* reexport safe */ ts_invariant__WEBPACK_IMPORTED_MODULE_20__.setVerbosity),\n/* harmony export */   split: () => (/* reexport safe */ _link_core_index_js__WEBPACK_IMPORTED_MODULE_11__.split),\n/* harmony export */   throwServerError: () => (/* reexport safe */ _link_utils_index_js__WEBPACK_IMPORTED_MODULE_16__.throwServerError),\n/* harmony export */   toPromise: () => (/* reexport safe */ _link_utils_index_js__WEBPACK_IMPORTED_MODULE_14__.toPromise)\n/* harmony export */ });\n/* harmony import */ var _ApolloClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/core/ApolloClient.js\");\n/* harmony import */ var _ApolloClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ObservableQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/Cache.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/cache.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/index.js\");\n/* harmony import */ var _link_http_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../link/http/index.js */ \"(ssr)/./node_modules/@apollo/client/link/http/index.js\");\n/* harmony import */ var _link_utils_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../link/utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/fromError.js\");\n/* harmony import */ var _link_utils_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../link/utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/toPromise.js\");\n/* harmony import */ var _link_utils_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../link/utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/fromPromise.js\");\n/* harmony import */ var _link_utils_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../link/utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var ts_invariant__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.js\");\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! graphql-tag */ \"(ssr)/./node_modules/graphql-tag/lib/index.js\");\n/* Core */ \n\n\n\n\n\n\n/* Link */ \n\n\n\n/* Supporting */ // The verbosity of invariant.{log,warn,error} can be controlled globally\n// (for anyone using the same ts-invariant package) by passing \"log\",\n// \"warn\", \"error\", or \"silent\" to setVerbosity (\"log\" is the default).\n// Note that all invariant.* logging is hidden in production.\n\n\n(0,ts_invariant__WEBPACK_IMPORTED_MODULE_20__.setVerbosity)(globalThis.__DEV__ !== false ? \"log\" : \"silent\");\n// Note that importing `gql` by itself, then destructuring\n// additional properties separately before exporting, is intentional.\n// Due to the way the `graphql-tag` library is setup, certain bundlers\n// can't find the properties added to the exported `gql` function without\n// additional guidance (e.g. Rollup - see\n// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).\n// Instead of having people that are using bundlers with `@apollo/client` add\n// extra bundler config to help `graphql-tag` exports be found (which would be\n// awkward since they aren't importing `graphql-tag` themselves), this\n// workaround of pulling the extra properties off the `gql` function,\n// then re-exporting them separately, helps keeps bundlers happy without any\n// additional config changes.\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsUUFBUSxHQUN1RDtBQUNSO0FBQ3FCO0FBQ2pEO0FBQ3FDO0FBQzREO0FBQ2pGO0FBQzNDLFFBQVEsR0FDOEI7QUFDQTtBQUN3RDtBQUNLO0FBQ25HLGNBQWMsR0FDZCx5RUFBeUU7QUFDekUscUVBQXFFO0FBQ3JFLHVFQUF1RTtBQUN2RSw2REFBNkQ7QUFDakI7QUFDRDtBQUMzQ3FCLDJEQUFZQSxDQUFDRSxXQUFXQyxPQUFPLEtBQUssUUFBUSxRQUFRO0FBQ3BELDBEQUEwRDtBQUMxRCxxRUFBcUU7QUFDckUsc0VBQXNFO0FBQ3RFLHlFQUF5RTtBQUN6RSx5Q0FBeUM7QUFDekMsd0VBQXdFO0FBQ3hFLDZFQUE2RTtBQUM3RSw4RUFBOEU7QUFDOUUsc0VBQXNFO0FBQ3RFLHFFQUFxRTtBQUNyRSw0RUFBNEU7QUFDNUUsNkJBQTZCO0FBQ3VILENBQ3BKLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jb3JlL2luZGV4LmpzPzQ1OTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29yZSAqL1xuZXhwb3J0IHsgQXBvbGxvQ2xpZW50LCBtZXJnZU9wdGlvbnMgfSBmcm9tIFwiLi9BcG9sbG9DbGllbnQuanNcIjtcbmV4cG9ydCB7IE9ic2VydmFibGVRdWVyeSB9IGZyb20gXCIuL09ic2VydmFibGVRdWVyeS5qc1wiO1xuZXhwb3J0IHsgTmV0d29ya1N0YXR1cywgaXNOZXR3b3JrUmVxdWVzdFNldHRsZWQgfSBmcm9tIFwiLi9uZXR3b3JrU3RhdHVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlcy5qc1wiO1xuZXhwb3J0IHsgaXNBcG9sbG9FcnJvciwgQXBvbGxvRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBDYWNoZSwgQXBvbGxvQ2FjaGUsIEluTWVtb3J5Q2FjaGUsIE1pc3NpbmdGaWVsZEVycm9yLCBkZWZhdWx0RGF0YUlkRnJvbU9iamVjdCwgbWFrZVZhciwgfSBmcm9tIFwiLi4vY2FjaGUvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuLi9jYWNoZS9pbm1lbW9yeS90eXBlcy5qc1wiO1xuLyogTGluayAqL1xuZXhwb3J0ICogZnJvbSBcIi4uL2xpbmsvY29yZS9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4uL2xpbmsvaHR0cC9pbmRleC5qc1wiO1xuZXhwb3J0IHsgZnJvbUVycm9yLCB0b1Byb21pc2UsIGZyb21Qcm9taXNlLCB0aHJvd1NlcnZlckVycm9yLCB9IGZyb20gXCIuLi9saW5rL3V0aWxzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBEb2N1bWVudFRyYW5zZm9ybSwgT2JzZXJ2YWJsZSwgaXNSZWZlcmVuY2UsIG1ha2VSZWZlcmVuY2UsIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuLyogU3VwcG9ydGluZyAqL1xuLy8gVGhlIHZlcmJvc2l0eSBvZiBpbnZhcmlhbnQue2xvZyx3YXJuLGVycm9yfSBjYW4gYmUgY29udHJvbGxlZCBnbG9iYWxseVxuLy8gKGZvciBhbnlvbmUgdXNpbmcgdGhlIHNhbWUgdHMtaW52YXJpYW50IHBhY2thZ2UpIGJ5IHBhc3NpbmcgXCJsb2dcIixcbi8vIFwid2FyblwiLCBcImVycm9yXCIsIG9yIFwic2lsZW50XCIgdG8gc2V0VmVyYm9zaXR5IChcImxvZ1wiIGlzIHRoZSBkZWZhdWx0KS5cbi8vIE5vdGUgdGhhdCBhbGwgaW52YXJpYW50LiogbG9nZ2luZyBpcyBoaWRkZW4gaW4gcHJvZHVjdGlvbi5cbmltcG9ydCB7IHNldFZlcmJvc2l0eSB9IGZyb20gXCJ0cy1pbnZhcmlhbnRcIjtcbmV4cG9ydCB7IHNldFZlcmJvc2l0eSBhcyBzZXRMb2dWZXJib3NpdHkgfTtcbnNldFZlcmJvc2l0eShnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlID8gXCJsb2dcIiA6IFwic2lsZW50XCIpO1xuLy8gTm90ZSB0aGF0IGltcG9ydGluZyBgZ3FsYCBieSBpdHNlbGYsIHRoZW4gZGVzdHJ1Y3R1cmluZ1xuLy8gYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHNlcGFyYXRlbHkgYmVmb3JlIGV4cG9ydGluZywgaXMgaW50ZW50aW9uYWwuXG4vLyBEdWUgdG8gdGhlIHdheSB0aGUgYGdyYXBocWwtdGFnYCBsaWJyYXJ5IGlzIHNldHVwLCBjZXJ0YWluIGJ1bmRsZXJzXG4vLyBjYW4ndCBmaW5kIHRoZSBwcm9wZXJ0aWVzIGFkZGVkIHRvIHRoZSBleHBvcnRlZCBgZ3FsYCBmdW5jdGlvbiB3aXRob3V0XG4vLyBhZGRpdGlvbmFsIGd1aWRhbmNlIChlLmcuIFJvbGx1cCAtIHNlZVxuLy8gaHR0cHM6Ly9yb2xsdXBqcy5vcmcvZ3VpZGUvZW4vI2Vycm9yLW5hbWUtaXMtbm90LWV4cG9ydGVkLWJ5LW1vZHVsZSkuXG4vLyBJbnN0ZWFkIG9mIGhhdmluZyBwZW9wbGUgdGhhdCBhcmUgdXNpbmcgYnVuZGxlcnMgd2l0aCBgQGFwb2xsby9jbGllbnRgIGFkZFxuLy8gZXh0cmEgYnVuZGxlciBjb25maWcgdG8gaGVscCBgZ3JhcGhxbC10YWdgIGV4cG9ydHMgYmUgZm91bmQgKHdoaWNoIHdvdWxkIGJlXG4vLyBhd2t3YXJkIHNpbmNlIHRoZXkgYXJlbid0IGltcG9ydGluZyBgZ3JhcGhxbC10YWdgIHRoZW1zZWx2ZXMpLCB0aGlzXG4vLyB3b3JrYXJvdW5kIG9mIHB1bGxpbmcgdGhlIGV4dHJhIHByb3BlcnRpZXMgb2ZmIHRoZSBgZ3FsYCBmdW5jdGlvbixcbi8vIHRoZW4gcmUtZXhwb3J0aW5nIHRoZW0gc2VwYXJhdGVseSwgaGVscHMga2VlcHMgYnVuZGxlcnMgaGFwcHkgd2l0aG91dCBhbnlcbi8vIGFkZGl0aW9uYWwgY29uZmlnIGNoYW5nZXMuXG5leHBvcnQgeyBncWwsIHJlc2V0Q2FjaGVzLCBkaXNhYmxlRnJhZ21lbnRXYXJuaW5ncywgZW5hYmxlRXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMsIGRpc2FibGVFeHBlcmltZW50YWxGcmFnbWVudFZhcmlhYmxlcywgfSBmcm9tIFwiZ3JhcGhxbC10YWdcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJBcG9sbG9DbGllbnQiLCJtZXJnZU9wdGlvbnMiLCJPYnNlcnZhYmxlUXVlcnkiLCJOZXR3b3JrU3RhdHVzIiwiaXNOZXR3b3JrUmVxdWVzdFNldHRsZWQiLCJpc0Fwb2xsb0Vycm9yIiwiQXBvbGxvRXJyb3IiLCJDYWNoZSIsIkFwb2xsb0NhY2hlIiwiSW5NZW1vcnlDYWNoZSIsIk1pc3NpbmdGaWVsZEVycm9yIiwiZGVmYXVsdERhdGFJZEZyb21PYmplY3QiLCJtYWtlVmFyIiwiZnJvbUVycm9yIiwidG9Qcm9taXNlIiwiZnJvbVByb21pc2UiLCJ0aHJvd1NlcnZlckVycm9yIiwiRG9jdW1lbnRUcmFuc2Zvcm0iLCJPYnNlcnZhYmxlIiwiaXNSZWZlcmVuY2UiLCJtYWtlUmVmZXJlbmNlIiwic2V0VmVyYm9zaXR5Iiwic2V0TG9nVmVyYm9zaXR5IiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJncWwiLCJyZXNldENhY2hlcyIsImRpc2FibGVGcmFnbWVudFdhcm5pbmdzIiwiZW5hYmxlRXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMiLCJkaXNhYmxlRXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/networkStatus.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/core/networkStatus.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkStatus: () => (/* binding */ NetworkStatus),\n/* harmony export */   isNetworkRequestInFlight: () => (/* binding */ isNetworkRequestInFlight),\n/* harmony export */   isNetworkRequestSettled: () => (/* binding */ isNetworkRequestSettled)\n/* harmony export */ });\n/**\n * The current status of a query’s execution in our system.\n */ var NetworkStatus;\n(function(NetworkStatus) {\n    /**\n     * The query has never been run before and the query is now currently running. A query will still\n     * have this network status even if a partial data result was returned from the cache, but a\n     * query was dispatched anyway.\n     */ NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    /**\n     * If `setVariables` was called and a query was fired because of that then the network status\n     * will be `setVariables` until the result of that query comes back.\n     */ NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    /**\n     * Indicates that `fetchMore` was called on this query and that the query created is currently in\n     * flight.\n     */ NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    /**\n     * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n     * and the refetch request is currently in flight.\n     */ NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    /**\n     * Indicates that a polling query is currently in flight. So for example if you are polling a\n     * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n     * a poll request has been sent but not resolved.\n     */ NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    /**\n     * No request is in flight for this query, and no errors happened. Everything is OK.\n     */ NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    /**\n     * No request is in flight for this query, but one or more errors were detected.\n     */ NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */ function isNetworkRequestInFlight(networkStatus) {\n    return networkStatus ? networkStatus < 7 : false;\n}\n/**\n * Returns true if the network request is in ready or error state according to a given network\n * status.\n */ function isNetworkRequestSettled(networkStatus) {\n    return networkStatus === 7 || networkStatus === 8;\n} //# sourceMappingURL=networkStatus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9uZXR3b3JrU3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBQ00sSUFBSUEsY0FBYztBQUN4QixVQUFVQSxhQUFhO0lBQ3BCOzs7O0tBSUMsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5Qzs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsZUFBZSxHQUFHLEVBQUUsR0FBRztJQUNuRDs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRztJQUNoRDs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5Qzs7OztLQUlDLEdBQ0RBLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDM0M7O0tBRUMsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztJQUM1Qzs7S0FFQyxHQUNEQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0FBQ2hELEdBQUdBLGlCQUFrQkEsQ0FBQUEsZ0JBQWdCLENBQUM7QUFDdEM7OztDQUdDLEdBQ00sU0FBU0MseUJBQXlCQyxhQUFhO0lBQ2xELE9BQU9BLGdCQUFnQkEsZ0JBQWdCLElBQUk7QUFDL0M7QUFDQTs7O0NBR0MsR0FDTSxTQUFTQyx3QkFBd0JELGFBQWE7SUFDakQsT0FBT0Esa0JBQWtCLEtBQUtBLGtCQUFrQjtBQUNwRCxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jb3JlL25ldHdvcmtTdGF0dXMuanM/MDJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiBhIHF1ZXJ54oCZcyBleGVjdXRpb24gaW4gb3VyIHN5c3RlbS5cbiAqL1xuZXhwb3J0IHZhciBOZXR3b3JrU3RhdHVzO1xuKGZ1bmN0aW9uIChOZXR3b3JrU3RhdHVzKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHF1ZXJ5IGhhcyBuZXZlciBiZWVuIHJ1biBiZWZvcmUgYW5kIHRoZSBxdWVyeSBpcyBub3cgY3VycmVudGx5IHJ1bm5pbmcuIEEgcXVlcnkgd2lsbCBzdGlsbFxuICAgICAqIGhhdmUgdGhpcyBuZXR3b3JrIHN0YXR1cyBldmVuIGlmIGEgcGFydGlhbCBkYXRhIHJlc3VsdCB3YXMgcmV0dXJuZWQgZnJvbSB0aGUgY2FjaGUsIGJ1dCBhXG4gICAgICogcXVlcnkgd2FzIGRpc3BhdGNoZWQgYW55d2F5LlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcImxvYWRpbmdcIl0gPSAxXSA9IFwibG9hZGluZ1wiO1xuICAgIC8qKlxuICAgICAqIElmIGBzZXRWYXJpYWJsZXNgIHdhcyBjYWxsZWQgYW5kIGEgcXVlcnkgd2FzIGZpcmVkIGJlY2F1c2Ugb2YgdGhhdCB0aGVuIHRoZSBuZXR3b3JrIHN0YXR1c1xuICAgICAqIHdpbGwgYmUgYHNldFZhcmlhYmxlc2AgdW50aWwgdGhlIHJlc3VsdCBvZiB0aGF0IHF1ZXJ5IGNvbWVzIGJhY2suXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wic2V0VmFyaWFibGVzXCJdID0gMl0gPSBcInNldFZhcmlhYmxlc1wiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGBmZXRjaE1vcmVgIHdhcyBjYWxsZWQgb24gdGhpcyBxdWVyeSBhbmQgdGhhdCB0aGUgcXVlcnkgY3JlYXRlZCBpcyBjdXJyZW50bHkgaW5cbiAgICAgKiBmbGlnaHQuXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wiZmV0Y2hNb3JlXCJdID0gM10gPSBcImZldGNoTW9yZVwiO1xuICAgIC8qKlxuICAgICAqIFNpbWlsYXIgdG8gdGhlIGBzZXRWYXJpYWJsZXNgIG5ldHdvcmsgc3RhdHVzLiBJdCBtZWFucyB0aGF0IGByZWZldGNoYCB3YXMgY2FsbGVkIG9uIGEgcXVlcnlcbiAgICAgKiBhbmQgdGhlIHJlZmV0Y2ggcmVxdWVzdCBpcyBjdXJyZW50bHkgaW4gZmxpZ2h0LlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcInJlZmV0Y2hcIl0gPSA0XSA9IFwicmVmZXRjaFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGEgcG9sbGluZyBxdWVyeSBpcyBjdXJyZW50bHkgaW4gZmxpZ2h0LiBTbyBmb3IgZXhhbXBsZSBpZiB5b3UgYXJlIHBvbGxpbmcgYVxuICAgICAqIHF1ZXJ5IGV2ZXJ5IDEwIHNlY29uZHMgdGhlbiB0aGUgbmV0d29yayBzdGF0dXMgd2lsbCBzd2l0Y2ggdG8gYHBvbGxgIGV2ZXJ5IDEwIHNlY29uZHMgd2hlbmV2ZXJcbiAgICAgKiBhIHBvbGwgcmVxdWVzdCBoYXMgYmVlbiBzZW50IGJ1dCBub3QgcmVzb2x2ZWQuXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wicG9sbFwiXSA9IDZdID0gXCJwb2xsXCI7XG4gICAgLyoqXG4gICAgICogTm8gcmVxdWVzdCBpcyBpbiBmbGlnaHQgZm9yIHRoaXMgcXVlcnksIGFuZCBubyBlcnJvcnMgaGFwcGVuZWQuIEV2ZXJ5dGhpbmcgaXMgT0suXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wicmVhZHlcIl0gPSA3XSA9IFwicmVhZHlcIjtcbiAgICAvKipcbiAgICAgKiBObyByZXF1ZXN0IGlzIGluIGZsaWdodCBmb3IgdGhpcyBxdWVyeSwgYnV0IG9uZSBvciBtb3JlIGVycm9ycyB3ZXJlIGRldGVjdGVkLlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcImVycm9yXCJdID0gOF0gPSBcImVycm9yXCI7XG59KShOZXR3b3JrU3RhdHVzIHx8IChOZXR3b3JrU3RhdHVzID0ge30pKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGN1cnJlbnRseSBhIG5ldHdvcmsgcmVxdWVzdCBpbiBmbGlnaHQgYWNjb3JkaW5nIHRvIGEgZ2l2ZW4gbmV0d29ya1xuICogc3RhdHVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOZXR3b3JrUmVxdWVzdEluRmxpZ2h0KG5ldHdvcmtTdGF0dXMpIHtcbiAgICByZXR1cm4gbmV0d29ya1N0YXR1cyA/IG5ldHdvcmtTdGF0dXMgPCA3IDogZmFsc2U7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbmV0d29yayByZXF1ZXN0IGlzIGluIHJlYWR5IG9yIGVycm9yIHN0YXRlIGFjY29yZGluZyB0byBhIGdpdmVuIG5ldHdvcmtcbiAqIHN0YXR1cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmV0d29ya1JlcXVlc3RTZXR0bGVkKG5ldHdvcmtTdGF0dXMpIHtcbiAgICByZXR1cm4gbmV0d29ya1N0YXR1cyA9PT0gNyB8fCBuZXR3b3JrU3RhdHVzID09PSA4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29ya1N0YXR1cy5qcy5tYXAiXSwibmFtZXMiOlsiTmV0d29ya1N0YXR1cyIsImlzTmV0d29ya1JlcXVlc3RJbkZsaWdodCIsIm5ldHdvcmtTdGF0dXMiLCJpc05ldHdvcmtSZXF1ZXN0U2V0dGxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/networkStatus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/errors/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@apollo/client/errors/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloError: () => (/* binding */ ApolloError),\n/* harmony export */   PROTOCOL_ERRORS_SYMBOL: () => (/* binding */ PROTOCOL_ERRORS_SYMBOL),\n/* harmony export */   graphQLResultHasProtocolErrors: () => (/* binding */ graphQLResultHasProtocolErrors),\n/* harmony export */   isApolloError: () => (/* binding */ isApolloError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\n\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nvar PROTOCOL_ERRORS_SYMBOL = Symbol();\nfunction graphQLResultHasProtocolErrors(result) {\n    if (result.extensions) {\n        return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\nfunction isApolloError(err) {\n    return err.hasOwnProperty(\"graphQLErrors\");\n}\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nvar generateErrorMessage = function(err) {\n    var errors = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n    if (err.networkError) errors.push(err.networkError);\n    return errors// The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n    .map(function(err) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonNullObject)(err) && err.message || \"Error message not found.\";\n    }).join(\"\\n\");\n};\nvar ApolloError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(ApolloError, _super);\n    // Constructs an instance of ApolloError given serialized GraphQL errors,\n    // client errors, protocol errors or network errors.\n    // Note that one of these has to be a valid\n    // value or the constructed error will be meaningless.\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, protocolErrors = _a.protocolErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.name = \"ApolloError\";\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.protocolErrors = protocolErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        _this.cause = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n            networkError\n        ], graphQLErrors || [], true), protocolErrors || [], true), clientErrors || [], true).find(function(e) {\n            return !!e;\n        }) || null;\n        // We're not using `Object.setPrototypeOf` here as it isn't fully\n        // supported on Android (see issue #3236).\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error);\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBaUQ7QUFDVjtBQUNpQjtBQUN4RCw4RUFBOEU7QUFDOUUsK0VBQStFO0FBQy9FLDJEQUEyRDtBQUNwRCxJQUFJRyx5QkFBeUJDLFNBQVM7QUFDdEMsU0FBU0MsK0JBQStCQyxNQUFNO0lBQ2pELElBQUlBLE9BQU9DLFVBQVUsRUFBRTtRQUNuQixPQUFPQyxNQUFNQyxPQUFPLENBQUNILE9BQU9DLFVBQVUsQ0FBQ0osdUJBQXVCO0lBQ2xFO0lBQ0EsT0FBTztBQUNYO0FBQ08sU0FBU08sY0FBY0MsR0FBRztJQUM3QixPQUFPQSxJQUFJQyxjQUFjLENBQUM7QUFDOUI7QUFDQSx3REFBd0Q7QUFDeEQsbURBQW1EO0FBQ25ELHdEQUF3RDtBQUN4RCxvREFBb0Q7QUFDcEQsSUFBSUMsdUJBQXVCLFNBQVVGLEdBQUc7SUFDcEMsSUFBSUcsU0FBU2Isb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDQSxvREFBYUEsQ0FBQyxFQUFFLEVBQUVVLElBQUlJLGFBQWEsRUFBRSxPQUFPSixJQUFJSyxZQUFZLEVBQUUsT0FBT0wsSUFBSU0sY0FBYyxFQUFFO0lBQ2xJLElBQUlOLElBQUlPLFlBQVksRUFDaEJKLE9BQU9LLElBQUksQ0FBQ1IsSUFBSU8sWUFBWTtJQUNoQyxPQUFRSixNQUNKLG1GQUFtRjtLQUNsRk0sR0FBRyxDQUFDLFNBQVVULEdBQUc7UUFDbEIsT0FBTyxxRUFBaUJBLFFBQVFBLElBQUlVLE9BQU8sSUFBSztJQUNwRCxHQUNLQyxJQUFJLENBQUM7QUFDZDtBQUNBLElBQUlDLGNBQWMsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDN0N4QixnREFBU0EsQ0FBQ3VCLGFBQWFDO0lBQ3ZCLHlFQUF5RTtJQUN6RSxvREFBb0Q7SUFDcEQsMkNBQTJDO0lBQzNDLHNEQUFzRDtJQUN0RCxTQUFTRCxZQUFZRSxFQUFFO1FBQ25CLElBQUlWLGdCQUFnQlUsR0FBR1YsYUFBYSxFQUFFRSxpQkFBaUJRLEdBQUdSLGNBQWMsRUFBRUQsZUFBZVMsR0FBR1QsWUFBWSxFQUFFRSxlQUFlTyxHQUFHUCxZQUFZLEVBQUVRLGVBQWVELEdBQUdDLFlBQVksRUFBRUMsWUFBWUYsR0FBR0UsU0FBUztRQUNsTSxJQUFJQyxRQUFRSixPQUFPSyxJQUFJLENBQUMsSUFBSSxFQUFFSCxpQkFBaUIsSUFBSTtRQUNuREUsTUFBTUUsSUFBSSxHQUFHO1FBQ2JGLE1BQU1iLGFBQWEsR0FBR0EsaUJBQWlCLEVBQUU7UUFDekNhLE1BQU1YLGNBQWMsR0FBR0Esa0JBQWtCLEVBQUU7UUFDM0NXLE1BQU1aLFlBQVksR0FBR0EsZ0JBQWdCLEVBQUU7UUFDdkNZLE1BQU1WLFlBQVksR0FBR0EsZ0JBQWdCO1FBQ3JDVSxNQUFNUCxPQUFPLEdBQUdLLGdCQUFnQmIscUJBQXFCZTtRQUNyREEsTUFBTUQsU0FBUyxHQUFHQTtRQUNsQkMsTUFBTUcsS0FBSyxHQUNQOUIsb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDQSxvREFBYUEsQ0FBQztZQUN0Q2lCO1NBQ0gsRUFBR0gsaUJBQWlCLEVBQUUsRUFBRyxPQUFRRSxrQkFBa0IsRUFBRSxFQUFHLE9BQVFELGdCQUFnQixFQUFFLEVBQUcsTUFBTWdCLElBQUksQ0FBQyxTQUFVQyxDQUFDO1lBQUksT0FBTyxDQUFDLENBQUNBO1FBQUcsTUFBTTtRQUN0SSxpRUFBaUU7UUFDakUsMENBQTBDO1FBQzFDTCxNQUFNTSxTQUFTLEdBQUdYLFlBQVlZLFNBQVM7UUFDdkMsT0FBT1A7SUFDWDtJQUNBLE9BQU9MO0FBQ1gsRUFBRWE7QUFDcUIsQ0FDdkIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2Vycm9ycy9pbmRleC5qcz8yOTU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcywgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFwiLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzTm9uTnVsbE9iamVjdCB9IGZyb20gXCIuLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbi8vIFRoaXMgU3ltYm9sIGFsbG93cyB1cyB0byBwYXNzIHRyYW5zcG9ydC1zcGVjaWZpYyBlcnJvcnMgZnJvbSB0aGUgbGluayBjaGFpblxuLy8gaW50byBRdWVyeU1hbmFnZXIvY2xpZW50IGludGVybmFscyB3aXRob3V0IHJpc2tpbmcgYSBuYW1pbmcgY29sbGlzaW9uIHdpdGhpblxuLy8gZXh0ZW5zaW9ucyAod2hpY2ggaW1wbGVtZW50ZXJzIGNhbiB1c2UgYXMgdGhleSBzZWUgZml0KS5cbmV4cG9ydCB2YXIgUFJPVE9DT0xfRVJST1JTX1NZTUJPTCA9IFN5bWJvbCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGdyYXBoUUxSZXN1bHRIYXNQcm90b2NvbEVycm9ycyhyZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0LmV4dGVuc2lvbnMpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocmVzdWx0LmV4dGVuc2lvbnNbUFJPVE9DT0xfRVJST1JTX1NZTUJPTF0pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBcG9sbG9FcnJvcihlcnIpIHtcbiAgICByZXR1cm4gZXJyLmhhc093blByb3BlcnR5KFwiZ3JhcGhRTEVycm9yc1wiKTtcbn1cbi8vIFNldHMgdGhlIGVycm9yIG1lc3NhZ2Ugb24gdGhpcyBlcnJvciBhY2NvcmRpbmcgdG8gdGhlXG4vLyB0aGUgR3JhcGhRTCBhbmQgbmV0d29yayBlcnJvcnMgdGhhdCBhcmUgcHJlc2VudC5cbi8vIElmIHRoZSBlcnJvciBtZXNzYWdlIGhhcyBhbHJlYWR5IGJlZW4gc2V0IHRocm91Z2ggdGhlXG4vLyBjb25zdHJ1Y3RvciBvciBvdGhlcndpc2UsIHRoaXMgZnVuY3Rpb24gaXMgYSBub3AuXG52YXIgZ2VuZXJhdGVFcnJvck1lc3NhZ2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgdmFyIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBlcnIuZ3JhcGhRTEVycm9ycywgdHJ1ZSksIGVyci5jbGllbnRFcnJvcnMsIHRydWUpLCBlcnIucHJvdG9jb2xFcnJvcnMsIHRydWUpO1xuICAgIGlmIChlcnIubmV0d29ya0Vycm9yKVxuICAgICAgICBlcnJvcnMucHVzaChlcnIubmV0d29ya0Vycm9yKTtcbiAgICByZXR1cm4gKGVycm9yc1xuICAgICAgICAvLyBUaGUgcmVzdCBvZiB0aGUgY29kZSBzb21ldGltZXMgdW5zYWZlbHkgdHlwZXMgbm9uLUVycm9yIG9iamVjdHMgYXMgR3JhcGhRTEVycm9yc1xuICAgICAgICAubWFwKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIChpc05vbk51bGxPYmplY3QoZXJyKSAmJiBlcnIubWVzc2FnZSkgfHwgXCJFcnJvciBtZXNzYWdlIG5vdCBmb3VuZC5cIjtcbiAgICB9KVxuICAgICAgICAuam9pbihcIlxcblwiKSk7XG59O1xudmFyIEFwb2xsb0Vycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBcG9sbG9FcnJvciwgX3N1cGVyKTtcbiAgICAvLyBDb25zdHJ1Y3RzIGFuIGluc3RhbmNlIG9mIEFwb2xsb0Vycm9yIGdpdmVuIHNlcmlhbGl6ZWQgR3JhcGhRTCBlcnJvcnMsXG4gICAgLy8gY2xpZW50IGVycm9ycywgcHJvdG9jb2wgZXJyb3JzIG9yIG5ldHdvcmsgZXJyb3JzLlxuICAgIC8vIE5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgaGFzIHRvIGJlIGEgdmFsaWRcbiAgICAvLyB2YWx1ZSBvciB0aGUgY29uc3RydWN0ZWQgZXJyb3Igd2lsbCBiZSBtZWFuaW5nbGVzcy5cbiAgICBmdW5jdGlvbiBBcG9sbG9FcnJvcihfYSkge1xuICAgICAgICB2YXIgZ3JhcGhRTEVycm9ycyA9IF9hLmdyYXBoUUxFcnJvcnMsIHByb3RvY29sRXJyb3JzID0gX2EucHJvdG9jb2xFcnJvcnMsIGNsaWVudEVycm9ycyA9IF9hLmNsaWVudEVycm9ycywgbmV0d29ya0Vycm9yID0gX2EubmV0d29ya0Vycm9yLCBlcnJvck1lc3NhZ2UgPSBfYS5lcnJvck1lc3NhZ2UsIGV4dHJhSW5mbyA9IF9hLmV4dHJhSW5mbztcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3JNZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5uYW1lID0gXCJBcG9sbG9FcnJvclwiO1xuICAgICAgICBfdGhpcy5ncmFwaFFMRXJyb3JzID0gZ3JhcGhRTEVycm9ycyB8fCBbXTtcbiAgICAgICAgX3RoaXMucHJvdG9jb2xFcnJvcnMgPSBwcm90b2NvbEVycm9ycyB8fCBbXTtcbiAgICAgICAgX3RoaXMuY2xpZW50RXJyb3JzID0gY2xpZW50RXJyb3JzIHx8IFtdO1xuICAgICAgICBfdGhpcy5uZXR3b3JrRXJyb3IgPSBuZXR3b3JrRXJyb3IgfHwgbnVsbDtcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IGVycm9yTWVzc2FnZSB8fCBnZW5lcmF0ZUVycm9yTWVzc2FnZShfdGhpcyk7XG4gICAgICAgIF90aGlzLmV4dHJhSW5mbyA9IGV4dHJhSW5mbztcbiAgICAgICAgX3RoaXMuY2F1c2UgPVxuICAgICAgICAgICAgX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW1xuICAgICAgICAgICAgICAgIG5ldHdvcmtFcnJvclxuICAgICAgICAgICAgXSwgKGdyYXBoUUxFcnJvcnMgfHwgW10pLCB0cnVlKSwgKHByb3RvY29sRXJyb3JzIHx8IFtdKSwgdHJ1ZSksIChjbGllbnRFcnJvcnMgfHwgW10pLCB0cnVlKS5maW5kKGZ1bmN0aW9uIChlKSB7IHJldHVybiAhIWU7IH0pIHx8IG51bGw7XG4gICAgICAgIC8vIFdlJ3JlIG5vdCB1c2luZyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBoZXJlIGFzIGl0IGlzbid0IGZ1bGx5XG4gICAgICAgIC8vIHN1cHBvcnRlZCBvbiBBbmRyb2lkIChzZWUgaXNzdWUgIzMyMzYpLlxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSBBcG9sbG9FcnJvci5wcm90b3R5cGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEFwb2xsb0Vycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgQXBvbGxvRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJfX3NwcmVhZEFycmF5IiwiaXNOb25OdWxsT2JqZWN0IiwiUFJPVE9DT0xfRVJST1JTX1NZTUJPTCIsIlN5bWJvbCIsImdyYXBoUUxSZXN1bHRIYXNQcm90b2NvbEVycm9ycyIsInJlc3VsdCIsImV4dGVuc2lvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJpc0Fwb2xsb0Vycm9yIiwiZXJyIiwiaGFzT3duUHJvcGVydHkiLCJnZW5lcmF0ZUVycm9yTWVzc2FnZSIsImVycm9ycyIsImdyYXBoUUxFcnJvcnMiLCJjbGllbnRFcnJvcnMiLCJwcm90b2NvbEVycm9ycyIsIm5ldHdvcmtFcnJvciIsInB1c2giLCJtYXAiLCJtZXNzYWdlIiwiam9pbiIsIkFwb2xsb0Vycm9yIiwiX3N1cGVyIiwiX2EiLCJlcnJvck1lc3NhZ2UiLCJleHRyYUluZm8iLCJfdGhpcyIsImNhbGwiLCJuYW1lIiwiY2F1c2UiLCJmaW5kIiwiZSIsIl9fcHJvdG9fXyIsInByb3RvdHlwZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/errors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@apollo/client/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloCache: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloCache),\n/* harmony export */   ApolloClient: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloClient),\n/* harmony export */   ApolloConsumer: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.ApolloConsumer),\n/* harmony export */   ApolloError: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloError),\n/* harmony export */   ApolloLink: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink),\n/* harmony export */   ApolloProvider: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.ApolloProvider),\n/* harmony export */   Cache: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.Cache),\n/* harmony export */   DocumentTransform: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.DocumentTransform),\n/* harmony export */   DocumentType: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.DocumentType),\n/* harmony export */   HttpLink: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.HttpLink),\n/* harmony export */   InMemoryCache: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.InMemoryCache),\n/* harmony export */   MissingFieldError: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.MissingFieldError),\n/* harmony export */   NetworkStatus: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.NetworkStatus),\n/* harmony export */   Observable: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.Observable),\n/* harmony export */   ObservableQuery: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.ObservableQuery),\n/* harmony export */   checkFetcher: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.checkFetcher),\n/* harmony export */   concat: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.concat),\n/* harmony export */   createHttpLink: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.createHttpLink),\n/* harmony export */   createQueryPreloader: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.createQueryPreloader),\n/* harmony export */   createSignalIfSupported: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.createSignalIfSupported),\n/* harmony export */   defaultDataIdFromObject: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.defaultDataIdFromObject),\n/* harmony export */   defaultPrinter: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.defaultPrinter),\n/* harmony export */   disableExperimentalFragmentVariables: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.disableExperimentalFragmentVariables),\n/* harmony export */   disableFragmentWarnings: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.disableFragmentWarnings),\n/* harmony export */   empty: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.empty),\n/* harmony export */   enableExperimentalFragmentVariables: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.enableExperimentalFragmentVariables),\n/* harmony export */   execute: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.execute),\n/* harmony export */   fallbackHttpConfig: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.fallbackHttpConfig),\n/* harmony export */   from: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.from),\n/* harmony export */   fromError: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.fromError),\n/* harmony export */   fromPromise: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.fromPromise),\n/* harmony export */   getApolloContext: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.getApolloContext),\n/* harmony export */   gql: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.gql),\n/* harmony export */   isApolloError: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.isApolloError),\n/* harmony export */   isNetworkRequestSettled: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.isNetworkRequestSettled),\n/* harmony export */   isReference: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.isReference),\n/* harmony export */   makeReference: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.makeReference),\n/* harmony export */   makeVar: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.makeVar),\n/* harmony export */   mergeOptions: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.mergeOptions),\n/* harmony export */   operationName: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.operationName),\n/* harmony export */   parseAndCheckHttpResponse: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.parseAndCheckHttpResponse),\n/* harmony export */   parser: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.parser),\n/* harmony export */   resetApolloContext: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.resetApolloContext),\n/* harmony export */   resetCaches: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.resetCaches),\n/* harmony export */   rewriteURIForGET: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.rewriteURIForGET),\n/* harmony export */   selectHttpOptionsAndBody: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.selectHttpOptionsAndBody),\n/* harmony export */   selectHttpOptionsAndBodyInternal: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.selectHttpOptionsAndBodyInternal),\n/* harmony export */   selectURI: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.selectURI),\n/* harmony export */   serializeFetchParameter: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter),\n/* harmony export */   setLogVerbosity: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.setLogVerbosity),\n/* harmony export */   skipToken: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.skipToken),\n/* harmony export */   split: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.split),\n/* harmony export */   throwServerError: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.throwServerError),\n/* harmony export */   toPromise: () => (/* reexport safe */ _core_index_js__WEBPACK_IMPORTED_MODULE_0__.toPromise),\n/* harmony export */   useApolloClient: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useApolloClient),\n/* harmony export */   useBackgroundQuery: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useBackgroundQuery),\n/* harmony export */   useFragment: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useFragment),\n/* harmony export */   useLazyQuery: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useLazyQuery),\n/* harmony export */   useLoadableQuery: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useLoadableQuery),\n/* harmony export */   useMutation: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useMutation),\n/* harmony export */   useQuery: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useQuery),\n/* harmony export */   useQueryRefHandlers: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useQueryRefHandlers),\n/* harmony export */   useReactiveVar: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useReactiveVar),\n/* harmony export */   useReadQuery: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useReadQuery),\n/* harmony export */   useSubscription: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useSubscription),\n/* harmony export */   useSuspenseQuery: () => (/* reexport safe */ _react_index_js__WEBPACK_IMPORTED_MODULE_1__.useSuspenseQuery)\n/* harmony export */ });\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/index.js */ \"(ssr)/./node_modules/@apollo/client/core/index.js\");\n/* harmony import */ var _react_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./react/index.js */ \"(ssr)/./node_modules/@apollo/client/react/index.js\");\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBZ0M7QUFDQyxDQUNqQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvaW5kZXguanM/YzQ3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jb3JlL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZWFjdC9pbmRleC5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/ApolloLink.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloLink: () => (/* binding */ ApolloLink)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js\");\n\n\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar ApolloLink = /** @class */ function() {\n    function ApolloLink(request) {\n        if (request) this.request = request;\n    }\n    ApolloLink.empty = function() {\n        return new ApolloLink(function() {\n            return _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n        });\n    };\n    ApolloLink.from = function(links) {\n        if (links.length === 0) return ApolloLink.empty();\n        return links.map(toLink).reduce(function(x, y) {\n            return x.concat(y);\n        });\n    };\n    ApolloLink.split = function(test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        var ret;\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            ret = new ApolloLink(function(operation) {\n                return test(operation) ? leftLink.request(operation) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of() : rightLink.request(operation) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        } else {\n            ret = new ApolloLink(function(operation, forward) {\n                return test(operation) ? leftLink.request(operation, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of() : rightLink.request(operation, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        }\n        return Object.assign(ret, {\n            left: leftLink,\n            right: rightLink\n        });\n    };\n    ApolloLink.execute = function(link, operation) {\n        return link.request((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.createOperation)(operation.context, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.transformOperation)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.validateOperation)(operation)))) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n    };\n    ApolloLink.concat = function(first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(36, firstLink);\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        var ret;\n        if (isTerminating(nextLink)) {\n            ret = new ApolloLink(function(operation) {\n                return firstLink.request(operation, function(op) {\n                    return nextLink.request(op) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n                }) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        } else {\n            ret = new ApolloLink(function(operation, forward) {\n                return firstLink.request(operation, function(op) {\n                    return nextLink.request(op, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n                }) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        }\n        return Object.assign(ret, {\n            left: firstLink,\n            right: nextLink\n        });\n    };\n    ApolloLink.prototype.split = function(test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function(next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function(operation, forward) {\n        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(37);\n    };\n    ApolloLink.prototype.onError = function(error, observer) {\n        if (observer && observer.error) {\n            observer.error(error);\n            // Returning false indicates that observer.error does not need to be\n            // called again, since it was already called (on the previous line).\n            // Calling observer.error again would not cause any real problems,\n            // since only the first call matters, but custom onError functions\n            // might have other reasons for wanting to prevent the default\n            // behavior by returning false.\n            return false;\n        }\n        // Throw errors will be passed to observer.error.\n        throw error;\n    };\n    ApolloLink.prototype.setOnError = function(fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}();\n //# sourceMappingURL=ApolloLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/concat.js":
/*!*********************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/concat.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: () => (/* binding */ concat)\n/* harmony export */ });\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloLink.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n\nvar concat = _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.concat; //# sourceMappingURL=concat.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2NvbmNhdC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2QztBQUN0QyxJQUFJQyxTQUFTRCxzREFBVUEsQ0FBQ0MsTUFBTSxDQUFDLENBQ3RDLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2NvcmUvY29uY2F0LmpzPzJiN2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBvbGxvTGluayB9IGZyb20gXCIuL0Fwb2xsb0xpbmsuanNcIjtcbmV4cG9ydCB2YXIgY29uY2F0ID0gQXBvbGxvTGluay5jb25jYXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXQuanMubWFwIl0sIm5hbWVzIjpbIkFwb2xsb0xpbmsiLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/concat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/empty.js":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/empty.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   empty: () => (/* binding */ empty)\n/* harmony export */ });\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloLink.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n\nvar empty = _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.empty; //# sourceMappingURL=empty.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2VtcHR5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZDO0FBQ3RDLElBQUlDLFFBQVFELHNEQUFVQSxDQUFDQyxLQUFLLENBQUMsQ0FDcEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvY29yZS9lbXB0eS5qcz9lMzk3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwb2xsb0xpbmsgfSBmcm9tIFwiLi9BcG9sbG9MaW5rLmpzXCI7XG5leHBvcnQgdmFyIGVtcHR5ID0gQXBvbGxvTGluay5lbXB0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtcHR5LmpzLm1hcCJdLCJuYW1lcyI6WyJBcG9sbG9MaW5rIiwiZW1wdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/empty.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/execute.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/execute.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   execute: () => (/* binding */ execute)\n/* harmony export */ });\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloLink.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n\nvar execute = _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.execute; //# sourceMappingURL=execute.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2V4ZWN1dGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkM7QUFDdEMsSUFBSUMsVUFBVUQsc0RBQVVBLENBQUNDLE9BQU8sQ0FBQyxDQUN4QyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2V4ZWN1dGUuanM/MjM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIi4vQXBvbGxvTGluay5qc1wiO1xuZXhwb3J0IHZhciBleGVjdXRlID0gQXBvbGxvTGluay5leGVjdXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZS5qcy5tYXAiXSwibmFtZXMiOlsiQXBvbGxvTGluayIsImV4ZWN1dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/execute.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/from.js":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/from.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   from: () => (/* binding */ from)\n/* harmony export */ });\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloLink.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n\nvar from = _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.from; //# sourceMappingURL=from.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2Zyb20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkM7QUFDdEMsSUFBSUMsT0FBT0Qsc0RBQVVBLENBQUNDLElBQUksQ0FBQyxDQUNsQyxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2Zyb20uanM/MzU2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIi4vQXBvbGxvTGluay5qc1wiO1xuZXhwb3J0IHZhciBmcm9tID0gQXBvbGxvTGluay5mcm9tO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXAiXSwibmFtZXMiOlsiQXBvbGxvTGluayIsImZyb20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/from.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloLink: () => (/* reexport safe */ _ApolloLink_js__WEBPACK_IMPORTED_MODULE_6__.ApolloLink),\n/* harmony export */   concat: () => (/* reexport safe */ _concat_js__WEBPACK_IMPORTED_MODULE_4__.concat),\n/* harmony export */   empty: () => (/* reexport safe */ _empty_js__WEBPACK_IMPORTED_MODULE_1__.empty),\n/* harmony export */   execute: () => (/* reexport safe */ _execute_js__WEBPACK_IMPORTED_MODULE_5__.execute),\n/* harmony export */   from: () => (/* reexport safe */ _from_js__WEBPACK_IMPORTED_MODULE_2__.from),\n/* harmony export */   split: () => (/* reexport safe */ _split_js__WEBPACK_IMPORTED_MODULE_3__.split)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _empty_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./empty.js */ \"(ssr)/./node_modules/@apollo/client/link/core/empty.js\");\n/* harmony import */ var _from_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./from.js */ \"(ssr)/./node_modules/@apollo/client/link/core/from.js\");\n/* harmony import */ var _split_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./split.js */ \"(ssr)/./node_modules/@apollo/client/link/core/split.js\");\n/* harmony import */ var _concat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./concat.js */ \"(ssr)/./node_modules/@apollo/client/link/core/concat.js\");\n/* harmony import */ var _execute_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./execute.js */ \"(ssr)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ApolloLink.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEM7QUFDUDtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBQ007QUFDbEIsQ0FDM0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvY29yZS9pbmRleC5qcz82OTNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBlbXB0eSB9IGZyb20gXCIuL2VtcHR5LmpzXCI7XG5leHBvcnQgeyBmcm9tIH0gZnJvbSBcIi4vZnJvbS5qc1wiO1xuZXhwb3J0IHsgc3BsaXQgfSBmcm9tIFwiLi9zcGxpdC5qc1wiO1xuZXhwb3J0IHsgY29uY2F0IH0gZnJvbSBcIi4vY29uY2F0LmpzXCI7XG5leHBvcnQgeyBleGVjdXRlIH0gZnJvbSBcIi4vZXhlY3V0ZS5qc1wiO1xuZXhwb3J0IHsgQXBvbGxvTGluayB9IGZyb20gXCIuL0Fwb2xsb0xpbmsuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiZW1wdHkiLCJmcm9tIiwic3BsaXQiLCJjb25jYXQiLCJleGVjdXRlIiwiQXBvbGxvTGluayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/split.js":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/split.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   split: () => (/* binding */ split)\n/* harmony export */ });\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloLink.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n\nvar split = _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.split; //# sourceMappingURL=split.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL3NwbGl0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZDO0FBQ3RDLElBQUlDLFFBQVFELHNEQUFVQSxDQUFDQyxLQUFLLENBQUMsQ0FDcEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvY29yZS9zcGxpdC5qcz8yOTgxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwb2xsb0xpbmsgfSBmcm9tIFwiLi9BcG9sbG9MaW5rLmpzXCI7XG5leHBvcnQgdmFyIHNwbGl0ID0gQXBvbGxvTGluay5zcGxpdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwbGl0LmpzLm1hcCJdLCJuYW1lcyI6WyJBcG9sbG9MaW5rIiwic3BsaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/split.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/HttpLink.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpLink: () => (/* binding */ HttpLink)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _createHttpLink_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createHttpLink.js */ \"(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js\");\n\n\n\nvar HttpLink = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HttpLink, _super);\n    function HttpLink(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this = _super.call(this, (0,_createHttpLink_js__WEBPACK_IMPORTED_MODULE_1__.createHttpLink)(options).request) || this;\n        _this.options = options;\n        return _this;\n    }\n    return HttpLink;\n}(_core_index_js__WEBPACK_IMPORTED_MODULE_2__.ApolloLink);\n //# sourceMappingURL=HttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL0h0dHBMaW5rLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0M7QUFDWTtBQUNPO0FBQ3JELElBQUlHLFdBQVcsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDMUNKLGdEQUFTQSxDQUFDRyxVQUFVQztJQUNwQixTQUFTRCxTQUFTRSxPQUFPO1FBQ3JCLElBQUlBLFlBQVksS0FBSyxHQUFHO1lBQUVBLFVBQVUsQ0FBQztRQUFHO1FBQ3hDLElBQUlDLFFBQVFGLE9BQU9HLElBQUksQ0FBQyxJQUFJLEVBQUVMLGtFQUFjQSxDQUFDRyxTQUFTRyxPQUFPLEtBQUssSUFBSTtRQUN0RUYsTUFBTUQsT0FBTyxHQUFHQTtRQUNoQixPQUFPQztJQUNYO0lBQ0EsT0FBT0g7QUFDWCxFQUFFRixzREFBVUE7QUFDUSxDQUNwQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL0h0dHBMaW5rLmpzP2VjNDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXguanNcIjtcbmltcG9ydCB7IGNyZWF0ZUh0dHBMaW5rIH0gZnJvbSBcIi4vY3JlYXRlSHR0cExpbmsuanNcIjtcbnZhciBIdHRwTGluayA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSHR0cExpbmssIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSHR0cExpbmsob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjcmVhdGVIdHRwTGluayhvcHRpb25zKS5yZXF1ZXN0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSHR0cExpbms7XG59KEFwb2xsb0xpbmspKTtcbmV4cG9ydCB7IEh0dHBMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdHRwTGluay5qcy5tYXAiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiQXBvbGxvTGluayIsImNyZWF0ZUh0dHBMaW5rIiwiSHR0cExpbmsiLCJfc3VwZXIiLCJvcHRpb25zIiwiX3RoaXMiLCJjYWxsIiwicmVxdWVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/checkFetcher.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFetcher: () => (/* binding */ checkFetcher)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar checkFetcher = function(fetcher) {\n    if (!fetcher && typeof fetch === \"undefined\") {\n        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(38);\n    }\n}; //# sourceMappingURL=checkFetcher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2NoZWNrRmV0Y2hlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUM5RCxJQUFJQyxlQUFlLFNBQVVDLE9BQU87SUFDdkMsSUFBSSxDQUFDQSxXQUFXLE9BQU9DLFVBQVUsYUFBYTtRQUMxQyxNQUFNSCw4RUFBaUJBLENBQUM7SUFDNUI7QUFDSixFQUFFLENBQ0Ysd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9jaGVja0ZldGNoZXIuanM/NDBjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJbnZhcmlhbnRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IHZhciBjaGVja0ZldGNoZXIgPSBmdW5jdGlvbiAoZmV0Y2hlcikge1xuICAgIGlmICghZmV0Y2hlciAmJiB0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3SW52YXJpYW50RXJyb3IoMzgpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja0ZldGNoZXIuanMubWFwIl0sIm5hbWVzIjpbIm5ld0ludmFyaWFudEVycm9yIiwiY2hlY2tGZXRjaGVyIiwiZmV0Y2hlciIsImZldGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/createHttpLink.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpLink: () => (/* binding */ createHttpLink)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n/* harmony import */ var _selectURI_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./selectURI.js */ \"(ssr)/./node_modules/@apollo/client/link/http/selectURI.js\");\n/* harmony import */ var _parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parseAndCheckHttpResponse.js */ \"(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\");\n/* harmony import */ var _checkFetcher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./checkFetcher.js */ \"(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js\");\n/* harmony import */ var _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectHttpOptionsAndBody.js */ \"(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\");\n/* harmony import */ var _rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./rewriteURIForGET.js */ \"(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/fromError.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar backupFetch = (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return fetch;\n});\nvar createHttpLink = function(linkOptions) {\n    if (linkOptions === void 0) {\n        linkOptions = {};\n    }\n    var _a = linkOptions.uri, uri = _a === void 0 ? \"/graphql\" : _a, // use default global fetch if nothing passed in\n    preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(linkOptions, [\n        \"uri\",\n        \"fetch\",\n        \"print\",\n        \"includeExtensions\",\n        \"preserveHeaderCase\",\n        \"useGETForQueries\",\n        \"includeUnusedVariables\"\n    ]);\n    if (globalThis.__DEV__ !== false) {\n        // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n        // defined, so requests won't fail at runtime.\n        (0,_checkFetcher_js__WEBPACK_IMPORTED_MODULE_3__.checkFetcher)(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: {\n            includeExtensions: includeExtensions,\n            preserveHeaderCase: preserveHeaderCase\n        },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers\n    };\n    return new _core_index_js__WEBPACK_IMPORTED_MODULE_4__.ApolloLink(function(operation) {\n        var chosenURI = (0,_selectURI_js__WEBPACK_IMPORTED_MODULE_5__.selectURI)(operation, uri);\n        var context = operation.getContext();\n        // `apollographql-client-*` headers are automatically set if a\n        // `clientAwareness` object is found in the context. These headers are\n        // set first, followed by the rest of the headers pulled from\n        // `context.headers`. If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n            }\n        }\n        var contextHeaders = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders\n        };\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.hasDirectives)([\n            \"client\"\n        ], operation.query)) {\n            var transformedQuery = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.removeClientSetsFromDocument)(operation.query);\n            if (!transformedQuery) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n            }\n            operation.query = transformedQuery;\n        }\n        //uses fallback, link, and then context to build options\n        var _b = (0,_selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.selectHttpOptionsAndBodyInternal)(operation, print, _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            body.variables = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.filterOperationVariables)(body.variables, operation.query);\n        }\n        var controller;\n        if (!options.signal && typeof AbortController !== \"undefined\") {\n            controller = new AbortController();\n            options.signal = controller.signal;\n        }\n        // If requested, set method to GET if there are no mutations.\n        var definitionIsMutation = function(d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n        };\n        var definitionIsSubscription = function(d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n        };\n        var isSubscription = definitionIsSubscription((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(operation.query));\n        // does not match custom directives beginning with @defer\n        var hasDefer = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.hasDirectives)([\n            \"defer\"\n        ], operation.query);\n        if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = \"GET\";\n        }\n        if (hasDefer || isSubscription) {\n            options.headers = options.headers || {};\n            var acceptHeader = \"multipart/mixed;\";\n            // Omit defer-specific headers if the user attempts to defer a selection\n            // set on a subscription and log a warning.\n            if (isSubscription && hasDefer) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(39);\n            }\n            if (isSubscription) {\n                acceptHeader += \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n            } else if (hasDefer) {\n                acceptHeader += \"deferSpec=20220824,application/json\";\n            }\n            options.headers.accept = acceptHeader;\n        }\n        if (options.method === \"GET\") {\n            var _c = (0,_rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_11__.rewriteURIForGET)(chosenURI, body), newURI = _c.newURI, parseError = _c.parseError;\n            if (parseError) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(parseError);\n            }\n            chosenURI = newURI;\n        } else {\n            try {\n                options.body = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_12__.serializeFetchParameter)(body, \"Payload\");\n            } catch (parseError) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(parseError);\n            }\n        }\n        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.Observable(function(observer) {\n            // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n            // fall back to the *current* global window.fetch function (see issue\n            // #7832), or (if all else fails) the backupFetch function we saved when\n            // this module was first evaluated. This last option protects against the\n            // removal of window.fetch, which is unlikely but not impossible.\n            var currentFetch = preferredFetch || (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n                return fetch;\n            }) || backupFetch;\n            var observerNext = observer.next.bind(observer);\n            currentFetch(chosenURI, options).then(function(response) {\n                var _a;\n                operation.setContext({\n                    response: response\n                });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.readMultipartBody)(response, observerNext);\n                } else {\n                    return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.parseAndCheckHttpResponse)(operation)(response).then(observerNext);\n                }\n            }).then(function() {\n                controller = undefined;\n                observer.complete();\n            }).catch(function(err) {\n                controller = undefined;\n                (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.handleError)(err, observer);\n            });\n            return function() {\n                // XXX support canceling this request\n                // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                if (controller) controller.abort();\n            };\n        });\n    });\n}; //# sourceMappingURL=createHttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/createSignalIfSupported.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/createSignalIfSupported.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSignalIfSupported: () => (/* binding */ createSignalIfSupported)\n/* harmony export */ });\n/**\n * @deprecated\n * This is not used internally any more and will be removed in\n * the next major version of Apollo Client.\n */ var createSignalIfSupported = function() {\n    if (typeof AbortController === \"undefined\") return {\n        controller: false,\n        signal: false\n    };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return {\n        controller: controller,\n        signal: signal\n    };\n}; //# sourceMappingURL=createSignalIfSupported.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2NyZWF0ZVNpZ25hbElmU3VwcG9ydGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlDLEdBQ00sSUFBSUEsMEJBQTBCO0lBQ2pDLElBQUksT0FBT0Msb0JBQW9CLGFBQzNCLE9BQU87UUFBRUMsWUFBWTtRQUFPQyxRQUFRO0lBQU07SUFDOUMsSUFBSUQsYUFBYSxJQUFJRDtJQUNyQixJQUFJRSxTQUFTRCxXQUFXQyxNQUFNO0lBQzlCLE9BQU87UUFBRUQsWUFBWUE7UUFBWUMsUUFBUUE7SUFBTztBQUNwRCxFQUFFLENBQ0YsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9jcmVhdGVTaWduYWxJZlN1cHBvcnRlZC5qcz8zMzc5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqIFRoaXMgaXMgbm90IHVzZWQgaW50ZXJuYWxseSBhbnkgbW9yZSBhbmQgd2lsbCBiZSByZW1vdmVkIGluXG4gKiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIEFwb2xsbyBDbGllbnQuXG4gKi9cbmV4cG9ydCB2YXIgY3JlYXRlU2lnbmFsSWZTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB7IGNvbnRyb2xsZXI6IGZhbHNlLCBzaWduYWw6IGZhbHNlIH07XG4gICAgdmFyIGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgdmFyIHNpZ25hbCA9IGNvbnRyb2xsZXIuc2lnbmFsO1xuICAgIHJldHVybiB7IGNvbnRyb2xsZXI6IGNvbnRyb2xsZXIsIHNpZ25hbDogc2lnbmFsIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlU2lnbmFsSWZTdXBwb3J0ZWQuanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZVNpZ25hbElmU3VwcG9ydGVkIiwiQWJvcnRDb250cm9sbGVyIiwiY29udHJvbGxlciIsInNpZ25hbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/createSignalIfSupported.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpLink: () => (/* reexport safe */ _HttpLink_js__WEBPACK_IMPORTED_MODULE_8__.HttpLink),\n/* harmony export */   checkFetcher: () => (/* reexport safe */ _checkFetcher_js__WEBPACK_IMPORTED_MODULE_4__.checkFetcher),\n/* harmony export */   createHttpLink: () => (/* reexport safe */ _createHttpLink_js__WEBPACK_IMPORTED_MODULE_7__.createHttpLink),\n/* harmony export */   createSignalIfSupported: () => (/* reexport safe */ _createSignalIfSupported_js__WEBPACK_IMPORTED_MODULE_5__.createSignalIfSupported),\n/* harmony export */   defaultPrinter: () => (/* reexport safe */ _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_3__.defaultPrinter),\n/* harmony export */   fallbackHttpConfig: () => (/* reexport safe */ _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_3__.fallbackHttpConfig),\n/* harmony export */   parseAndCheckHttpResponse: () => (/* reexport safe */ _parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_1__.parseAndCheckHttpResponse),\n/* harmony export */   rewriteURIForGET: () => (/* reexport safe */ _rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_9__.rewriteURIForGET),\n/* harmony export */   selectHttpOptionsAndBody: () => (/* reexport safe */ _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_3__.selectHttpOptionsAndBody),\n/* harmony export */   selectHttpOptionsAndBodyInternal: () => (/* reexport safe */ _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_3__.selectHttpOptionsAndBodyInternal),\n/* harmony export */   selectURI: () => (/* reexport safe */ _selectURI_js__WEBPACK_IMPORTED_MODULE_6__.selectURI),\n/* harmony export */   serializeFetchParameter: () => (/* reexport safe */ _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_2__.serializeFetchParameter)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parseAndCheckHttpResponse.js */ \"(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\");\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n/* harmony import */ var _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selectHttpOptionsAndBody.js */ \"(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\");\n/* harmony import */ var _checkFetcher_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./checkFetcher.js */ \"(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js\");\n/* harmony import */ var _createSignalIfSupported_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./createSignalIfSupported.js */ \"(ssr)/./node_modules/@apollo/client/link/http/createSignalIfSupported.js\");\n/* harmony import */ var _selectURI_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./selectURI.js */ \"(ssr)/./node_modules/@apollo/client/link/http/selectURI.js\");\n/* harmony import */ var _createHttpLink_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./createHttpLink.js */ \"(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js\");\n/* harmony import */ var _HttpLink_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./HttpLink.js */ \"(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js\");\n/* harmony import */ var _rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./rewriteURIForGET.js */ \"(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\");\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEM7QUFDaUM7QUFDSjtBQUUvQjtBQUNTO0FBQ3NCO0FBQzVCO0FBQ1U7QUFDWjtBQUNnQixDQUN6RCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2luZGV4LmpzPzg0MzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmV4cG9ydCB7IHBhcnNlQW5kQ2hlY2tIdHRwUmVzcG9uc2UgfSBmcm9tIFwiLi9wYXJzZUFuZENoZWNrSHR0cFJlc3BvbnNlLmpzXCI7XG5leHBvcnQgeyBzZXJpYWxpemVGZXRjaFBhcmFtZXRlciB9IGZyb20gXCIuL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzXCI7XG5leHBvcnQgeyBmYWxsYmFja0h0dHBDb25maWcsIGRlZmF1bHRQcmludGVyLCBzZWxlY3RIdHRwT3B0aW9uc0FuZEJvZHksIHNlbGVjdEh0dHBPcHRpb25zQW5kQm9keUludGVybmFsLCAvLyBuZWVkZWQgYnkgLi4vYmF0Y2gtaHR0cCBidXQgbm90IHB1YmxpY1xuIH0gZnJvbSBcIi4vc2VsZWN0SHR0cE9wdGlvbnNBbmRCb2R5LmpzXCI7XG5leHBvcnQgeyBjaGVja0ZldGNoZXIgfSBmcm9tIFwiLi9jaGVja0ZldGNoZXIuanNcIjtcbmV4cG9ydCB7IGNyZWF0ZVNpZ25hbElmU3VwcG9ydGVkIH0gZnJvbSBcIi4vY3JlYXRlU2lnbmFsSWZTdXBwb3J0ZWQuanNcIjtcbmV4cG9ydCB7IHNlbGVjdFVSSSB9IGZyb20gXCIuL3NlbGVjdFVSSS5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlSHR0cExpbmsgfSBmcm9tIFwiLi9jcmVhdGVIdHRwTGluay5qc1wiO1xuZXhwb3J0IHsgSHR0cExpbmsgfSBmcm9tIFwiLi9IdHRwTGluay5qc1wiO1xuZXhwb3J0IHsgcmV3cml0ZVVSSUZvckdFVCB9IGZyb20gXCIuL3Jld3JpdGVVUklGb3JHRVQuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJwYXJzZUFuZENoZWNrSHR0cFJlc3BvbnNlIiwic2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIiLCJmYWxsYmFja0h0dHBDb25maWciLCJkZWZhdWx0UHJpbnRlciIsInNlbGVjdEh0dHBPcHRpb25zQW5kQm9keSIsInNlbGVjdEh0dHBPcHRpb25zQW5kQm9keUludGVybmFsIiwiY2hlY2tGZXRjaGVyIiwiY3JlYXRlU2lnbmFsSWZTdXBwb3J0ZWQiLCJzZWxlY3RVUkkiLCJjcmVhdGVIdHRwTGluayIsIkh0dHBMaW5rIiwicmV3cml0ZVVSSUZvckdFVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js":
/*!******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/async.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ asyncIterator)\n/* harmony export */ });\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/async.ts\n */ function asyncIterator(source) {\n    var _a;\n    var iterator = source[Symbol.asyncIterator]();\n    return _a = {\n        next: function() {\n            return iterator.next();\n        }\n    }, _a[Symbol.asyncIterator] = function() {\n        return this;\n    }, _a;\n} //# sourceMappingURL=async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9hc3luYy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ2MsU0FBU0EsY0FBY0MsTUFBTTtJQUN4QyxJQUFJQztJQUNKLElBQUlDLFdBQVdGLE1BQU0sQ0FBQ0csT0FBT0osYUFBYSxDQUFDO0lBQzNDLE9BQU9FLEtBQUs7UUFDSkcsTUFBTTtZQUNGLE9BQU9GLFNBQVNFLElBQUk7UUFDeEI7SUFDSixHQUNBSCxFQUFFLENBQUNFLE9BQU9KLGFBQWEsQ0FBQyxHQUFHO1FBQ3ZCLE9BQU8sSUFBSTtJQUNmLEdBQ0FFO0FBQ1IsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9hc3luYy5qcz84MzZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT3JpZ2luYWwgc291cmNlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ttYWxha29mZi9yZXNwb25zZS1pdGVyYXRvci9ibG9iL21hc3Rlci9zcmMvaXRlcmF0b3JzL2FzeW5jLnRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzeW5jSXRlcmF0b3Ioc291cmNlKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBpdGVyYXRvciA9IHNvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICByZXR1cm4gX2EgPSB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2FbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIF9hO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIl0sIm5hbWVzIjpbImFzeW5jSXRlcmF0b3IiLCJzb3VyY2UiLCJfYSIsIml0ZXJhdG9yIiwiU3ltYm9sIiwibmV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/nodeStream.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ nodeStreamIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/nodeStream.ts\n */ \nfunction nodeStreamIterator(stream) {\n    var cleanup = null;\n    var error = null;\n    var done = false;\n    var data = [];\n    var waiting = [];\n    function onData(chunk) {\n        if (error) return;\n        if (waiting.length) {\n            var shiftedArr = waiting.shift();\n            if (Array.isArray(shiftedArr) && shiftedArr[0]) {\n                return shiftedArr[0]({\n                    value: chunk,\n                    done: false\n                });\n            }\n        }\n        data.push(chunk);\n    }\n    function onError(err) {\n        error = err;\n        var all = waiting.slice();\n        all.forEach(function(pair) {\n            pair[1](err);\n        });\n        !cleanup || cleanup();\n    }\n    function onEnd() {\n        done = true;\n        var all = waiting.slice();\n        all.forEach(function(pair) {\n            pair[0]({\n                value: undefined,\n                done: true\n            });\n        });\n        !cleanup || cleanup();\n    }\n    cleanup = function() {\n        cleanup = null;\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"error\", onError);\n        stream.removeListener(\"end\", onEnd);\n        stream.removeListener(\"finish\", onEnd);\n        stream.removeListener(\"close\", onEnd);\n    };\n    stream.on(\"data\", onData);\n    stream.on(\"error\", onError);\n    stream.on(\"end\", onEnd);\n    stream.on(\"finish\", onEnd);\n    stream.on(\"close\", onEnd);\n    function getNext() {\n        return new Promise(function(resolve, reject) {\n            if (error) return reject(error);\n            if (data.length) return resolve({\n                value: data.shift(),\n                done: false\n            });\n            if (done) return resolve({\n                value: undefined,\n                done: true\n            });\n            waiting.push([\n                resolve,\n                reject\n            ]);\n        });\n    }\n    var iterator = {\n        next: function() {\n            return getNext();\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=nodeStream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ3VFO0FBQ3pELFNBQVNDLG1CQUFtQkMsTUFBTTtJQUM3QyxJQUFJQyxVQUFVO0lBQ2QsSUFBSUMsUUFBUTtJQUNaLElBQUlDLE9BQU87SUFDWCxJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFJQyxVQUFVLEVBQUU7SUFDaEIsU0FBU0MsT0FBT0MsS0FBSztRQUNqQixJQUFJTCxPQUNBO1FBQ0osSUFBSUcsUUFBUUcsTUFBTSxFQUFFO1lBQ2hCLElBQUlDLGFBQWFKLFFBQVFLLEtBQUs7WUFDOUIsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSCxlQUFlQSxVQUFVLENBQUMsRUFBRSxFQUFFO2dCQUM1QyxPQUFPQSxVQUFVLENBQUMsRUFBRSxDQUFDO29CQUFFSSxPQUFPTjtvQkFBT0osTUFBTTtnQkFBTTtZQUNyRDtRQUNKO1FBQ0FDLEtBQUtVLElBQUksQ0FBQ1A7SUFDZDtJQUNBLFNBQVNRLFFBQVFDLEdBQUc7UUFDaEJkLFFBQVFjO1FBQ1IsSUFBSUMsTUFBTVosUUFBUWEsS0FBSztRQUN2QkQsSUFBSUUsT0FBTyxDQUFDLFNBQVVDLElBQUk7WUFDdEJBLElBQUksQ0FBQyxFQUFFLENBQUNKO1FBQ1o7UUFDQSxDQUFDZixXQUFXQTtJQUNoQjtJQUNBLFNBQVNvQjtRQUNMbEIsT0FBTztRQUNQLElBQUljLE1BQU1aLFFBQVFhLEtBQUs7UUFDdkJELElBQUlFLE9BQU8sQ0FBQyxTQUFVQyxJQUFJO1lBQ3RCQSxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUFFUCxPQUFPUztnQkFBV25CLE1BQU07WUFBSztRQUMzQztRQUNBLENBQUNGLFdBQVdBO0lBQ2hCO0lBQ0FBLFVBQVU7UUFDTkEsVUFBVTtRQUNWRCxPQUFPdUIsY0FBYyxDQUFDLFFBQVFqQjtRQUM5Qk4sT0FBT3VCLGNBQWMsQ0FBQyxTQUFTUjtRQUMvQmYsT0FBT3VCLGNBQWMsQ0FBQyxPQUFPRjtRQUM3QnJCLE9BQU91QixjQUFjLENBQUMsVUFBVUY7UUFDaENyQixPQUFPdUIsY0FBYyxDQUFDLFNBQVNGO0lBQ25DO0lBQ0FyQixPQUFPd0IsRUFBRSxDQUFDLFFBQVFsQjtJQUNsQk4sT0FBT3dCLEVBQUUsQ0FBQyxTQUFTVDtJQUNuQmYsT0FBT3dCLEVBQUUsQ0FBQyxPQUFPSDtJQUNqQnJCLE9BQU93QixFQUFFLENBQUMsVUFBVUg7SUFDcEJyQixPQUFPd0IsRUFBRSxDQUFDLFNBQVNIO0lBQ25CLFNBQVNJO1FBQ0wsT0FBTyxJQUFJQyxRQUFRLFNBQVVDLE9BQU8sRUFBRUMsTUFBTTtZQUN4QyxJQUFJMUIsT0FDQSxPQUFPMEIsT0FBTzFCO1lBQ2xCLElBQUlFLEtBQUtJLE1BQU0sRUFDWCxPQUFPbUIsUUFBUTtnQkFBRWQsT0FBT1QsS0FBS00sS0FBSztnQkFBSVAsTUFBTTtZQUFNO1lBQ3RELElBQUlBLE1BQ0EsT0FBT3dCLFFBQVE7Z0JBQUVkLE9BQU9TO2dCQUFXbkIsTUFBTTtZQUFLO1lBQ2xERSxRQUFRUyxJQUFJLENBQUM7Z0JBQUNhO2dCQUFTQzthQUFPO1FBQ2xDO0lBQ0o7SUFDQSxJQUFJQyxXQUFXO1FBQ1hDLE1BQU07WUFDRixPQUFPTDtRQUNYO0lBQ0o7SUFDQSxJQUFJM0IsMEVBQXlCQSxFQUFFO1FBQzNCK0IsUUFBUSxDQUFDRSxPQUFPQyxhQUFhLENBQUMsR0FBRztZQUM3QixPQUFPLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBT0g7QUFDWCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvaXRlcmF0b3JzL25vZGVTdHJlYW0uanM/MjcyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLnRzXG4gKi9cbmltcG9ydCB7IGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2RlU3RyZWFtSXRlcmF0b3Ioc3RyZWFtKSB7XG4gICAgdmFyIGNsZWFudXAgPSBudWxsO1xuICAgIHZhciBlcnJvciA9IG51bGw7XG4gICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICB2YXIgZGF0YSA9IFtdO1xuICAgIHZhciB3YWl0aW5nID0gW107XG4gICAgZnVuY3Rpb24gb25EYXRhKGNodW5rKSB7XG4gICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHdhaXRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgc2hpZnRlZEFyciA9IHdhaXRpbmcuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNoaWZ0ZWRBcnIpICYmIHNoaWZ0ZWRBcnJbMF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hpZnRlZEFyclswXSh7IHZhbHVlOiBjaHVuaywgZG9uZTogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5wdXNoKGNodW5rKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25FcnJvcihlcnIpIHtcbiAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICAgIHZhciBhbGwgPSB3YWl0aW5nLnNsaWNlKCk7XG4gICAgICAgIGFsbC5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgICAgICBwYWlyWzFdKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICAhY2xlYW51cCB8fCBjbGVhbnVwKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRW5kKCkge1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgdmFyIGFsbCA9IHdhaXRpbmcuc2xpY2UoKTtcbiAgICAgICAgYWxsLmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgICAgIHBhaXJbMF0oeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgIWNsZWFudXAgfHwgY2xlYW51cCgpO1xuICAgIH1cbiAgICBjbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhbnVwID0gbnVsbDtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLCBvbkRhdGEpO1xuICAgICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsIG9uRW5kKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsIG9uRW5kKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25FbmQpO1xuICAgIH07XG4gICAgc3RyZWFtLm9uKFwiZGF0YVwiLCBvbkRhdGEpO1xuICAgIHN0cmVhbS5vbihcImVycm9yXCIsIG9uRXJyb3IpO1xuICAgIHN0cmVhbS5vbihcImVuZFwiLCBvbkVuZCk7XG4gICAgc3RyZWFtLm9uKFwiZmluaXNoXCIsIG9uRW5kKTtcbiAgICBzdHJlYW0ub24oXCJjbG9zZVwiLCBvbkVuZCk7XG4gICAgZnVuY3Rpb24gZ2V0TmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IHZhbHVlOiBkYXRhLnNoaWZ0KCksIGRvbmU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICAgICAgd2FpdGluZy5wdXNoKFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE5leHQoKTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGlmIChjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sKSB7XG4gICAgICAgIGl0ZXJhdG9yW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlcmF0b3I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlU3RyZWFtLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwibm9kZVN0cmVhbUl0ZXJhdG9yIiwic3RyZWFtIiwiY2xlYW51cCIsImVycm9yIiwiZG9uZSIsImRhdGEiLCJ3YWl0aW5nIiwib25EYXRhIiwiY2h1bmsiLCJsZW5ndGgiLCJzaGlmdGVkQXJyIiwic2hpZnQiLCJBcnJheSIsImlzQXJyYXkiLCJ2YWx1ZSIsInB1c2giLCJvbkVycm9yIiwiZXJyIiwiYWxsIiwic2xpY2UiLCJmb3JFYWNoIiwicGFpciIsIm9uRW5kIiwidW5kZWZpbmVkIiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImdldE5leHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIml0ZXJhdG9yIiwibmV4dCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/promise.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ promiseIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */ \nfunction promiseIterator(promise) {\n    var resolved = false;\n    var iterator = {\n        next: function() {\n            if (resolved) return Promise.resolve({\n                value: undefined,\n                done: true\n            });\n            resolved = true;\n            return new Promise(function(resolve, reject) {\n                promise.then(function(value) {\n                    resolve({\n                        value: value,\n                        done: false\n                    });\n                }).catch(reject);\n            });\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=promise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9wcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ3VFO0FBQ3pELFNBQVNDLGdCQUFnQkMsT0FBTztJQUMzQyxJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsV0FBVztRQUNYQyxNQUFNO1lBQ0YsSUFBSUYsVUFDQSxPQUFPRyxRQUFRQyxPQUFPLENBQUM7Z0JBQ25CQyxPQUFPQztnQkFDUEMsTUFBTTtZQUNWO1lBQ0pQLFdBQVc7WUFDWCxPQUFPLElBQUlHLFFBQVEsU0FBVUMsT0FBTyxFQUFFSSxNQUFNO2dCQUN4Q1QsUUFDS1UsSUFBSSxDQUFDLFNBQVVKLEtBQUs7b0JBQ3JCRCxRQUFRO3dCQUFFQyxPQUFPQTt3QkFBT0UsTUFBTTtvQkFBTTtnQkFDeEMsR0FDS0csS0FBSyxDQUFDRjtZQUNmO1FBQ0o7SUFDSjtJQUNBLElBQUlYLDBFQUF5QkEsRUFBRTtRQUMzQkksUUFBUSxDQUFDVSxPQUFPQyxhQUFhLENBQUMsR0FBRztZQUM3QixPQUFPLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBT1g7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvaXRlcmF0b3JzL3Byb21pc2UuanM/MDk3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9wcm9taXNlLnRzXG4gKi9cbmltcG9ydCB7IGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9taXNlSXRlcmF0b3IocHJvbWlzZSkge1xuICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHJlc29sdmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgdmFsdWU6IHZhbHVlLCBkb25lOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wpIHtcbiAgICAgICAgaXRlcmF0b3JbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBpdGVyYXRvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2UuanMubWFwIl0sIm5hbWVzIjpbImNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wiLCJwcm9taXNlSXRlcmF0b3IiLCJwcm9taXNlIiwicmVzb2x2ZWQiLCJpdGVyYXRvciIsIm5leHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInZhbHVlIiwidW5kZWZpbmVkIiwiZG9uZSIsInJlamVjdCIsInRoZW4iLCJjYXRjaCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/reader.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ readerIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/reader.ts\n */ \nfunction readerIterator(reader) {\n    var iterator = {\n        next: function() {\n            return reader.read();\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=reader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9yZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0NBR0MsR0FDdUU7QUFDekQsU0FBU0MsZUFBZUMsTUFBTTtJQUN6QyxJQUFJQyxXQUFXO1FBQ1hDLE1BQU07WUFDRixPQUFPRixPQUFPRyxJQUFJO1FBQ3RCO0lBQ0o7SUFDQSxJQUFJTCwwRUFBeUJBLEVBQUU7UUFDM0JHLFFBQVEsQ0FBQ0csT0FBT0MsYUFBYSxDQUFDLEdBQUc7WUFDN0IsT0FBTyxJQUFJO1FBQ2Y7SUFDSjtJQUNBLE9BQU9KO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9yZWFkZXIuanM/OGUyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9yZWFkZXIudHNcbiAqL1xuaW1wb3J0IHsgY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlYWRlckl0ZXJhdG9yKHJlYWRlcikge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkKCk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBpZiAoY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCkge1xuICAgICAgICBpdGVyYXRvcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZXJhdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwicmVhZGVySXRlcmF0b3IiLCJyZWFkZXIiLCJpdGVyYXRvciIsIm5leHQiLCJyZWFkIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleError: () => (/* binding */ handleError),\n/* harmony export */   parseAndCheckHttpResponse: () => (/* binding */ parseAndCheckHttpResponse),\n/* harmony export */   parseHeaders: () => (/* binding */ parseHeaders),\n/* harmony export */   parseJsonBody: () => (/* binding */ parseJsonBody),\n/* harmony export */   readMultipartBody: () => (/* binding */ readMultipartBody)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _responseIterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./responseIterator.js */ \"(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _utilities_common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/common/incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction readMultipartBody(response, nextValue) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n        var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _a, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n        var _b, _c;\n        var _d;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_e) {\n            switch(_e.label){\n                case 0:\n                    if (TextDecoder === undefined) {\n                        throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n                    }\n                    decoder = new TextDecoder(\"utf-8\");\n                    contentType = (_d = response.headers) === null || _d === void 0 ? void 0 : _d.get(\"content-type\");\n                    delimiter = \"boundary=\";\n                    boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim() : \"-\";\n                    boundary = \"\\r\\n--\".concat(boundaryVal);\n                    buffer = \"\";\n                    iterator = (0,_responseIterator_js__WEBPACK_IMPORTED_MODULE_1__.responseIterator)(response);\n                    running = true;\n                    _e.label = 1;\n                case 1:\n                    if (!running) return [\n                        3 /*break*/ ,\n                        3\n                    ];\n                    return [\n                        4 /*yield*/ ,\n                        iterator.next()\n                    ];\n                case 2:\n                    _a = _e.sent(), value = _a.value, done = _a.done;\n                    chunk = typeof value === \"string\" ? value : decoder.decode(value);\n                    searchFrom = buffer.length - boundary.length + 1;\n                    running = !done;\n                    buffer += chunk;\n                    bi = buffer.indexOf(boundary, searchFrom);\n                    while(bi > -1){\n                        message = void 0;\n                        _b = [\n                            buffer.slice(0, bi),\n                            buffer.slice(bi + boundary.length)\n                        ], message = _b[0], buffer = _b[1];\n                        i = message.indexOf(\"\\r\\n\\r\\n\");\n                        headers = parseHeaders(message.slice(0, i));\n                        contentType_1 = headers[\"content-type\"];\n                        if (contentType_1 && contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                            throw new Error(\"Unsupported patch content type: application/json is required.\");\n                        }\n                        body = message.slice(i);\n                        if (body) {\n                            result = parseJsonBody(response, body);\n                            if (Object.keys(result).length > 1 || \"data\" in result || \"incremental\" in result || \"errors\" in result || \"payload\" in result) {\n                                if ((0,_utilities_common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_2__.isApolloPayloadResult)(result)) {\n                                    next = {};\n                                    if (\"payload\" in result) {\n                                        if (Object.keys(result).length === 1 && result.payload === null) {\n                                            return [\n                                                2 /*return*/ \n                                            ];\n                                        }\n                                        next = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, result.payload);\n                                    }\n                                    if (\"errors\" in result) {\n                                        next = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, next), {\n                                            extensions: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, \"extensions\" in next ? next.extensions : null), (_c = {}, _c[_errors_index_js__WEBPACK_IMPORTED_MODULE_3__.PROTOCOL_ERRORS_SYMBOL] = result.errors, _c))\n                                        });\n                                    }\n                                    nextValue(next);\n                                } else {\n                                    // for the last chunk with only `hasNext: false`\n                                    // we don't need to call observer.next as there is no data/errors\n                                    nextValue(result);\n                                }\n                            } else if (// If the chunk contains only a \"hasNext: false\", we can call\n                            // observer.complete() immediately.\n                            Object.keys(result).length === 1 && \"hasNext\" in result && !result.hasNext) {\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                        }\n                        bi = buffer.indexOf(boundary);\n                    }\n                    return [\n                        3 /*break*/ ,\n                        1\n                    ];\n                case 3:\n                    return [\n                        2 /*return*/ \n                    ];\n            }\n        });\n    });\n}\nfunction parseHeaders(headerText) {\n    var headersInit = {};\n    headerText.split(\"\\n\").forEach(function(line) {\n        var i = line.indexOf(\":\");\n        if (i > -1) {\n            // normalize headers to lowercase\n            var name_1 = line.slice(0, i).trim().toLowerCase();\n            var value = line.slice(i + 1).trim();\n            headersInit[name_1] = value;\n        }\n    });\n    return headersInit;\n}\nfunction parseJsonBody(response, bodyText) {\n    if (response.status >= 300) {\n        // Network error\n        var getResult = function() {\n            try {\n                return JSON.parse(bodyText);\n            } catch (err) {\n                return bodyText;\n            }\n        };\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.throwServerError)(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n    }\n    try {\n        return JSON.parse(bodyText);\n    } catch (err) {\n        var parseError = err;\n        parseError.name = \"ServerParseError\";\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n    }\n}\nfunction handleError(err, observer) {\n    // if it is a network error, BUT there is graphql result info fire\n    // the next observer before calling error this gives apollo-client\n    // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n    // pass to UI this should only happen if we *also* have data as\n    // part of the response key per the spec\n    if (err.result && err.result.errors && err.result.data) {\n        // if we don't call next, the UI can only show networkError\n        // because AC didn't get any graphqlErrors this is graphql\n        // execution result info (i.e errors and possibly data) this is\n        // because there is no formal spec how errors should translate to\n        // http status codes. So an auth error (401) could have both data\n        // from a public field, errors from a private field, and a status\n        // of 401\n        // {\n        //  user { // this will have errors\n        //    firstName\n        //  }\n        //  products { // this is public so will have data\n        //    cost\n        //  }\n        // }\n        //\n        // the result of above *could* look like this:\n        // {\n        //   data: { products: [{ cost: \"$10\" }] },\n        //   errors: [{\n        //      message: 'your session has timed out',\n        //      path: []\n        //   }]\n        // }\n        // status code of above would be a 401\n        // in the UI you want to show data where you can, errors as data where you can\n        // and use correct http status codes\n        observer.next(err.result);\n    }\n    observer.error(err);\n}\nfunction parseAndCheckHttpResponse(operations) {\n    return function(response) {\n        return response.text().then(function(bodyText) {\n            return parseJsonBody(response, bodyText);\n        }).then(function(result) {\n            if (!Array.isArray(result) && !hasOwnProperty.call(result, \"data\") && !hasOwnProperty.call(result, \"errors\")) {\n                // Data error\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.throwServerError)(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ? operations.map(function(op) {\n                    return op.operationName;\n                }) : operations.operationName, \"'.\"));\n            }\n            return result;\n        });\n    };\n} //# sourceMappingURL=parseAndCheckHttpResponse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/responseIterator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   responseIterator: () => (/* binding */ responseIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _iterators_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterators/async.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js\");\n/* harmony import */ var _iterators_nodeStream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./iterators/nodeStream.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js\");\n/* harmony import */ var _iterators_promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iterators/promise.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js\");\n/* harmony import */ var _iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iterators/reader.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */ \n\n\n\n\nfunction isNodeResponse(value) {\n    return !!value.body;\n}\nfunction isReadableStream(value) {\n    return !!value.getReader;\n}\nfunction isAsyncIterableIterator(value) {\n    return !!(_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol && value[Symbol.asyncIterator]);\n}\nfunction isStreamableBlob(value) {\n    return !!value.stream;\n}\nfunction isBlob(value) {\n    return !!value.arrayBuffer;\n}\nfunction isNodeReadableStream(value) {\n    return !!value.pipe;\n}\nfunction responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response)) body = response.body;\n    if (isAsyncIterableIterator(body)) return (0,_iterators_async_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(body);\n    if (isReadableStream(body)) return (0,_iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(body.getReader());\n    // this errors without casting to ReadableStream<T>\n    // because Blob.stream() returns a NodeJS ReadableStream\n    if (isStreamableBlob(body)) {\n        return (0,_iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(body.stream().getReader());\n    }\n    if (isBlob(body)) return (0,_iterators_promise_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(body.arrayBuffer());\n    if (isNodeReadableStream(body)) return (0,_iterators_nodeStream_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n} //# sourceMappingURL=responseIterator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jlc3BvbnNlSXRlcmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBQ29FO0FBQ3BCO0FBQ1U7QUFDTjtBQUNGO0FBQ25ELFNBQVNLLGVBQWVDLEtBQUs7SUFDekIsT0FBTyxDQUFDLENBQUNBLE1BQU1DLElBQUk7QUFDdkI7QUFDQSxTQUFTQyxpQkFBaUJGLEtBQUs7SUFDM0IsT0FBTyxDQUFDLENBQUNBLE1BQU1HLFNBQVM7QUFDNUI7QUFDQSxTQUFTQyx3QkFBd0JKLEtBQUs7SUFDbEMsT0FBTyxDQUFDLENBQUVOLENBQUFBLDBFQUF5QkEsSUFDL0JNLEtBQUssQ0FBQ0ssT0FBT1YsYUFBYSxDQUFDO0FBQ25DO0FBQ0EsU0FBU1csaUJBQWlCTixLQUFLO0lBQzNCLE9BQU8sQ0FBQyxDQUFDQSxNQUFNTyxNQUFNO0FBQ3pCO0FBQ0EsU0FBU0MsT0FBT1IsS0FBSztJQUNqQixPQUFPLENBQUMsQ0FBQ0EsTUFBTVMsV0FBVztBQUM5QjtBQUNBLFNBQVNDLHFCQUFxQlYsS0FBSztJQUMvQixPQUFPLENBQUMsQ0FBQ0EsTUFBTVcsSUFBSTtBQUN2QjtBQUNPLFNBQVNDLGlCQUFpQkMsUUFBUTtJQUNyQyxJQUFJWixPQUFPWTtJQUNYLElBQUlkLGVBQWVjLFdBQ2ZaLE9BQU9ZLFNBQVNaLElBQUk7SUFDeEIsSUFBSUcsd0JBQXdCSCxPQUN4QixPQUFPTiwrREFBYUEsQ0FBQ007SUFDekIsSUFBSUMsaUJBQWlCRCxPQUNqQixPQUFPSCxnRUFBY0EsQ0FBQ0csS0FBS0UsU0FBUztJQUN4QyxtREFBbUQ7SUFDbkQsd0RBQXdEO0lBQ3hELElBQUlHLGlCQUFpQkwsT0FBTztRQUN4QixPQUFPSCxnRUFBY0EsQ0FBQ0csS0FBS00sTUFBTSxHQUFHSixTQUFTO0lBQ2pEO0lBQ0EsSUFBSUssT0FBT1AsT0FDUCxPQUFPSixpRUFBZUEsQ0FBQ0ksS0FBS1EsV0FBVztJQUMzQyxJQUFJQyxxQkFBcUJULE9BQ3JCLE9BQU9MLG9FQUFrQkEsQ0FBQ0s7SUFDOUIsTUFBTSxJQUFJYSxNQUFNO0FBQ3BCLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9yZXNwb25zZUl0ZXJhdG9yLmpzPzdmMzQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBPcmlnaW5hbCBzb3VyY2U6XG4gKiBodHRwczovL2dpdGh1Yi5jb20va21hbGFrb2ZmL3Jlc3BvbnNlLWl0ZXJhdG9yL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuICovXG5pbXBvcnQgeyBjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuaW1wb3J0IGFzeW5jSXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3JzL2FzeW5jLmpzXCI7XG5pbXBvcnQgbm9kZVN0cmVhbUl0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLmpzXCI7XG5pbXBvcnQgcHJvbWlzZUl0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9ycy9wcm9taXNlLmpzXCI7XG5pbXBvcnQgcmVhZGVySXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3JzL3JlYWRlci5qc1wiO1xuZnVuY3Rpb24gaXNOb2RlUmVzcG9uc2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5ib2R5O1xufVxuZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbSh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlLmdldFJlYWRlcjtcbn1cbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZUl0ZXJhdG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhKGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgJiZcbiAgICAgICAgdmFsdWVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbmZ1bmN0aW9uIGlzU3RyZWFtYWJsZUJsb2IodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5zdHJlYW07XG59XG5mdW5jdGlvbiBpc0Jsb2IodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5hcnJheUJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIGlzTm9kZVJlYWRhYmxlU3RyZWFtKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUucGlwZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNwb25zZUl0ZXJhdG9yKHJlc3BvbnNlKSB7XG4gICAgdmFyIGJvZHkgPSByZXNwb25zZTtcbiAgICBpZiAoaXNOb2RlUmVzcG9uc2UocmVzcG9uc2UpKVxuICAgICAgICBib2R5ID0gcmVzcG9uc2UuYm9keTtcbiAgICBpZiAoaXNBc3luY0l0ZXJhYmxlSXRlcmF0b3IoYm9keSkpXG4gICAgICAgIHJldHVybiBhc3luY0l0ZXJhdG9yKGJvZHkpO1xuICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtKGJvZHkpKVxuICAgICAgICByZXR1cm4gcmVhZGVySXRlcmF0b3IoYm9keS5nZXRSZWFkZXIoKSk7XG4gICAgLy8gdGhpcyBlcnJvcnMgd2l0aG91dCBjYXN0aW5nIHRvIFJlYWRhYmxlU3RyZWFtPFQ+XG4gICAgLy8gYmVjYXVzZSBCbG9iLnN0cmVhbSgpIHJldHVybnMgYSBOb2RlSlMgUmVhZGFibGVTdHJlYW1cbiAgICBpZiAoaXNTdHJlYW1hYmxlQmxvYihib2R5KSkge1xuICAgICAgICByZXR1cm4gcmVhZGVySXRlcmF0b3IoYm9keS5zdHJlYW0oKS5nZXRSZWFkZXIoKSk7XG4gICAgfVxuICAgIGlmIChpc0Jsb2IoYm9keSkpXG4gICAgICAgIHJldHVybiBwcm9taXNlSXRlcmF0b3IoYm9keS5hcnJheUJ1ZmZlcigpKTtcbiAgICBpZiAoaXNOb2RlUmVhZGFibGVTdHJlYW0oYm9keSkpXG4gICAgICAgIHJldHVybiBub2RlU3RyZWFtSXRlcmF0b3IoYm9keSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBib2R5IHR5cGUgZm9yIHJlc3BvbnNlSXRlcmF0b3IuIFBsZWFzZSBwYXNzIGEgc3RyZWFtYWJsZSByZXNwb25zZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZUl0ZXJhdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsIm5vZGVTdHJlYW1JdGVyYXRvciIsInByb21pc2VJdGVyYXRvciIsInJlYWRlckl0ZXJhdG9yIiwiaXNOb2RlUmVzcG9uc2UiLCJ2YWx1ZSIsImJvZHkiLCJpc1JlYWRhYmxlU3RyZWFtIiwiZ2V0UmVhZGVyIiwiaXNBc3luY0l0ZXJhYmxlSXRlcmF0b3IiLCJTeW1ib2wiLCJpc1N0cmVhbWFibGVCbG9iIiwic3RyZWFtIiwiaXNCbG9iIiwiYXJyYXlCdWZmZXIiLCJpc05vZGVSZWFkYWJsZVN0cmVhbSIsInBpcGUiLCJyZXNwb25zZUl0ZXJhdG9yIiwicmVzcG9uc2UiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/rewriteURIForGET.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rewriteURIForGET: () => (/* binding */ rewriteURIForGET)\n/* harmony export */ });\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    var queryParams = [];\n    var addQueryParam = function(key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if (\"query\" in body) {\n        addQueryParam(\"query\", body.query);\n    }\n    if (body.operationName) {\n        addQueryParam(\"operationName\", body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter)(body.variables, \"Variables map\");\n        } catch (parseError) {\n            return {\n                parseError: parseError\n            };\n        }\n        addQueryParam(\"variables\", serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter)(body.extensions, \"Extensions map\");\n        } catch (parseError) {\n            return {\n                parseError: parseError\n            };\n        }\n        addQueryParam(\"extensions\", serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    var fragment = \"\", preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf(\"#\");\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n    var newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n    return {\n        newURI: newURI\n    };\n} //# sourceMappingURL=rewriteURIForGET.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jld3JpdGVVUklGb3JHRVQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUU7QUFDdkUsNEVBQTRFO0FBQzVFLGVBQWU7QUFDUixTQUFTQyxpQkFBaUJDLFNBQVMsRUFBRUMsSUFBSTtJQUM1Qyx5RUFBeUU7SUFDekUseUNBQXlDO0lBQ3pDLElBQUlDLGNBQWMsRUFBRTtJQUNwQixJQUFJQyxnQkFBZ0IsU0FBVUMsR0FBRyxFQUFFQyxLQUFLO1FBQ3BDSCxZQUFZSSxJQUFJLENBQUMsR0FBR0MsTUFBTSxDQUFDSCxLQUFLLEtBQUtHLE1BQU0sQ0FBQ0MsbUJBQW1CSDtJQUNuRTtJQUNBLElBQUksV0FBV0osTUFBTTtRQUNqQkUsY0FBYyxTQUFTRixLQUFLUSxLQUFLO0lBQ3JDO0lBQ0EsSUFBSVIsS0FBS1MsYUFBYSxFQUFFO1FBQ3BCUCxjQUFjLGlCQUFpQkYsS0FBS1MsYUFBYTtJQUNyRDtJQUNBLElBQUlULEtBQUtVLFNBQVMsRUFBRTtRQUNoQixJQUFJQyxzQkFBc0IsS0FBSztRQUMvQixJQUFJO1lBQ0FBLHNCQUFzQmQsb0ZBQXVCQSxDQUFDRyxLQUFLVSxTQUFTLEVBQUU7UUFDbEUsRUFDQSxPQUFPRSxZQUFZO1lBQ2YsT0FBTztnQkFBRUEsWUFBWUE7WUFBVztRQUNwQztRQUNBVixjQUFjLGFBQWFTO0lBQy9CO0lBQ0EsSUFBSVgsS0FBS2EsVUFBVSxFQUFFO1FBQ2pCLElBQUlDLHVCQUF1QixLQUFLO1FBQ2hDLElBQUk7WUFDQUEsdUJBQXVCakIsb0ZBQXVCQSxDQUFDRyxLQUFLYSxVQUFVLEVBQUU7UUFDcEUsRUFDQSxPQUFPRCxZQUFZO1lBQ2YsT0FBTztnQkFBRUEsWUFBWUE7WUFBVztRQUNwQztRQUNBVixjQUFjLGNBQWNZO0lBQ2hDO0lBQ0EsK0NBQStDO0lBQy9DLG1FQUFtRTtJQUNuRSwwRUFBMEU7SUFDMUUseUVBQXlFO0lBQ3pFLGtFQUFrRTtJQUNsRSxtRUFBbUU7SUFDbkUsSUFBSUMsV0FBVyxJQUFJQyxjQUFjakI7SUFDakMsSUFBSWtCLGdCQUFnQmxCLFVBQVVtQixPQUFPLENBQUM7SUFDdEMsSUFBSUQsa0JBQWtCLENBQUMsR0FBRztRQUN0QkYsV0FBV2hCLFVBQVVvQixNQUFNLENBQUNGO1FBQzVCRCxjQUFjakIsVUFBVW9CLE1BQU0sQ0FBQyxHQUFHRjtJQUN0QztJQUNBLElBQUlHLG9CQUFvQkosWUFBWUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU07SUFDaEUsSUFBSUcsU0FBU0wsY0FBY0ksb0JBQW9CbkIsWUFBWXFCLElBQUksQ0FBQyxPQUFPUDtJQUN2RSxPQUFPO1FBQUVNLFFBQVFBO0lBQU87QUFDNUIsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jld3JpdGVVUklGb3JHRVQuanM/NjU3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXJpYWxpemVGZXRjaFBhcmFtZXRlciB9IGZyb20gXCIuL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzXCI7XG4vLyBGb3IgR0VUIG9wZXJhdGlvbnMsIHJldHVybnMgdGhlIGdpdmVuIFVSSSByZXdyaXR0ZW4gd2l0aCBwYXJhbWV0ZXJzLCBvciBhXG4vLyBwYXJzZSBlcnJvci5cbmV4cG9ydCBmdW5jdGlvbiByZXdyaXRlVVJJRm9yR0VUKGNob3NlblVSSSwgYm9keSkge1xuICAgIC8vIEltcGxlbWVudCB0aGUgc3RhbmRhcmQgSFRUUCBHRVQgc2VyaWFsaXphdGlvbiwgcGx1cyAnZXh0ZW5zaW9ucycuIE5vdGVcbiAgICAvLyB0aGUgZXh0cmEgbGV2ZWwgb2YgSlNPTiBzZXJpYWxpemF0aW9uIVxuICAgIHZhciBxdWVyeVBhcmFtcyA9IFtdO1xuICAgIHZhciBhZGRRdWVyeVBhcmFtID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcXVlcnlQYXJhbXMucHVzaChcIlwiLmNvbmNhdChrZXksIFwiPVwiKS5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSkpO1xuICAgIH07XG4gICAgaWYgKFwicXVlcnlcIiBpbiBib2R5KSB7XG4gICAgICAgIGFkZFF1ZXJ5UGFyYW0oXCJxdWVyeVwiLCBib2R5LnF1ZXJ5KTtcbiAgICB9XG4gICAgaWYgKGJvZHkub3BlcmF0aW9uTmFtZSkge1xuICAgICAgICBhZGRRdWVyeVBhcmFtKFwib3BlcmF0aW9uTmFtZVwiLCBib2R5Lm9wZXJhdGlvbk5hbWUpO1xuICAgIH1cbiAgICBpZiAoYm9keS52YXJpYWJsZXMpIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRWYXJpYWJsZXMgPSB2b2lkIDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkVmFyaWFibGVzID0gc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIoYm9keS52YXJpYWJsZXMsIFwiVmFyaWFibGVzIG1hcFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAocGFyc2VFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFyc2VFcnJvcjogcGFyc2VFcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGFkZFF1ZXJ5UGFyYW0oXCJ2YXJpYWJsZXNcIiwgc2VyaWFsaXplZFZhcmlhYmxlcyk7XG4gICAgfVxuICAgIGlmIChib2R5LmV4dGVuc2lvbnMpIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRFeHRlbnNpb25zID0gdm9pZCAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VyaWFsaXplZEV4dGVuc2lvbnMgPSBzZXJpYWxpemVGZXRjaFBhcmFtZXRlcihib2R5LmV4dGVuc2lvbnMsIFwiRXh0ZW5zaW9ucyBtYXBcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBhcnNlRXJyb3I6IHBhcnNlRXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBhZGRRdWVyeVBhcmFtKFwiZXh0ZW5zaW9uc1wiLCBzZXJpYWxpemVkRXh0ZW5zaW9ucyk7XG4gICAgfVxuICAgIC8vIFJlY29uc3RydWN0IHRoZSBVUkkgd2l0aCBhZGRlZCBxdWVyeSBwYXJhbXMuXG4gICAgLy8gWFhYIFRoaXMgYXNzdW1lcyB0aGF0IHRoZSBVUkkgaXMgd2VsbC1mb3JtZWQgYW5kIHRoYXQgaXQgZG9lc24ndFxuICAgIC8vICAgICBhbHJlYWR5IGNvbnRhaW4gYW55IG9mIHRoZXNlIHF1ZXJ5IHBhcmFtcy4gV2UgY291bGQgaW5zdGVhZCB1c2UgdGhlXG4gICAgLy8gICAgIFVSTCBBUEkgYW5kIHRha2UgYSBwb2x5ZmlsbCAod2hhdHdnLXVybEA2KSBmb3Igb2xkZXIgYnJvd3NlcnMgdGhhdFxuICAgIC8vICAgICBkb24ndCBzdXBwb3J0IFVSTFNlYXJjaFBhcmFtcy4gTm90ZSB0aGF0IHNvbWUgYnJvd3NlcnMgKGFuZFxuICAgIC8vICAgICB2ZXJzaW9ucyBvZiB3aGF0d2ctdXJsKSBzdXBwb3J0IFVSTCBidXQgbm90IFVSTFNlYXJjaFBhcmFtcyFcbiAgICB2YXIgZnJhZ21lbnQgPSBcIlwiLCBwcmVGcmFnbWVudCA9IGNob3NlblVSSTtcbiAgICB2YXIgZnJhZ21lbnRTdGFydCA9IGNob3NlblVSSS5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoZnJhZ21lbnRTdGFydCAhPT0gLTEpIHtcbiAgICAgICAgZnJhZ21lbnQgPSBjaG9zZW5VUkkuc3Vic3RyKGZyYWdtZW50U3RhcnQpO1xuICAgICAgICBwcmVGcmFnbWVudCA9IGNob3NlblVSSS5zdWJzdHIoMCwgZnJhZ21lbnRTdGFydCk7XG4gICAgfVxuICAgIHZhciBxdWVyeVBhcmFtc1ByZWZpeCA9IHByZUZyYWdtZW50LmluZGV4T2YoXCI/XCIpID09PSAtMSA/IFwiP1wiIDogXCImXCI7XG4gICAgdmFyIG5ld1VSSSA9IHByZUZyYWdtZW50ICsgcXVlcnlQYXJhbXNQcmVmaXggKyBxdWVyeVBhcmFtcy5qb2luKFwiJlwiKSArIGZyYWdtZW50O1xuICAgIHJldHVybiB7IG5ld1VSSTogbmV3VVJJIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXdyaXRlVVJJRm9yR0VULmpzLm1hcCJdLCJuYW1lcyI6WyJzZXJpYWxpemVGZXRjaFBhcmFtZXRlciIsInJld3JpdGVVUklGb3JHRVQiLCJjaG9zZW5VUkkiLCJib2R5IiwicXVlcnlQYXJhbXMiLCJhZGRRdWVyeVBhcmFtIiwia2V5IiwidmFsdWUiLCJwdXNoIiwiY29uY2F0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXVlcnkiLCJvcGVyYXRpb25OYW1lIiwidmFyaWFibGVzIiwic2VyaWFsaXplZFZhcmlhYmxlcyIsInBhcnNlRXJyb3IiLCJleHRlbnNpb25zIiwic2VyaWFsaXplZEV4dGVuc2lvbnMiLCJmcmFnbWVudCIsInByZUZyYWdtZW50IiwiZnJhZ21lbnRTdGFydCIsImluZGV4T2YiLCJzdWJzdHIiLCJxdWVyeVBhcmFtc1ByZWZpeCIsIm5ld1VSSSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultPrinter: () => (/* binding */ defaultPrinter),\n/* harmony export */   fallbackHttpConfig: () => (/* binding */ fallbackHttpConfig),\n/* harmony export */   selectHttpOptionsAndBody: () => (/* binding */ selectHttpOptionsAndBody),\n/* harmony export */   selectHttpOptionsAndBodyInternal: () => (/* binding */ selectHttpOptionsAndBodyInternal)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false\n};\nvar defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: \"*/*\",\n    // The content-type header describes the type of the body of the request, and\n    // so it typically only is sent with requests that actually have bodies. One\n    // could imagine that Apollo Client would remove this header when constructing\n    // a GET request (which has no body), but we historically have not done that.\n    // This means that browsers will preflight all Apollo Client requests (even\n    // GET requests). Apollo Server's CSRF prevention feature (introduced in\n    // AS3.7) takes advantage of this fact and does not block requests with this\n    // header. If you want to drop this header from GET requests, then you should\n    // probably replace it with a `apollo-require-preflight` header, or servers\n    // with CSRF prevention enabled might block your GET request. See\n    // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n    // for more details.\n    \"content-type\": \"application/json\"\n};\nvar defaultOptions = {\n    method: \"POST\"\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions\n};\nvar defaultPrinter = function(ast, printer) {\n    return printer(ast);\n};\nfunction selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([\n        operation,\n        defaultPrinter\n    ], configs, false));\n}\nfunction selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function(config) {\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options), config.options), {\n            headers: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options.headers), config.headers)\n        });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    //The body depends on the http options\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = {\n        operationName: operationName,\n        variables: variables\n    };\n    if (http.includeExtensions) body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery) body.query = printer(query, _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.print);\n    return {\n        options: options,\n        body: body\n    };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    // If we're not preserving the case, just remove duplicates w/ normalization.\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = {};\n        Object.keys(Object(headers)).forEach(function(name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    // If we are preserving the case, remove duplicates w/ normalization,\n    // preserving the original name.\n    // This allows for non-http-spec-compliant servers that expect intentionally\n    // capitalized header names (See #6741).\n    var headerData = {};\n    Object.keys(Object(headers)).forEach(function(name) {\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name]\n        };\n    });\n    var normalizedHeaders = {};\n    Object.keys(headerData).forEach(function(name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n} //# sourceMappingURL=selectHttpOptionsAndBody.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/selectURI.js":
/*!************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/selectURI.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectURI: () => (/* binding */ selectURI)\n/* harmony export */ });\nvar selectURI = function(operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    } else if (typeof fallbackURI === \"function\") {\n        return fallbackURI(operation);\n    } else {\n        return fallbackURI || \"/graphql\";\n    }\n}; //# sourceMappingURL=selectURI.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlbGVjdFVSSS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsWUFBWSxTQUFVQyxTQUFTLEVBQUVDLFdBQVc7SUFDbkQsSUFBSUMsVUFBVUYsVUFBVUcsVUFBVTtJQUNsQyxJQUFJQyxhQUFhRixRQUFRRyxHQUFHO0lBQzVCLElBQUlELFlBQVk7UUFDWixPQUFPQTtJQUNYLE9BQ0ssSUFBSSxPQUFPSCxnQkFBZ0IsWUFBWTtRQUN4QyxPQUFPQSxZQUFZRDtJQUN2QixPQUNLO1FBQ0QsT0FBT0MsZUFBZTtJQUMxQjtBQUNKLEVBQUUsQ0FDRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlbGVjdFVSSS5qcz9mMGZhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgc2VsZWN0VVJJID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgZmFsbGJhY2tVUkkpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wZXJhdGlvbi5nZXRDb250ZXh0KCk7XG4gICAgdmFyIGNvbnRleHRVUkkgPSBjb250ZXh0LnVyaTtcbiAgICBpZiAoY29udGV4dFVSSSkge1xuICAgICAgICByZXR1cm4gY29udGV4dFVSSTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZhbGxiYWNrVVJJID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrVVJJKG9wZXJhdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2tVUkkgfHwgXCIvZ3JhcGhxbFwiO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3RVUkkuanMubWFwIl0sIm5hbWVzIjpbInNlbGVjdFVSSSIsIm9wZXJhdGlvbiIsImZhbGxiYWNrVVJJIiwiY29udGV4dCIsImdldENvbnRleHQiLCJjb250ZXh0VVJJIiwidXJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/selectURI.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/serializeFetchParameter.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializeFetchParameter: () => (/* binding */ serializeFetchParameter)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar serializeFetchParameter = function(p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    } catch (e) {\n        var parseError = (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(40, label, e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n}; //# sourceMappingURL=serializeFetchParameter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFFO0FBQzlELElBQUlDLDBCQUEwQixTQUFVQyxDQUFDLEVBQUVDLEtBQUs7SUFDbkQsSUFBSUM7SUFDSixJQUFJO1FBQ0FBLGFBQWFDLEtBQUtDLFNBQVMsQ0FBQ0o7SUFDaEMsRUFDQSxPQUFPSyxHQUFHO1FBQ04sSUFBSUMsYUFBYVIsOEVBQWlCQSxDQUFDLElBQUlHLE9BQU9JLEVBQUVFLE9BQU87UUFDdkRELFdBQVdBLFVBQVUsR0FBR0Q7UUFDeEIsTUFBTUM7SUFDVjtJQUNBLE9BQU9KO0FBQ1gsRUFBRSxDQUNGLG1EQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIuanM/YmQ2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJbnZhcmlhbnRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IHZhciBzZXJpYWxpemVGZXRjaFBhcmFtZXRlciA9IGZ1bmN0aW9uIChwLCBsYWJlbCkge1xuICAgIHZhciBzZXJpYWxpemVkO1xuICAgIHRyeSB7XG4gICAgICAgIHNlcmlhbGl6ZWQgPSBKU09OLnN0cmluZ2lmeShwKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdmFyIHBhcnNlRXJyb3IgPSBuZXdJbnZhcmlhbnRFcnJvcig0MCwgbGFiZWwsIGUubWVzc2FnZSk7XG4gICAgICAgIHBhcnNlRXJyb3IucGFyc2VFcnJvciA9IGU7XG4gICAgICAgIHRocm93IHBhcnNlRXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJuZXdJbnZhcmlhbnRFcnJvciIsInNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyIiwicCIsImxhYmVsIiwic2VyaWFsaXplZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwicGFyc2VFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/createOperation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOperation: () => (/* binding */ createOperation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nfunction createOperation(starting, operation) {\n    var context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, starting);\n    var setContext = function(next) {\n        if (typeof next === \"function\") {\n            context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context), next(context));\n        } else {\n            context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context), next);\n        }\n    };\n    var getContext = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context);\n    };\n    Object.defineProperty(operation, \"setContext\", {\n        enumerable: false,\n        value: setContext\n    });\n    Object.defineProperty(operation, \"getContext\", {\n        enumerable: false,\n        value: getContext\n    });\n    return operation;\n} //# sourceMappingURL=createOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9jcmVhdGVPcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUM7QUFDMUIsU0FBU0MsZ0JBQWdCQyxRQUFRLEVBQUVDLFNBQVM7SUFDL0MsSUFBSUMsVUFBVUosK0NBQVFBLENBQUMsQ0FBQyxHQUFHRTtJQUMzQixJQUFJRyxhQUFhLFNBQVVDLElBQUk7UUFDM0IsSUFBSSxPQUFPQSxTQUFTLFlBQVk7WUFDNUJGLFVBQVVKLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdJLFVBQVVFLEtBQUtGO1FBQ25ELE9BQ0s7WUFDREEsVUFBVUosK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR0ksVUFBVUU7UUFDOUM7SUFDSjtJQUNBLElBQUlDLGFBQWE7UUFBYyxPQUFRUCwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdJO0lBQVc7SUFDL0RJLE9BQU9DLGNBQWMsQ0FBQ04sV0FBVyxjQUFjO1FBQzNDTyxZQUFZO1FBQ1pDLE9BQU9OO0lBQ1g7SUFDQUcsT0FBT0MsY0FBYyxDQUFDTixXQUFXLGNBQWM7UUFDM0NPLFlBQVk7UUFDWkMsT0FBT0o7SUFDWDtJQUNBLE9BQU9KO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9jcmVhdGVPcGVyYXRpb24uanM/NTMxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9wZXJhdGlvbihzdGFydGluZywgb3BlcmF0aW9uKSB7XG4gICAgdmFyIGNvbnRleHQgPSBfX2Fzc2lnbih7fSwgc3RhcnRpbmcpO1xuICAgIHZhciBzZXRDb250ZXh0ID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29udGV4dCksIG5leHQoY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb250ZXh0KSwgbmV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBnZXRDb250ZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKF9fYXNzaWduKHt9LCBjb250ZXh0KSk7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgXCJzZXRDb250ZXh0XCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzZXRDb250ZXh0LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcGVyYXRpb24sIFwiZ2V0Q29udGV4dFwiLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogZ2V0Q29udGV4dCxcbiAgICB9KTtcbiAgICByZXR1cm4gb3BlcmF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlT3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImNyZWF0ZU9wZXJhdGlvbiIsInN0YXJ0aW5nIiwib3BlcmF0aW9uIiwiY29udGV4dCIsInNldENvbnRleHQiLCJuZXh0IiwiZ2V0Q29udGV4dCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/filterOperationVariables.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterOperationVariables: () => (/* binding */ filterOperationVariables)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n\n\nfunction filterOperationVariables(variables, query) {\n    var result = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, variables);\n    var unusedNames = new Set(Object.keys(variables));\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(query, {\n        Variable: function(node, _key, parent) {\n            // A variable type definition at the top level of a query is not\n            // enough to silence server-side errors about the variable being\n            // unused, so variable definitions do not count as usage.\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            if (parent && parent.kind !== \"VariableDefinition\") {\n                unusedNames.delete(node.name.value);\n            }\n        }\n    });\n    unusedNames.forEach(function(name) {\n        delete result[name];\n    });\n    return result;\n} //# sourceMappingURL=filterOperationVariables.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9maWx0ZXJPcGVyYXRpb25WYXJpYWJsZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ0Q7QUFDekIsU0FBU0UseUJBQXlCQyxTQUFTLEVBQUVDLEtBQUs7SUFDckQsSUFBSUMsU0FBU0wsK0NBQVFBLENBQUMsQ0FBQyxHQUFHRztJQUMxQixJQUFJRyxjQUFjLElBQUlDLElBQUlDLE9BQU9DLElBQUksQ0FBQ047SUFDdENGLDhDQUFLQSxDQUFDRyxPQUFPO1FBQ1RNLFVBQVUsU0FBVUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07WUFDbEMsZ0VBQWdFO1lBQ2hFLGdFQUFnRTtZQUNoRSx5REFBeUQ7WUFDekQseURBQXlEO1lBQ3pELElBQUlBLFVBQ0FBLE9BQU9DLElBQUksS0FBSyxzQkFBc0I7Z0JBQ3RDUixZQUFZUyxNQUFNLENBQUNKLEtBQUtLLElBQUksQ0FBQ0MsS0FBSztZQUN0QztRQUNKO0lBQ0o7SUFDQVgsWUFBWVksT0FBTyxDQUFDLFNBQVVGLElBQUk7UUFDOUIsT0FBT1gsTUFBTSxDQUFDVyxLQUFLO0lBQ3ZCO0lBQ0EsT0FBT1g7QUFDWCxFQUNBLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL2ZpbHRlck9wZXJhdGlvblZhcmlhYmxlcy5qcz84YWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gXCJncmFwaHFsXCI7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzKHZhcmlhYmxlcywgcXVlcnkpIHtcbiAgICB2YXIgcmVzdWx0ID0gX19hc3NpZ24oe30sIHZhcmlhYmxlcyk7XG4gICAgdmFyIHVudXNlZE5hbWVzID0gbmV3IFNldChPYmplY3Qua2V5cyh2YXJpYWJsZXMpKTtcbiAgICB2aXNpdChxdWVyeSwge1xuICAgICAgICBWYXJpYWJsZTogZnVuY3Rpb24gKG5vZGUsIF9rZXksIHBhcmVudCkge1xuICAgICAgICAgICAgLy8gQSB2YXJpYWJsZSB0eXBlIGRlZmluaXRpb24gYXQgdGhlIHRvcCBsZXZlbCBvZiBhIHF1ZXJ5IGlzIG5vdFxuICAgICAgICAgICAgLy8gZW5vdWdoIHRvIHNpbGVuY2Ugc2VydmVyLXNpZGUgZXJyb3JzIGFib3V0IHRoZSB2YXJpYWJsZSBiZWluZ1xuICAgICAgICAgICAgLy8gdW51c2VkLCBzbyB2YXJpYWJsZSBkZWZpbml0aW9ucyBkbyBub3QgY291bnQgYXMgdXNhZ2UuXG4gICAgICAgICAgICAvLyBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1BbGwtVmFyaWFibGVzLVVzZWRcbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiZcbiAgICAgICAgICAgICAgICBwYXJlbnQua2luZCAhPT0gXCJWYXJpYWJsZURlZmluaXRpb25cIikge1xuICAgICAgICAgICAgICAgIHVudXNlZE5hbWVzLmRlbGV0ZShub2RlLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHVudXNlZE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgZGVsZXRlIHJlc3VsdFtuYW1lXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsInZpc2l0IiwiZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzIiwidmFyaWFibGVzIiwicXVlcnkiLCJyZXN1bHQiLCJ1bnVzZWROYW1lcyIsIlNldCIsIk9iamVjdCIsImtleXMiLCJWYXJpYWJsZSIsIm5vZGUiLCJfa2V5IiwicGFyZW50Iiwia2luZCIsImRlbGV0ZSIsIm5hbWUiLCJ2YWx1ZSIsImZvckVhY2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/fromError.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/fromError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromError: () => (/* binding */ fromError)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\nfunction fromError(errorValue) {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        observer.error(errorValue);\n    });\n} //# sourceMappingURL=fromError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9mcm9tRXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0Q7QUFDL0MsU0FBU0MsVUFBVUMsVUFBVTtJQUNoQyxPQUFPLElBQUlGLDJEQUFVQSxDQUFDLFNBQVVHLFFBQVE7UUFDcENBLFNBQVNDLEtBQUssQ0FBQ0Y7SUFDbkI7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL2Zyb21FcnJvci5qcz84ZTI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZnJvbUVycm9yKGVycm9yVmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yVmFsdWUpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUVycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYnNlcnZhYmxlIiwiZnJvbUVycm9yIiwiZXJyb3JWYWx1ZSIsIm9ic2VydmVyIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/fromError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/fromPromise.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/fromPromise.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromPromise: () => (/* binding */ fromPromise)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\nfunction fromPromise(promise) {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        promise.then(function(value) {\n            observer.next(value);\n            observer.complete();\n        }).catch(observer.error.bind(observer));\n    });\n} //# sourceMappingURL=fromPromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9mcm9tUHJvbWlzZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRDtBQUMvQyxTQUFTQyxZQUFZQyxPQUFPO0lBQy9CLE9BQU8sSUFBSUYsMkRBQVVBLENBQUMsU0FBVUcsUUFBUTtRQUNwQ0QsUUFDS0UsSUFBSSxDQUFDLFNBQVVDLEtBQUs7WUFDckJGLFNBQVNHLElBQUksQ0FBQ0Q7WUFDZEYsU0FBU0ksUUFBUTtRQUNyQixHQUNLQyxLQUFLLENBQUNMLFNBQVNNLEtBQUssQ0FBQ0MsSUFBSSxDQUFDUDtJQUNuQztBQUNKLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvdXRpbHMvZnJvbVByb21pc2UuanM/MjRmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21Qcm9taXNlKHByb21pc2UpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21Qcm9taXNlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYnNlcnZhYmxlIiwiZnJvbVByb21pc2UiLCJwcm9taXNlIiwib2JzZXJ2ZXIiLCJ0aGVuIiwidmFsdWUiLCJuZXh0IiwiY29tcGxldGUiLCJjYXRjaCIsImVycm9yIiwiYmluZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/fromPromise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/throwServerError.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   throwServerError: () => (/* binding */ throwServerError)\n/* harmony export */ });\nvar throwServerError = function(response, result, message) {\n    var error = new Error(message);\n    error.name = \"ServerError\";\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n}; //# sourceMappingURL=throwServerError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90aHJvd1NlcnZlckVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxJQUFJQSxtQkFBbUIsU0FBVUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLE9BQU87SUFDN0QsSUFBSUMsUUFBUSxJQUFJQyxNQUFNRjtJQUN0QkMsTUFBTUUsSUFBSSxHQUFHO0lBQ2JGLE1BQU1ILFFBQVEsR0FBR0E7SUFDakJHLE1BQU1HLFVBQVUsR0FBR04sU0FBU08sTUFBTTtJQUNsQ0osTUFBTUYsTUFBTSxHQUFHQTtJQUNmLE1BQU1FO0FBQ1YsRUFBRSxDQUNGLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL3Rocm93U2VydmVyRXJyb3IuanM/NDllZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHRocm93U2VydmVyRXJyb3IgPSBmdW5jdGlvbiAocmVzcG9uc2UsIHJlc3VsdCwgbWVzc2FnZSkge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gXCJTZXJ2ZXJFcnJvclwiO1xuICAgIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgZXJyb3Iuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICBlcnJvci5yZXN1bHQgPSByZXN1bHQ7XG4gICAgdGhyb3cgZXJyb3I7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dTZXJ2ZXJFcnJvci5qcy5tYXAiXSwibmFtZXMiOlsidGhyb3dTZXJ2ZXJFcnJvciIsInJlc3BvbnNlIiwicmVzdWx0IiwibWVzc2FnZSIsImVycm9yIiwiRXJyb3IiLCJuYW1lIiwic3RhdHVzQ29kZSIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/toPromise.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/toPromise.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toPromise: () => (/* binding */ toPromise)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nfunction toPromise(observable) {\n    var completed = false;\n    return new Promise(function(resolve, reject) {\n        observable.subscribe({\n            next: function(data) {\n                if (completed) {\n                    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(43);\n                } else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject\n        });\n    });\n} //# sourceMappingURL=toPromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90b1Byb21pc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkQ7QUFDdEQsU0FBU0MsVUFBVUMsVUFBVTtJQUNoQyxJQUFJQyxZQUFZO0lBQ2hCLE9BQU8sSUFBSUMsUUFBUSxTQUFVQyxPQUFPLEVBQUVDLE1BQU07UUFDeENKLFdBQVdLLFNBQVMsQ0FBQztZQUNqQkMsTUFBTSxTQUFVQyxJQUFJO2dCQUNoQixJQUFJTixXQUFXO29CQUNYTyxXQUFXQyxPQUFPLEtBQUssU0FBU1gsa0VBQVNBLENBQUNZLElBQUksQ0FBQztnQkFDbkQsT0FDSztvQkFDRFQsWUFBWTtvQkFDWkUsUUFBUUk7Z0JBQ1o7WUFDSjtZQUNBSSxPQUFPUDtRQUNYO0lBQ0o7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL3RvUHJvbWlzZS5qcz85OWM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRvUHJvbWlzZShvYnNlcnZhYmxlKSB7XG4gICAgdmFyIGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIGludmFyaWFudC53YXJuKDQzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9Qcm9taXNlLmpzLm1hcCJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJ0b1Byb21pc2UiLCJvYnNlcnZhYmxlIiwiY29tcGxldGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzdWJzY3JpYmUiLCJuZXh0IiwiZGF0YSIsImdsb2JhbFRoaXMiLCJfX0RFVl9fIiwid2FybiIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/toPromise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/transformOperation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transformOperation: () => (/* binding */ transformOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query\n    };\n    // Best guess at an operation name\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName = typeof transformedOperation.query !== \"string\" ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.getOperationName)(transformedOperation.query) || undefined : \"\";\n    }\n    return transformedOperation;\n} //# sourceMappingURL=transformOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90cmFuc2Zvcm1PcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEQ7QUFDckQsU0FBU0MsbUJBQW1CQyxTQUFTO0lBQ3hDLElBQUlDLHVCQUF1QjtRQUN2QkMsV0FBV0YsVUFBVUUsU0FBUyxJQUFJLENBQUM7UUFDbkNDLFlBQVlILFVBQVVHLFVBQVUsSUFBSSxDQUFDO1FBQ3JDQyxlQUFlSixVQUFVSSxhQUFhO1FBQ3RDQyxPQUFPTCxVQUFVSyxLQUFLO0lBQzFCO0lBQ0Esa0NBQWtDO0lBQ2xDLElBQUksQ0FBQ0oscUJBQXFCRyxhQUFhLEVBQUU7UUFDckNILHFCQUFxQkcsYUFBYSxHQUM5QixPQUFPSCxxQkFBcUJJLEtBQUssS0FBSyxXQUNsQ1AscUVBQWdCQSxDQUFDRyxxQkFBcUJJLEtBQUssS0FBS0MsWUFDOUM7SUFDZDtJQUNBLE9BQU9MO0FBQ1gsRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90cmFuc2Zvcm1PcGVyYXRpb24uanM/ZWExMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRPcGVyYXRpb25OYW1lIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU9wZXJhdGlvbihvcGVyYXRpb24pIHtcbiAgICB2YXIgdHJhbnNmb3JtZWRPcGVyYXRpb24gPSB7XG4gICAgICAgIHZhcmlhYmxlczogb3BlcmF0aW9uLnZhcmlhYmxlcyB8fCB7fSxcbiAgICAgICAgZXh0ZW5zaW9uczogb3BlcmF0aW9uLmV4dGVuc2lvbnMgfHwge30sXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5vcGVyYXRpb25OYW1lLFxuICAgICAgICBxdWVyeTogb3BlcmF0aW9uLnF1ZXJ5LFxuICAgIH07XG4gICAgLy8gQmVzdCBndWVzcyBhdCBhbiBvcGVyYXRpb24gbmFtZVxuICAgIGlmICghdHJhbnNmb3JtZWRPcGVyYXRpb24ub3BlcmF0aW9uTmFtZSkge1xuICAgICAgICB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vcGVyYXRpb25OYW1lID1cbiAgICAgICAgICAgIHR5cGVvZiB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5xdWVyeSAhPT0gXCJzdHJpbmdcIiA/XG4gICAgICAgICAgICAgICAgZ2V0T3BlcmF0aW9uTmFtZSh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5xdWVyeSkgfHwgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtZWRPcGVyYXRpb247XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2Zvcm1PcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbImdldE9wZXJhdGlvbk5hbWUiLCJ0cmFuc2Zvcm1PcGVyYXRpb24iLCJvcGVyYXRpb24iLCJ0cmFuc2Zvcm1lZE9wZXJhdGlvbiIsInZhcmlhYmxlcyIsImV4dGVuc2lvbnMiLCJvcGVyYXRpb25OYW1lIiwicXVlcnkiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/validateOperation.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateOperation: () => (/* binding */ validateOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        \"query\",\n        \"operationName\",\n        \"variables\",\n        \"extensions\",\n        \"context\"\n    ];\n    for(var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++){\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(44, key);\n        }\n    }\n    return operation;\n} //# sourceMappingURL=validateOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy92YWxpZGF0ZU9wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUM5RCxTQUFTQyxrQkFBa0JDLFNBQVM7SUFDdkMsSUFBSUMsbUJBQW1CO1FBQ25CO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNELElBQUssSUFBSUMsS0FBSyxHQUFHQyxLQUFLQyxPQUFPQyxJQUFJLENBQUNMLFlBQVlFLEtBQUtDLEdBQUdHLE1BQU0sRUFBRUosS0FBTTtRQUNoRSxJQUFJSyxNQUFNSixFQUFFLENBQUNELEdBQUc7UUFDaEIsSUFBSUQsaUJBQWlCTyxPQUFPLENBQUNELE9BQU8sR0FBRztZQUNuQyxNQUFNVCw4RUFBaUJBLENBQUMsSUFBSVM7UUFDaEM7SUFDSjtJQUNBLE9BQU9QO0FBQ1gsRUFDQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy92YWxpZGF0ZU9wZXJhdGlvbi5qcz8wZjA4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5ld0ludmFyaWFudEVycm9yIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcGVyYXRpb24ob3BlcmF0aW9uKSB7XG4gICAgdmFyIE9QRVJBVElPTl9GSUVMRFMgPSBbXG4gICAgICAgIFwicXVlcnlcIixcbiAgICAgICAgXCJvcGVyYXRpb25OYW1lXCIsXG4gICAgICAgIFwidmFyaWFibGVzXCIsXG4gICAgICAgIFwiZXh0ZW5zaW9uc1wiLFxuICAgICAgICBcImNvbnRleHRcIixcbiAgICBdO1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhvcGVyYXRpb24pOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICBpZiAoT1BFUkFUSU9OX0ZJRUxEUy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXdJbnZhcmlhbnRFcnJvcig0NCwga2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3BlcmF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGVPcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIm5ld0ludmFyaWFudEVycm9yIiwidmFsaWRhdGVPcGVyYXRpb24iLCJvcGVyYXRpb24iLCJPUEVSQVRJT05fRklFTERTIiwiX2kiLCJfYSIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJrZXkiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/context/ApolloConsumer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/context/ApolloConsumer.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloConsumer: () => (/* binding */ ApolloConsumer)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _ApolloContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ApolloContext.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n\n\n\nvar ApolloConsumer = function(props) {\n    var ApolloContext = (0,_ApolloContext_js__WEBPACK_IMPORTED_MODULE_2__.getApolloContext)();\n    return rehackt__WEBPACK_IMPORTED_MODULE_1__.createElement(ApolloContext.Consumer, null, function(context) {\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(context && context.client, 45);\n        return props.children(context.client);\n    });\n}; //# sourceMappingURL=ApolloConsumer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Db25zdW1lci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZEO0FBQzVCO0FBQ3FCO0FBQy9DLElBQUlHLGlCQUFpQixTQUFVQyxLQUFLO0lBQ3ZDLElBQUlDLGdCQUFnQkgsbUVBQWdCQTtJQUNwQyxPQUFRRCxrREFBbUIsQ0FBQ0ksY0FBY0UsUUFBUSxFQUFFLE1BQU0sU0FBVUMsT0FBTztRQUN2RVIsc0VBQVNBLENBQUNRLFdBQVdBLFFBQVFDLE1BQU0sRUFBRTtRQUNyQyxPQUFPTCxNQUFNTSxRQUFRLENBQUNGLFFBQVFDLE1BQU07SUFDeEM7QUFDSixFQUFFLENBQ0YsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3JlYWN0L2NvbnRleHQvQXBvbGxvQ29uc3VtZXIuanM/OTUxOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG5pbXBvcnQgeyBnZXRBcG9sbG9Db250ZXh0IH0gZnJvbSBcIi4vQXBvbGxvQ29udGV4dC5qc1wiO1xuZXhwb3J0IHZhciBBcG9sbG9Db25zdW1lciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBBcG9sbG9Db250ZXh0ID0gZ2V0QXBvbGxvQ29udGV4dCgpO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChBcG9sbG9Db250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBpbnZhcmlhbnQoY29udGV4dCAmJiBjb250ZXh0LmNsaWVudCwgNDUpO1xuICAgICAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW4oY29udGV4dC5jbGllbnQpO1xuICAgIH0pKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BcG9sbG9Db25zdW1lci5qcy5tYXAiXSwibmFtZXMiOlsiaW52YXJpYW50IiwiUmVhY3QiLCJnZXRBcG9sbG9Db250ZXh0IiwiQXBvbGxvQ29uc3VtZXIiLCJwcm9wcyIsIkFwb2xsb0NvbnRleHQiLCJjcmVhdGVFbGVtZW50IiwiQ29uc3VtZXIiLCJjb250ZXh0IiwiY2xpZW50IiwiY2hpbGRyZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/context/ApolloConsumer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/context/ApolloContext.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloContext: () => (/* binding */ getApolloContext),\n/* harmony export */   resetApolloContext: () => (/* binding */ resetApolloContext)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nvar contextKey = _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\nfunction getApolloContext() {\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(\"createContext\" in /*#__PURE__*/ (rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(rehackt__WEBPACK_IMPORTED_MODULE_0__, 2))), 46);\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext[contextKey];\n    if (!context) {\n        Object.defineProperty(rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext, contextKey, {\n            value: context = rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext({}),\n            enumerable: false,\n            writable: false,\n            configurable: true\n        });\n        context.displayName = \"ApolloContext\";\n    }\n    return context;\n}\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */ var resetApolloContext = getApolloContext; //# sourceMappingURL=ApolloContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Db250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUN1QjtBQUNLO0FBQzdELHdFQUF3RTtBQUN4RSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLDRFQUE0RTtBQUM1RSxJQUFJRyxhQUFhRiw2REFBWUEsR0FBR0csT0FBT0MsR0FBRyxDQUFDLHdCQUF3QjtBQUM1RCxTQUFTQztJQUNaSixzRUFBU0EsQ0FBQyxrTkFBd0JGLEVBQUU7SUFDcEMsSUFBSU8sVUFBVVAsa0RBQW1CLENBQUNHLFdBQVc7SUFDN0MsSUFBSSxDQUFDSSxTQUFTO1FBQ1ZFLE9BQU9DLGNBQWMsQ0FBQ1Ysa0RBQW1CLEVBQUVHLFlBQVk7WUFDbkRRLE9BQVFKLFVBQVVQLGtEQUFtQixDQUFDLENBQUM7WUFDdkNZLFlBQVk7WUFDWkMsVUFBVTtZQUNWQyxjQUFjO1FBQ2xCO1FBQ0FQLFFBQVFRLFdBQVcsR0FBRztJQUMxQjtJQUNBLE9BQU9SO0FBQ1g7QUFDQTs7OztDQUlDLEdBQ00sSUFBSVMscUJBQXFCVixpQkFBaUIsQ0FDakQseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3JlYWN0L2NvbnRleHQvQXBvbGxvQ29udGV4dC5qcz9mYzg0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG5pbXBvcnQgeyBjYW5Vc2VTeW1ib2wgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbi8vIFRvIG1ha2Ugc3VyZSBBcG9sbG8gQ2xpZW50IGRvZXNuJ3QgY3JlYXRlIG1vcmUgdGhhbiBvbmUgUmVhY3QgY29udGV4dFxuLy8gKHdoaWNoIGNhbiBsZWFkIHRvIHByb2JsZW1zIGxpa2UgaGF2aW5nIGFuIEFwb2xsbyBDbGllbnQgaW5zdGFuY2UgYWRkZWRcbi8vIGluIG9uZSBjb250ZXh0LCB0aGVuIGF0dGVtcHRpbmcgdG8gcmV0cmlldmUgaXQgZnJvbSBhbm90aGVyIGRpZmZlcmVudFxuLy8gY29udGV4dCksIGEgc2luZ2xlIEFwb2xsbyBjb250ZXh0IGlzIGNyZWF0ZWQgYW5kIHRyYWNrZWQgaW4gZ2xvYmFsIHN0YXRlLlxudmFyIGNvbnRleHRLZXkgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKFwiX19BUE9MTE9fQ09OVEVYVF9fXCIpIDogXCJfX0FQT0xMT19DT05URVhUX19cIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRBcG9sbG9Db250ZXh0KCkge1xuICAgIGludmFyaWFudChcImNyZWF0ZUNvbnRleHRcIiBpbiBSZWFjdCwgNDYpO1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dFtjb250ZXh0S2V5XTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0LmNyZWF0ZUNvbnRleHQsIGNvbnRleHRLZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiAoY29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe30pKSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgY29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXBvbGxvQ29udGV4dFwiO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBoYXMgbm8gXCJyZXNldHRpbmdcIiBlZmZlY3Qgc2luY2UgQXBvbGxvIENsaWVudCAzLjQuMTIsXG4gKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgQXBvbGxvIENsaWVudC5cbiAqIElmIHlvdSB3YW50IHRvIGdldCB0aGUgQXBvbGxvIENvbnRleHQsIHVzZSBgZ2V0QXBvbGxvQ29udGV4dGAgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IHZhciByZXNldEFwb2xsb0NvbnRleHQgPSBnZXRBcG9sbG9Db250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXBvbGxvQ29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJjYW5Vc2VTeW1ib2wiLCJpbnZhcmlhbnQiLCJjb250ZXh0S2V5IiwiU3ltYm9sIiwiZm9yIiwiZ2V0QXBvbGxvQ29udGV4dCIsImNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImRpc3BsYXlOYW1lIiwicmVzZXRBcG9sbG9Db250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/context/ApolloProvider.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/context/ApolloProvider.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloProvider: () => (/* binding */ ApolloProvider)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _ApolloContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ApolloContext.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n\n\n\n\nvar ApolloProvider = function(_a) {\n    var client = _a.client, children = _a.children;\n    var ApolloContext = (0,_ApolloContext_js__WEBPACK_IMPORTED_MODULE_2__.getApolloContext)();\n    var parentContext = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext(ApolloContext);\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, parentContext), {\n            client: client || parentContext.client\n        });\n    }, [\n        parentContext,\n        client\n    ]);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.client, 47);\n    return rehackt__WEBPACK_IMPORTED_MODULE_1__.createElement(ApolloContext.Provider, {\n        value: context\n    }, children);\n}; //# sourceMappingURL=ApolloProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Qcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFpQztBQUM0QjtBQUM1QjtBQUNxQjtBQUMvQyxJQUFJSSxpQkFBaUIsU0FBVUMsRUFBRTtJQUNwQyxJQUFJQyxTQUFTRCxHQUFHQyxNQUFNLEVBQUVDLFdBQVdGLEdBQUdFLFFBQVE7SUFDOUMsSUFBSUMsZ0JBQWdCTCxtRUFBZ0JBO0lBQ3BDLElBQUlNLGdCQUFnQlAsK0NBQWdCLENBQUNNO0lBQ3JDLElBQUlHLFVBQVVULDRDQUFhLENBQUM7UUFDeEIsT0FBT0YsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR1MsZ0JBQWdCO1lBQUVILFFBQVFBLFVBQVVHLGNBQWNILE1BQU07UUFBQztJQUMxRixHQUFHO1FBQUNHO1FBQWVIO0tBQU87SUFDMUJMLHNFQUFTQSxDQUFDVSxRQUFRTCxNQUFNLEVBQUU7SUFDMUIsT0FBUUosa0RBQW1CLENBQUNNLGNBQWNNLFFBQVEsRUFBRTtRQUFFQyxPQUFPSjtJQUFRLEdBQUdKO0FBQzVFLEVBQUUsQ0FDRiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Qcm92aWRlci5qcz9lOTJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG5pbXBvcnQgeyBnZXRBcG9sbG9Db250ZXh0IH0gZnJvbSBcIi4vQXBvbGxvQ29udGV4dC5qc1wiO1xuZXhwb3J0IHZhciBBcG9sbG9Qcm92aWRlciA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjbGllbnQgPSBfYS5jbGllbnQsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW47XG4gICAgdmFyIEFwb2xsb0NvbnRleHQgPSBnZXRBcG9sbG9Db250ZXh0KCk7XG4gICAgdmFyIHBhcmVudENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEFwb2xsb0NvbnRleHQpO1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcGFyZW50Q29udGV4dCksIHsgY2xpZW50OiBjbGllbnQgfHwgcGFyZW50Q29udGV4dC5jbGllbnQgfSk7XG4gICAgfSwgW3BhcmVudENvbnRleHQsIGNsaWVudF0pO1xuICAgIGludmFyaWFudChjb250ZXh0LmNsaWVudCwgNDcpO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChBcG9sbG9Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjb250ZXh0IH0sIGNoaWxkcmVuKSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXBvbGxvUHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiaW52YXJpYW50IiwiUmVhY3QiLCJnZXRBcG9sbG9Db250ZXh0IiwiQXBvbGxvUHJvdmlkZXIiLCJfYSIsImNsaWVudCIsImNoaWxkcmVuIiwiQXBvbGxvQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJ1c2VDb250ZXh0IiwiY29udGV4dCIsInVzZU1lbW8iLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/context/ApolloProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/constants.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/constants.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   skipToken: () => (/* binding */ skipToken)\n/* harmony export */ });\nvar skipToken = Symbol.for(\"apollo.skipToken\"); //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxJQUFJQSxZQUFZQyxPQUFPQyxHQUFHLENBQUMsb0JBQW9CLENBQ3RELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy9jb25zdGFudHMuanM/YTg5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHNraXBUb2tlbiA9IFN5bWJvbC5mb3IoXCJhcG9sbG8uc2tpcFRva2VuXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJza2lwVG9rZW4iLCJTeW1ib2wiLCJmb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   skipToken: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_13__.skipToken),\n/* harmony export */   useApolloClient: () => (/* reexport safe */ _useApolloClient_js__WEBPACK_IMPORTED_MODULE_1__.useApolloClient),\n/* harmony export */   useBackgroundQuery: () => (/* reexport safe */ _useBackgroundQuery_js__WEBPACK_IMPORTED_MODULE_9__.useBackgroundQuery),\n/* harmony export */   useFragment: () => (/* reexport safe */ _useFragment_js__WEBPACK_IMPORTED_MODULE_7__.useFragment),\n/* harmony export */   useLazyQuery: () => (/* reexport safe */ _useLazyQuery_js__WEBPACK_IMPORTED_MODULE_2__.useLazyQuery),\n/* harmony export */   useLoadableQuery: () => (/* reexport safe */ _useLoadableQuery_js__WEBPACK_IMPORTED_MODULE_10__.useLoadableQuery),\n/* harmony export */   useMutation: () => (/* reexport safe */ _useMutation_js__WEBPACK_IMPORTED_MODULE_3__.useMutation),\n/* harmony export */   useQuery: () => (/* reexport safe */ _useQuery_js__WEBPACK_IMPORTED_MODULE_4__.useQuery),\n/* harmony export */   useQueryRefHandlers: () => (/* reexport safe */ _useQueryRefHandlers_js__WEBPACK_IMPORTED_MODULE_11__.useQueryRefHandlers),\n/* harmony export */   useReactiveVar: () => (/* reexport safe */ _useReactiveVar_js__WEBPACK_IMPORTED_MODULE_6__.useReactiveVar),\n/* harmony export */   useReadQuery: () => (/* reexport safe */ _useReadQuery_js__WEBPACK_IMPORTED_MODULE_12__.useReadQuery),\n/* harmony export */   useSubscription: () => (/* reexport safe */ _useSubscription_js__WEBPACK_IMPORTED_MODULE_5__.useSubscription),\n/* harmony export */   useSuspenseQuery: () => (/* reexport safe */ _useSuspenseQuery_js__WEBPACK_IMPORTED_MODULE_8__.useSuspenseQuery)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _useLazyQuery_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useLazyQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useLazyQuery.js\");\n/* harmony import */ var _useMutation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useMutation.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useMutation.js\");\n/* harmony import */ var _useQuery_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js\");\n/* harmony import */ var _useSubscription_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useSubscription.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSubscription.js\");\n/* harmony import */ var _useReactiveVar_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useReactiveVar.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useReactiveVar.js\");\n/* harmony import */ var _useFragment_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useFragment.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useFragment.js\");\n/* harmony import */ var _useSuspenseQuery_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useSuspenseQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSuspenseQuery.js\");\n/* harmony import */ var _useBackgroundQuery_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./useBackgroundQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useBackgroundQuery.js\");\n/* harmony import */ var _useLoadableQuery_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./useLoadableQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useLoadableQuery.js\");\n/* harmony import */ var _useQueryRefHandlers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./useQueryRefHandlers.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useQueryRefHandlers.js\");\n/* harmony import */ var _useReadQuery_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./useReadQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useReadQuery.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/constants.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBDO0FBQ0w7QUFDSDtBQUNEO0FBQ1E7QUFDSjtBQUNEO0FBQ0g7QUFDd0I7QUFDSTtBQUNKO0FBQ007QUFDZDtBQUNOLENBQzNDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy9pbmRleC5qcz9iZmFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi91c2VBcG9sbG9DbGllbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VzZUxhenlRdWVyeS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXNlTXV0YXRpb24uanNcIjtcbmV4cG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSBcIi4vdXNlUXVlcnkuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VzZVN1YnNjcmlwdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXNlUmVhY3RpdmVWYXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VzZUZyYWdtZW50LmpzXCI7XG5leHBvcnQgeyB1c2VTdXNwZW5zZVF1ZXJ5IH0gZnJvbSBcIi4vdXNlU3VzcGVuc2VRdWVyeS5qc1wiO1xuZXhwb3J0IHsgdXNlQmFja2dyb3VuZFF1ZXJ5IH0gZnJvbSBcIi4vdXNlQmFja2dyb3VuZFF1ZXJ5LmpzXCI7XG5leHBvcnQgeyB1c2VMb2FkYWJsZVF1ZXJ5IH0gZnJvbSBcIi4vdXNlTG9hZGFibGVRdWVyeS5qc1wiO1xuZXhwb3J0IHsgdXNlUXVlcnlSZWZIYW5kbGVycyB9IGZyb20gXCIuL3VzZVF1ZXJ5UmVmSGFuZGxlcnMuanNcIjtcbmV4cG9ydCB7IHVzZVJlYWRRdWVyeSB9IGZyb20gXCIuL3VzZVJlYWRRdWVyeS5qc1wiO1xuZXhwb3J0IHsgc2tpcFRva2VuIH0gZnJvbSBcIi4vY29uc3RhbnRzLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsidXNlUXVlcnkiLCJ1c2VTdXNwZW5zZVF1ZXJ5IiwidXNlQmFja2dyb3VuZFF1ZXJ5IiwidXNlTG9hZGFibGVRdWVyeSIsInVzZVF1ZXJ5UmVmSGFuZGxlcnMiLCJ1c2VSZWFkUXVlcnkiLCJza2lwVG9rZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/__use.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/__use.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __use: () => (/* binding */ __use)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/promises/decoration.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n\n\n// Prevent webpack from complaining about our feature detection of the\n// use property of the React namespace, which is expected not\n// to exist when using current stable versions, and that's fine.\nvar useKey = \"use\";\nvar realHook = /*#__PURE__*/ (rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(rehackt__WEBPACK_IMPORTED_MODULE_0__, 2)))[useKey];\n// This is named with two underscores to allow this hook to evade typical rules of\n// hooks (i.e. it can be used conditionally)\nvar __use = realHook || function __use(promise) {\n    var statefulPromise = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.wrapPromiseWithState)(promise);\n    switch(statefulPromise.status){\n        case \"pending\":\n            throw statefulPromise;\n        case \"rejected\":\n            throw statefulPromise.reason;\n        case \"fulfilled\":\n            return statefulPromise.value;\n    }\n}; //# sourceMappingURL=__use.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvX191c2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtRTtBQUNsQztBQUNqQyxzRUFBc0U7QUFDdEUsNkRBQTZEO0FBQzdELGdFQUFnRTtBQUNoRSxJQUFJRSxTQUFTO0FBQ2IsSUFBSUMsV0FBV0YsK0xBQUssQ0FBQ0MsT0FBTztBQUM1QixrRkFBa0Y7QUFDbEYsNENBQTRDO0FBQ3JDLElBQUlFLFFBQVFELFlBQ2YsU0FBU0MsTUFBTUMsT0FBTztJQUNsQixJQUFJQyxrQkFBa0JOLHlFQUFvQkEsQ0FBQ0s7SUFDM0MsT0FBUUMsZ0JBQWdCQyxNQUFNO1FBQzFCLEtBQUs7WUFDRCxNQUFNRDtRQUNWLEtBQUs7WUFDRCxNQUFNQSxnQkFBZ0JFLE1BQU07UUFDaEMsS0FBSztZQUNELE9BQU9GLGdCQUFnQkcsS0FBSztJQUNwQztBQUNKLEVBQUUsQ0FDTixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvX191c2UuanM/ZDJmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3cmFwUHJvbWlzZVdpdGhTdGF0ZSB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG4vLyBQcmV2ZW50IHdlYnBhY2sgZnJvbSBjb21wbGFpbmluZyBhYm91dCBvdXIgZmVhdHVyZSBkZXRlY3Rpb24gb2YgdGhlXG4vLyB1c2UgcHJvcGVydHkgb2YgdGhlIFJlYWN0IG5hbWVzcGFjZSwgd2hpY2ggaXMgZXhwZWN0ZWQgbm90XG4vLyB0byBleGlzdCB3aGVuIHVzaW5nIGN1cnJlbnQgc3RhYmxlIHZlcnNpb25zLCBhbmQgdGhhdCdzIGZpbmUuXG52YXIgdXNlS2V5ID0gXCJ1c2VcIjtcbnZhciByZWFsSG9vayA9IFJlYWN0W3VzZUtleV07XG4vLyBUaGlzIGlzIG5hbWVkIHdpdGggdHdvIHVuZGVyc2NvcmVzIHRvIGFsbG93IHRoaXMgaG9vayB0byBldmFkZSB0eXBpY2FsIHJ1bGVzIG9mXG4vLyBob29rcyAoaS5lLiBpdCBjYW4gYmUgdXNlZCBjb25kaXRpb25hbGx5KVxuZXhwb3J0IHZhciBfX3VzZSA9IHJlYWxIb29rIHx8XG4gICAgZnVuY3Rpb24gX191c2UocHJvbWlzZSkge1xuICAgICAgICB2YXIgc3RhdGVmdWxQcm9taXNlID0gd3JhcFByb21pc2VXaXRoU3RhdGUocHJvbWlzZSk7XG4gICAgICAgIHN3aXRjaCAoc3RhdGVmdWxQcm9taXNlLnN0YXR1cykge1xuICAgICAgICAgICAgY2FzZSBcInBlbmRpbmdcIjpcbiAgICAgICAgICAgICAgICB0aHJvdyBzdGF0ZWZ1bFByb21pc2U7XG4gICAgICAgICAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgICAgICAgICAgICB0aHJvdyBzdGF0ZWZ1bFByb21pc2UucmVhc29uO1xuICAgICAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZWZ1bFByb21pc2UudmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X191c2UuanMubWFwIl0sIm5hbWVzIjpbIndyYXBQcm9taXNlV2l0aFN0YXRlIiwiUmVhY3QiLCJ1c2VLZXkiLCJyZWFsSG9vayIsIl9fdXNlIiwicHJvbWlzZSIsInN0YXRlZnVsUHJvbWlzZSIsInN0YXR1cyIsInJlYXNvbiIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/__use.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDeepMemo: () => (/* binding */ useDeepMemo)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n\n\nfunction useDeepMemo(memoFn, deps) {\n    var ref = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    if (!ref.current || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(ref.current.deps, deps)) {\n        ref.current = {\n            value: memoFn(),\n            deps: deps\n        };\n    }\n    return ref.current.value;\n} //# sourceMappingURL=useDeepMemo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlRGVlcE1lbW8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ0s7QUFDL0IsU0FBU0UsWUFBWUMsTUFBTSxFQUFFQyxJQUFJO0lBQ3BDLElBQUlDLE1BQU1MLDJDQUFZO0lBQ3RCLElBQUksQ0FBQ0ssSUFBSUUsT0FBTyxJQUFJLENBQUNOLG9EQUFLQSxDQUFDSSxJQUFJRSxPQUFPLENBQUNILElBQUksRUFBRUEsT0FBTztRQUNoREMsSUFBSUUsT0FBTyxHQUFHO1lBQUVDLE9BQU9MO1lBQVVDLE1BQU1BO1FBQUs7SUFDaEQ7SUFDQSxPQUFPQyxJQUFJRSxPQUFPLENBQUNDLEtBQUs7QUFDNUIsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlRGVlcE1lbW8uanM/ZjE3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVoYWNrdFwiO1xuaW1wb3J0IHsgZXF1YWwgfSBmcm9tIFwiQHdyeS9lcXVhbGl0eVwiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURlZXBNZW1vKG1lbW9GbiwgZGVwcykge1xuICAgIHZhciByZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgICBpZiAoIXJlZi5jdXJyZW50IHx8ICFlcXVhbChyZWYuY3VycmVudC5kZXBzLCBkZXBzKSkge1xuICAgICAgICByZWYuY3VycmVudCA9IHsgdmFsdWU6IG1lbW9GbigpLCBkZXBzOiBkZXBzIH07XG4gICAgfVxuICAgIHJldHVybiByZWYuY3VycmVudC52YWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZURlZXBNZW1vLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsImVxdWFsIiwidXNlRGVlcE1lbW8iLCJtZW1vRm4iLCJkZXBzIiwicmVmIiwidXNlUmVmIiwiY3VycmVudCIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n// use canUseDOM here instead of canUseLayoutEffect because we want to be able\n// to use useLayoutEffect in our jest tests. useLayoutEffect seems to work fine\n// in useSuspenseQuery tests, but to honor the original comment about the\n// warnings for useSyncExternalStore implementation, canUseLayoutEffect is left\n// alone.\nvar useIsomorphicLayoutEffect = _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.canUseDOM ? rehackt__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : rehackt__WEBPACK_IMPORTED_MODULE_0__.useEffect; //# sourceMappingURL=useIsomorphicLayoutEffect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUM7QUFDdUI7QUFDeEQsOEVBQThFO0FBQzlFLCtFQUErRTtBQUMvRSx5RUFBeUU7QUFDekUsK0VBQStFO0FBQy9FLFNBQVM7QUFDRixJQUFJRSw0QkFBNEJELDBEQUFTQSxHQUFHRCxvREFBcUIsR0FBR0EsOENBQWUsQ0FBQyxDQUMzRixxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcz80MjRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG5pbXBvcnQgeyBjYW5Vc2VET00gfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG4vLyB1c2UgY2FuVXNlRE9NIGhlcmUgaW5zdGVhZCBvZiBjYW5Vc2VMYXlvdXRFZmZlY3QgYmVjYXVzZSB3ZSB3YW50IHRvIGJlIGFibGVcbi8vIHRvIHVzZSB1c2VMYXlvdXRFZmZlY3QgaW4gb3VyIGplc3QgdGVzdHMuIHVzZUxheW91dEVmZmVjdCBzZWVtcyB0byB3b3JrIGZpbmVcbi8vIGluIHVzZVN1c3BlbnNlUXVlcnkgdGVzdHMsIGJ1dCB0byBob25vciB0aGUgb3JpZ2luYWwgY29tbWVudCBhYm91dCB0aGVcbi8vIHdhcm5pbmdzIGZvciB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBpbXBsZW1lbnRhdGlvbiwgY2FuVXNlTGF5b3V0RWZmZWN0IGlzIGxlZnRcbi8vIGFsb25lLlxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gY2FuVXNlRE9NID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJjYW5Vc2VET00iLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlRWZmZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/useRenderGuard.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/useRenderGuard.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useRenderGuard: () => (/* binding */ useRenderGuard)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n\nvar Ctx;\nfunction noop() {}\nfunction useRenderGuard() {\n    if (!Ctx) {\n        // we want the intialization to be lazy because `createContext` would error on import in a RSC\n        Ctx = rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n    }\n    return rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(/**\n     * @returns true if the hook was called during render\n     */ function() {\n        var orig = console.error;\n        try {\n            console.error = noop;\n            /**\n             * `useContext` can be called conditionally during render, so this is safe.\n             * (Also, during render we would want to throw as a reaction to this anyways, so it\n             * wouldn't even matter if we got the order of hooks mixed up...)\n             *\n             * They cannot however be called outside of Render, and that's what we're testing here.\n             *\n             * Different versions of React have different behaviour on an invalid hook call:\n             *\n             * React 16.8 - 17: throws an error\n             * https://github.com/facebook/react/blob/2b93d686e359c7afa299e2ec5cf63160a32a1155/packages/react/src/ReactHooks.js#L18-L26\n             *\n             * React 18 & 19: `console.error` in development, then `resolveDispatcher` returns `null` and a member access on `null` throws.\n             * https://github.com/facebook/react/blob/58e8304483ebfadd02a295339b5e9a989ac98c6e/packages/react/src/ReactHooks.js#L28-L35\n             */ rehackt__WEBPACK_IMPORTED_MODULE_0__.useContext(Ctx);\n            return true;\n        } catch (e) {\n            return false;\n        } finally{\n            console.error = orig;\n        }\n    }, []);\n} //# sourceMappingURL=useRenderGuard.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlUmVuZGVyR3VhcmQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUM7QUFDakMsSUFBSUM7QUFDSixTQUFTQyxRQUFTO0FBQ1gsU0FBU0M7SUFDWixJQUFJLENBQUNGLEtBQUs7UUFDTiw4RkFBOEY7UUFDOUZBLE1BQU1ELGtEQUFtQixDQUFDO0lBQzlCO0lBQ0EsT0FBT0EsZ0RBQWlCLENBQ3hCOztLQUVDLEdBQUc7UUFDQSxJQUFJTSxPQUFPQyxRQUFRQyxLQUFLO1FBQ3hCLElBQUk7WUFDQUQsUUFBUUMsS0FBSyxHQUFHTjtZQUNoQjs7Ozs7Ozs7Ozs7Ozs7YUFjQyxHQUNERiwrQ0FBbUQsQ0FBQ0M7WUFDcEQsT0FBTztRQUNYLEVBQ0EsT0FBT1EsR0FBRztZQUNOLE9BQU87UUFDWCxTQUNRO1lBQ0pGLFFBQVFDLEtBQUssR0FBR0Y7UUFDcEI7SUFDSixHQUFHLEVBQUU7QUFDVCxFQUNBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy9pbnRlcm5hbC91c2VSZW5kZXJHdWFyZC5qcz82YTcxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG52YXIgQ3R4O1xuZnVuY3Rpb24gbm9vcCgpIHsgfVxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlbmRlckd1YXJkKCkge1xuICAgIGlmICghQ3R4KSB7XG4gICAgICAgIC8vIHdlIHdhbnQgdGhlIGludGlhbGl6YXRpb24gdG8gYmUgbGF6eSBiZWNhdXNlIGBjcmVhdGVDb250ZXh0YCB3b3VsZCBlcnJvciBvbiBpbXBvcnQgaW4gYSBSU0NcbiAgICAgICAgQ3R4ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGhvb2sgd2FzIGNhbGxlZCBkdXJpbmcgcmVuZGVyXG4gICAgICovIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9yaWcgPSBjb25zb2xlLmVycm9yO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvciA9IG5vb3A7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGB1c2VDb250ZXh0YCBjYW4gYmUgY2FsbGVkIGNvbmRpdGlvbmFsbHkgZHVyaW5nIHJlbmRlciwgc28gdGhpcyBpcyBzYWZlLlxuICAgICAgICAgICAgICogKEFsc28sIGR1cmluZyByZW5kZXIgd2Ugd291bGQgd2FudCB0byB0aHJvdyBhcyBhIHJlYWN0aW9uIHRvIHRoaXMgYW55d2F5cywgc28gaXRcbiAgICAgICAgICAgICAqIHdvdWxkbid0IGV2ZW4gbWF0dGVyIGlmIHdlIGdvdCB0aGUgb3JkZXIgb2YgaG9va3MgbWl4ZWQgdXAuLi4pXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVGhleSBjYW5ub3QgaG93ZXZlciBiZSBjYWxsZWQgb3V0c2lkZSBvZiBSZW5kZXIsIGFuZCB0aGF0J3Mgd2hhdCB3ZSdyZSB0ZXN0aW5nIGhlcmUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogRGlmZmVyZW50IHZlcnNpb25zIG9mIFJlYWN0IGhhdmUgZGlmZmVyZW50IGJlaGF2aW91ciBvbiBhbiBpbnZhbGlkIGhvb2sgY2FsbDpcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBSZWFjdCAxNi44IC0gMTc6IHRocm93cyBhbiBlcnJvclxuICAgICAgICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMmI5M2Q2ODZlMzU5YzdhZmEyOTllMmVjNWNmNjMxNjBhMzJhMTE1NS9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3RIb29rcy5qcyNMMTgtTDI2XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogUmVhY3QgMTggJiAxOTogYGNvbnNvbGUuZXJyb3JgIGluIGRldmVsb3BtZW50LCB0aGVuIGByZXNvbHZlRGlzcGF0Y2hlcmAgcmV0dXJucyBgbnVsbGAgYW5kIGEgbWVtYmVyIGFjY2VzcyBvbiBgbnVsbGAgdGhyb3dzLlxuICAgICAgICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvNThlODMwNDQ4M2ViZmFkZDAyYTI5NTMzOWI1ZTlhOTg5YWM5OGM2ZS9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3RIb29rcy5qcyNMMjgtTDM1XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlYWN0W1widXNlQ29udGV4dFwiIC8qIGhpZGUgdGhpcyBmcm9tIHRoZSBsaW50ZXIgKi9dKEN0eCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvciA9IG9yaWc7XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VSZW5kZXJHdWFyZC5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJDdHgiLCJub29wIiwidXNlUmVuZGVyR3VhcmQiLCJjcmVhdGVDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJvcmlnIiwiY29uc29sZSIsImVycm9yIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/useRenderGuard.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/wrapHook.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapHook: () => (/* binding */ wrapHook)\n/* harmony export */ });\nvar wrapperSymbol = Symbol.for(\"apollo.hook.wrappers\");\n/**\n * @internal\n *\n * Makes an Apollo Client hook \"wrappable\".\n * That means that the Apollo Client instance can expose a \"wrapper\" that will be\n * used to wrap the original hook implementation with additional logic.\n * @example\n * ```tsx\n * // this is already done in `@apollo/client` for all wrappable hooks (see `WrappableHooks`)\n * // following this pattern\n * function useQuery() {\n *   return wrapHook('useQuery', _useQuery, options.client)(query, options);\n * }\n * function _useQuery(query, options) {\n *   // original implementation\n * }\n *\n * // this is what a library like `@apollo/client-react-streaming` would do\n * class ApolloClientWithStreaming extends ApolloClient {\n *   constructor(options) {\n *     super(options);\n *     this.queryManager[Symbol.for(\"apollo.hook.wrappers\")] = {\n *       useQuery: (original) => (query, options) => {\n *         console.log(\"useQuery was called with options\", options);\n *         return original(query, options);\n *       }\n *     }\n *   }\n * }\n *\n * // this will now log the options and then call the original `useQuery`\n * const client = new ApolloClientWithStreaming({ ... });\n * useQuery(query, { client });\n * ```\n */ function wrapHook(hookName, useHook, clientOrObsQuery) {\n    var queryManager = clientOrObsQuery[\"queryManager\"];\n    var wrappers = queryManager && queryManager[wrapperSymbol];\n    var wrapper = wrappers && wrappers[hookName];\n    return wrapper ? wrapper(useHook) : useHook;\n} //# sourceMappingURL=wrapHook.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvd3JhcEhvb2suanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGdCQUFnQkMsT0FBT0MsR0FBRyxDQUFDO0FBQy9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0NDLEdBQ00sU0FBU0MsU0FBU0MsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLGdCQUFnQjtJQUN4RCxJQUFJQyxlQUFlRCxnQkFBZ0IsQ0FBQyxlQUFlO0lBQ25ELElBQUlFLFdBQVdELGdCQUFnQkEsWUFBWSxDQUFDUCxjQUFjO0lBQzFELElBQUlTLFVBQVVELFlBQVlBLFFBQVEsQ0FBQ0osU0FBUztJQUM1QyxPQUFPSyxVQUFVQSxRQUFRSixXQUFXQTtBQUN4QyxFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy9pbnRlcm5hbC93cmFwSG9vay5qcz82NjNkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB3cmFwcGVyU3ltYm9sID0gU3ltYm9sLmZvcihcImFwb2xsby5ob29rLndyYXBwZXJzXCIpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBNYWtlcyBhbiBBcG9sbG8gQ2xpZW50IGhvb2sgXCJ3cmFwcGFibGVcIi5cbiAqIFRoYXQgbWVhbnMgdGhhdCB0aGUgQXBvbGxvIENsaWVudCBpbnN0YW5jZSBjYW4gZXhwb3NlIGEgXCJ3cmFwcGVyXCIgdGhhdCB3aWxsIGJlXG4gKiB1c2VkIHRvIHdyYXAgdGhlIG9yaWdpbmFsIGhvb2sgaW1wbGVtZW50YXRpb24gd2l0aCBhZGRpdGlvbmFsIGxvZ2ljLlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogLy8gdGhpcyBpcyBhbHJlYWR5IGRvbmUgaW4gYEBhcG9sbG8vY2xpZW50YCBmb3IgYWxsIHdyYXBwYWJsZSBob29rcyAoc2VlIGBXcmFwcGFibGVIb29rc2ApXG4gKiAvLyBmb2xsb3dpbmcgdGhpcyBwYXR0ZXJuXG4gKiBmdW5jdGlvbiB1c2VRdWVyeSgpIHtcbiAqICAgcmV0dXJuIHdyYXBIb29rKCd1c2VRdWVyeScsIF91c2VRdWVyeSwgb3B0aW9ucy5jbGllbnQpKHF1ZXJ5LCBvcHRpb25zKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIF91c2VRdWVyeShxdWVyeSwgb3B0aW9ucykge1xuICogICAvLyBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvblxuICogfVxuICpcbiAqIC8vIHRoaXMgaXMgd2hhdCBhIGxpYnJhcnkgbGlrZSBgQGFwb2xsby9jbGllbnQtcmVhY3Qtc3RyZWFtaW5nYCB3b3VsZCBkb1xuICogY2xhc3MgQXBvbGxvQ2xpZW50V2l0aFN0cmVhbWluZyBleHRlbmRzIEFwb2xsb0NsaWVudCB7XG4gKiAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAqICAgICBzdXBlcihvcHRpb25zKTtcbiAqICAgICB0aGlzLnF1ZXJ5TWFuYWdlcltTeW1ib2wuZm9yKFwiYXBvbGxvLmhvb2sud3JhcHBlcnNcIildID0ge1xuICogICAgICAgdXNlUXVlcnk6IChvcmlnaW5hbCkgPT4gKHF1ZXJ5LCBvcHRpb25zKSA9PiB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKFwidXNlUXVlcnkgd2FzIGNhbGxlZCB3aXRoIG9wdGlvbnNcIiwgb3B0aW9ucyk7XG4gKiAgICAgICAgIHJldHVybiBvcmlnaW5hbChxdWVyeSwgb3B0aW9ucyk7XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICB9XG4gKiB9XG4gKlxuICogLy8gdGhpcyB3aWxsIG5vdyBsb2cgdGhlIG9wdGlvbnMgYW5kIHRoZW4gY2FsbCB0aGUgb3JpZ2luYWwgYHVzZVF1ZXJ5YFxuICogY29uc3QgY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudFdpdGhTdHJlYW1pbmcoeyAuLi4gfSk7XG4gKiB1c2VRdWVyeShxdWVyeSwgeyBjbGllbnQgfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBIb29rKGhvb2tOYW1lLCB1c2VIb29rLCBjbGllbnRPck9ic1F1ZXJ5KSB7XG4gICAgdmFyIHF1ZXJ5TWFuYWdlciA9IGNsaWVudE9yT2JzUXVlcnlbXCJxdWVyeU1hbmFnZXJcIl07XG4gICAgdmFyIHdyYXBwZXJzID0gcXVlcnlNYW5hZ2VyICYmIHF1ZXJ5TWFuYWdlclt3cmFwcGVyU3ltYm9sXTtcbiAgICB2YXIgd3JhcHBlciA9IHdyYXBwZXJzICYmIHdyYXBwZXJzW2hvb2tOYW1lXTtcbiAgICByZXR1cm4gd3JhcHBlciA/IHdyYXBwZXIodXNlSG9vaykgOiB1c2VIb29rO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEhvb2suanMubWFwIl0sIm5hbWVzIjpbIndyYXBwZXJTeW1ib2wiLCJTeW1ib2wiLCJmb3IiLCJ3cmFwSG9vayIsImhvb2tOYW1lIiwidXNlSG9vayIsImNsaWVudE9yT2JzUXVlcnkiLCJxdWVyeU1hbmFnZXIiLCJ3cmFwcGVycyIsIndyYXBwZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useApolloClient.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useApolloClient: () => (/* binding */ useApolloClient)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n\n\n\n/**\n * @example\n * ```jsx\n * import { useApolloClient } from '@apollo/client';\n *\n * function SomeComponent() {\n *   const client = useApolloClient();\n *   // `client` is now set to the `ApolloClient` instance being used by the\n *   // application (that was configured using something like `ApolloProvider`)\n * }\n * ```\n *\n * @since 3.0.0\n * @returns The `ApolloClient` instance being used by the application.\n */ function useApolloClient(override) {\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext((0,_context_index_js__WEBPACK_IMPORTED_MODULE_2__.getApolloContext)());\n    var client = override || context.client;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!client, 50);\n    return client;\n} //# sourceMappingURL=useApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlQXBvbGxvQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkQ7QUFDNUI7QUFDc0I7QUFDdkQ7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDTSxTQUFTRyxnQkFBZ0JDLFFBQVE7SUFDcEMsSUFBSUMsVUFBVUosK0NBQWdCLENBQUNDLG1FQUFnQkE7SUFDL0MsSUFBSUssU0FBU0gsWUFBWUMsUUFBUUUsTUFBTTtJQUN2Q1Asc0VBQVNBLENBQUMsQ0FBQyxDQUFDTyxRQUFRO0lBQ3BCLE9BQU9BO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlQXBvbGxvQ2xpZW50LmpzPzQzY2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVoYWNrdFwiO1xuaW1wb3J0IHsgZ2V0QXBvbGxvQ29udGV4dCB9IGZyb20gXCIuLi9jb250ZXh0L2luZGV4LmpzXCI7XG4vKipcbiAqIEBleGFtcGxlXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IHVzZUFwb2xsb0NsaWVudCB9IGZyb20gJ0BhcG9sbG8vY2xpZW50JztcbiAqXG4gKiBmdW5jdGlvbiBTb21lQ29tcG9uZW50KCkge1xuICogICBjb25zdCBjbGllbnQgPSB1c2VBcG9sbG9DbGllbnQoKTtcbiAqICAgLy8gYGNsaWVudGAgaXMgbm93IHNldCB0byB0aGUgYEFwb2xsb0NsaWVudGAgaW5zdGFuY2UgYmVpbmcgdXNlZCBieSB0aGVcbiAqICAgLy8gYXBwbGljYXRpb24gKHRoYXQgd2FzIGNvbmZpZ3VyZWQgdXNpbmcgc29tZXRoaW5nIGxpa2UgYEFwb2xsb1Byb3ZpZGVyYClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBzaW5jZSAzLjAuMFxuICogQHJldHVybnMgVGhlIGBBcG9sbG9DbGllbnRgIGluc3RhbmNlIGJlaW5nIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXBvbGxvQ2xpZW50KG92ZXJyaWRlKSB7XG4gICAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KGdldEFwb2xsb0NvbnRleHQoKSk7XG4gICAgdmFyIGNsaWVudCA9IG92ZXJyaWRlIHx8IGNvbnRleHQuY2xpZW50O1xuICAgIGludmFyaWFudCghIWNsaWVudCwgNTApO1xuICAgIHJldHVybiBjbGllbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VBcG9sbG9DbGllbnQuanMubWFwIl0sIm5hbWVzIjpbImludmFyaWFudCIsIlJlYWN0IiwiZ2V0QXBvbGxvQ29udGV4dCIsInVzZUFwb2xsb0NsaWVudCIsIm92ZXJyaWRlIiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJjbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useBackgroundQuery.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useBackgroundQuery.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBackgroundQuery: () => (/* binding */ useBackgroundQuery)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/internal/cache/QueryReference.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\");\n/* harmony import */ var _useSuspenseQuery_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useSuspenseQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSuspenseQuery.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n\n\n\n\n\n\n\nfunction useBackgroundQuery(query, options) {\n    if (options === void 0) {\n        options = Object.create(null);\n    }\n    return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.wrapHook)(\"useBackgroundQuery\", _useBackgroundQuery, (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__.useApolloClient)(typeof options === \"object\" ? options.client : undefined))(query, options);\n}\nfunction _useBackgroundQuery(query, options) {\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__.useApolloClient)(options.client);\n    var suspenseCache = (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_3__.getSuspenseCache)(client);\n    var watchQueryOptions = (0,_useSuspenseQuery_js__WEBPACK_IMPORTED_MODULE_4__.useWatchQueryOptions)({\n        client: client,\n        query: query,\n        options: options\n    });\n    var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    // This ref tracks the first time query execution is enabled to determine\n    // whether to return a query ref or `undefined`. When initialized\n    // in a skipped state (either via `skip: true` or `skipToken`) we return\n    // `undefined` for the `queryRef` until the query has been enabled. Once\n    // enabled, a query ref is always returned regardless of whether the query is\n    // skipped again later.\n    var didFetchResult = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef(fetchPolicy !== \"standby\");\n    didFetchResult.current || (didFetchResult.current = fetchPolicy !== \"standby\");\n    var cacheKey = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([\n        query,\n        (0,_cache_index_js__WEBPACK_IMPORTED_MODULE_6__.canonicalStringify)(variables)\n    ], [].concat(queryKey), true);\n    var queryRef = suspenseCache.getQueryRef(cacheKey, function() {\n        return client.watchQuery(watchQueryOptions);\n    });\n    var _b = rehackt__WEBPACK_IMPORTED_MODULE_0__.useState((0,_internal_index_js__WEBPACK_IMPORTED_MODULE_7__.wrapQueryRef)(queryRef)), wrappedQueryRef = _b[0], setWrappedQueryRef = _b[1];\n    if ((0,_internal_index_js__WEBPACK_IMPORTED_MODULE_7__.unwrapQueryRef)(wrappedQueryRef) !== queryRef) {\n        setWrappedQueryRef((0,_internal_index_js__WEBPACK_IMPORTED_MODULE_7__.wrapQueryRef)(queryRef));\n    }\n    if (queryRef.didChangeOptions(watchQueryOptions)) {\n        var promise = queryRef.applyOptions(watchQueryOptions);\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_7__.updateWrappedQueryRef)(wrappedQueryRef, promise);\n    }\n    // This prevents issues where rerendering useBackgroundQuery after the\n    // queryRef has been disposed would cause the hook to return a new queryRef\n    // instance since disposal also removes it from the suspense cache. We add\n    // the queryRef back in the suspense cache so that the next render will reuse\n    // this queryRef rather than initializing a new instance.\n    rehackt__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        // Since the queryRef is disposed async via `setTimeout`, we have to wait a\n        // tick before checking it and adding back to the suspense cache.\n        var id = setTimeout(function() {\n            if (queryRef.disposed) {\n                suspenseCache.add(cacheKey, queryRef);\n            }\n        });\n        return function() {\n            return clearTimeout(id);\n        };\n    // Omitting the deps is intentional. This avoids stale closures and the\n    // conditional ensures we aren't running the logic on each render.\n    });\n    var fetchMore = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(options) {\n        var promise = queryRef.fetchMore(options);\n        setWrappedQueryRef((0,_internal_index_js__WEBPACK_IMPORTED_MODULE_7__.wrapQueryRef)(queryRef));\n        return promise;\n    }, [\n        queryRef\n    ]);\n    var refetch = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(variables) {\n        var promise = queryRef.refetch(variables);\n        setWrappedQueryRef((0,_internal_index_js__WEBPACK_IMPORTED_MODULE_7__.wrapQueryRef)(queryRef));\n        return promise;\n    }, [\n        queryRef\n    ]);\n    rehackt__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        return queryRef.softRetain();\n    }, [\n        queryRef\n    ]);\n    return [\n        didFetchResult.current ? wrappedQueryRef : void 0,\n        {\n            fetchMore: fetchMore,\n            refetch: refetch,\n            subscribeToMore: queryRef.observable.subscribeToMore\n        }\n    ];\n} //# sourceMappingURL=useBackgroundQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useBackgroundQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useFragment.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useFragment.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFragment: () => (/* binding */ useFragment)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n\n\n\n\n\n\n\nfunction useFragment(options) {\n    return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_2__.wrapHook)(\"useFragment\", _useFragment, (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(options.client))(options);\n}\nfunction _useFragment(options) {\n    var cache = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(options.client).cache;\n    var from = options.from, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(options, [\n        \"from\"\n    ]);\n    // We calculate the cache id seperately from `stableOptions` because we don't\n    // want changes to non key fields in the `from` property to affect\n    // `stableOptions` and retrigger our subscription. If the cache identifier\n    // stays the same between renders, we want to reuse the existing subscription.\n    var id = rehackt__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        return typeof from === \"string\" ? from : cache.identify(from);\n    }, [\n        cache,\n        from\n    ]);\n    var stableOptions = (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useDeepMemo)(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, rest), {\n            from: id\n        });\n    }, [\n        rest,\n        id\n    ]);\n    // Since .next is async, we need to make sure that we\n    // get the correct diff on the next render given new diffOptions\n    var diff = rehackt__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        var fragment = stableOptions.fragment, fragmentName = stableOptions.fragmentName, from = stableOptions.from, _a = stableOptions.optimistic, optimistic = _a === void 0 ? true : _a;\n        return {\n            result: diffToResult(cache.diff((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, stableOptions), {\n                returnPartialData: true,\n                id: from,\n                query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n                optimistic: optimistic\n            })))\n        };\n    }, [\n        stableOptions,\n        cache\n    ]);\n    // Used for both getSnapshot and getServerSnapshot\n    var getSnapshot = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function() {\n        return diff.result;\n    }, [\n        diff\n    ]);\n    return (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_6__.useSyncExternalStore)(rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(forceUpdate) {\n        var lastTimeout = 0;\n        var subscription = cache.watchFragment(stableOptions).subscribe({\n            next: function(result) {\n                // Since `next` is called async by zen-observable, we want to avoid\n                // unnecessarily rerendering this hook for the initial result\n                // emitted from watchFragment which should be equal to\n                // `diff.result`.\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(result, diff.result)) return;\n                diff.result = result;\n                // If we get another update before we've re-rendered, bail out of\n                // the update and try again. This ensures that the relative timing\n                // between useQuery and useFragment stays roughly the same as\n                // fixed in https://github.com/apollographql/apollo-client/pull/11083\n                clearTimeout(lastTimeout);\n                lastTimeout = setTimeout(forceUpdate);\n            }\n        });\n        return function() {\n            subscription.unsubscribe();\n            clearTimeout(lastTimeout);\n        };\n    }, [\n        cache,\n        stableOptions,\n        diff\n    ]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n    var result = {\n        data: diff.result,\n        complete: !!diff.complete\n    };\n    if (diff.missing) {\n        result.missing = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.mergeDeepArray)(diff.missing.map(function(error) {\n            return error.missing;\n        }));\n    }\n    return result;\n} //# sourceMappingURL=useFragment.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useFragment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useLazyQuery.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useLazyQuery.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useLazyQuery: () => (/* binding */ useLazyQuery)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _useQuery_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js\");\n/* harmony import */ var _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/useIsomorphicLayoutEffect.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\");\n\n\n\n\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nvar EAGER_METHODS = [\n    \"refetch\",\n    \"reobserve\",\n    \"fetchMore\",\n    \"updateQuery\",\n    \"startPolling\",\n    \"stopPolling\",\n    \"subscribeToMore\"\n];\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */ function useLazyQuery(query, options) {\n    var _a;\n    var execOptionsRef = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    var optionsRef = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    var queryRef = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    var merged = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(options, execOptionsRef.current || {});\n    var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n    // Use refs to track options and the used query to ensure the `execute`\n    // function remains referentially stable between renders.\n    optionsRef.current = options;\n    queryRef.current = document;\n    var queryHookOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, merged), {\n        skip: !execOptionsRef.current\n    });\n    var _b = (0,_useQuery_js__WEBPACK_IMPORTED_MODULE_3__.useQueryInternals)(document, queryHookOptions), obsQueryFields = _b.obsQueryFields, useQueryResult = _b.result, client = _b.client, resultData = _b.resultData, observable = _b.observable, onQueryExecuted = _b.onQueryExecuted;\n    var initialFetchPolicy = observable.options.initialFetchPolicy || (0,_useQuery_js__WEBPACK_IMPORTED_MODULE_3__.getDefaultFetchPolicy)(queryHookOptions.defaultOptions, client.defaultOptions);\n    var forceUpdateState = rehackt__WEBPACK_IMPORTED_MODULE_0__.useReducer(function(tick) {\n        return tick + 1;\n    }, 0)[1];\n    // We use useMemo here to make sure the eager methods have a stable identity.\n    var eagerMethods = rehackt__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        var eagerMethods = {};\n        var _loop_1 = function(key) {\n            var method = obsQueryFields[key];\n            eagerMethods[key] = function() {\n                if (!execOptionsRef.current) {\n                    execOptionsRef.current = Object.create(null);\n                    // Only the first time populating execOptionsRef.current matters here.\n                    forceUpdateState();\n                }\n                // @ts-expect-error this is just too generic to type\n                return method.apply(this, arguments);\n            };\n        };\n        for(var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++){\n            var key = EAGER_METHODS_1[_i];\n            _loop_1(key);\n        }\n        return eagerMethods;\n    }, [\n        forceUpdateState,\n        obsQueryFields\n    ]);\n    var called = !!execOptionsRef.current;\n    var result = rehackt__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, useQueryResult), eagerMethods), {\n            called: called\n        });\n    }, [\n        useQueryResult,\n        eagerMethods,\n        called\n    ]);\n    var execute = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(executeOptions) {\n        execOptionsRef.current = executeOptions ? (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, executeOptions), {\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n        }) : {\n            fetchPolicy: initialFetchPolicy\n        };\n        var options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(optionsRef.current, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            query: queryRef.current\n        }, execOptionsRef.current));\n        var promise = executeQuery(resultData, observable, client, document, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n            skip: false\n        }), onQueryExecuted).then(function(queryResult) {\n            return Object.assign(queryResult, eagerMethods);\n        });\n        // Because the return value of `useLazyQuery` is usually floated, we need\n        // to catch the promise to prevent unhandled rejections.\n        promise.catch(function() {});\n        return promise;\n    }, [\n        client,\n        document,\n        eagerMethods,\n        initialFetchPolicy,\n        observable,\n        resultData,\n        onQueryExecuted\n    ]);\n    var executeRef = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef(execute);\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_4__.useIsomorphicLayoutEffect)(function() {\n        executeRef.current = execute;\n    });\n    var stableExecute = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        return executeRef.current.apply(executeRef, args);\n    }, []);\n    return [\n        stableExecute,\n        result\n    ];\n}\nfunction executeQuery(resultData, observable, client, currentQuery, options, onQueryExecuted) {\n    var query = options.query || currentQuery;\n    var watchQueryOptions = (0,_useQuery_js__WEBPACK_IMPORTED_MODULE_3__.createMakeWatchQueryOptions)(client, query, options, false)(observable);\n    var concast = observable.reobserveAsConcast((0,_useQuery_js__WEBPACK_IMPORTED_MODULE_3__.getObsQueryOptions)(observable, client, options, watchQueryOptions));\n    onQueryExecuted(watchQueryOptions);\n    return new Promise(function(resolve) {\n        var result;\n        // Subscribe to the concast independently of the ObservableQuery in case\n        // the component gets unmounted before the promise resolves. This prevents\n        // the concast from terminating early and resolving with `undefined` when\n        // there are no more subscribers for the concast.\n        concast.subscribe({\n            next: function(value) {\n                result = value;\n            },\n            error: function() {\n                resolve((0,_useQuery_js__WEBPACK_IMPORTED_MODULE_3__.toQueryResult)(observable.getCurrentResult(), resultData.previousData, observable, client));\n            },\n            complete: function() {\n                resolve((0,_useQuery_js__WEBPACK_IMPORTED_MODULE_3__.toQueryResult)(result, resultData.previousData, observable, client));\n            }\n        });\n    });\n} //# sourceMappingURL=useLazyQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useLazyQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useLoadableQuery.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useLoadableQuery.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useLoadableQuery: () => (/* binding */ useLoadableQuery)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/internal/cache/QueryReference.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useRenderGuard.js\");\n/* harmony import */ var _useSuspenseQuery_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useSuspenseQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSuspenseQuery.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n\n\n\n\n\n\nfunction useLoadableQuery(query, options) {\n    if (options === void 0) {\n        options = Object.create(null);\n    }\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__.useApolloClient)(options.client);\n    var suspenseCache = (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_3__.getSuspenseCache)(client);\n    var watchQueryOptions = (0,_useSuspenseQuery_js__WEBPACK_IMPORTED_MODULE_4__.useWatchQueryOptions)({\n        client: client,\n        query: query,\n        options: options\n    });\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    var _b = rehackt__WEBPACK_IMPORTED_MODULE_0__.useState(null), queryRef = _b[0], setQueryRef = _b[1];\n    (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.assertWrappedQueryRef)(queryRef);\n    var internalQueryRef = queryRef && (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.unwrapQueryRef)(queryRef);\n    if (queryRef && (internalQueryRef === null || internalQueryRef === void 0 ? void 0 : internalQueryRef.didChangeOptions(watchQueryOptions))) {\n        var promise = internalQueryRef.applyOptions(watchQueryOptions);\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.updateWrappedQueryRef)(queryRef, promise);\n    }\n    var calledDuringRender = (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_6__.useRenderGuard)();\n    var fetchMore = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(options) {\n        if (!internalQueryRef) {\n            throw new Error(\"The query has not been loaded. Please load the query.\");\n        }\n        var promise = internalQueryRef.fetchMore(options);\n        setQueryRef((0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.wrapQueryRef)(internalQueryRef));\n        return promise;\n    }, [\n        internalQueryRef\n    ]);\n    var refetch = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(options) {\n        if (!internalQueryRef) {\n            throw new Error(\"The query has not been loaded. Please load the query.\");\n        }\n        var promise = internalQueryRef.refetch(options);\n        setQueryRef((0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.wrapQueryRef)(internalQueryRef));\n        return promise;\n    }, [\n        internalQueryRef\n    ]);\n    var loadQuery = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(!calledDuringRender(), 51);\n        var variables = args[0];\n        var cacheKey = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__spreadArray)([\n            query,\n            (0,_cache_index_js__WEBPACK_IMPORTED_MODULE_8__.canonicalStringify)(variables)\n        ], [].concat(queryKey), true);\n        var queryRef = suspenseCache.getQueryRef(cacheKey, function() {\n            return client.watchQuery((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, watchQueryOptions), {\n                variables: variables\n            }));\n        });\n        setQueryRef((0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.wrapQueryRef)(queryRef));\n    }, [\n        query,\n        queryKey,\n        suspenseCache,\n        watchQueryOptions,\n        calledDuringRender,\n        client\n    ]);\n    var subscribeToMore = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(options) {\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(internalQueryRef, 52);\n        return internalQueryRef.observable.subscribeToMore(options);\n    }, [\n        internalQueryRef\n    ]);\n    var reset = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function() {\n        setQueryRef(null);\n    }, []);\n    return [\n        loadQuery,\n        queryRef,\n        {\n            fetchMore: fetchMore,\n            refetch: refetch,\n            reset: reset,\n            subscribeToMore: subscribeToMore\n        }\n    ];\n} //# sourceMappingURL=useLoadableQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useLoadableQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useMutation.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useMutation.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMutation: () => (/* binding */ useMutation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/useIsomorphicLayoutEffect.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\");\n\n\n\n\n\n\n\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */ function useMutation(mutation, options) {\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__.useApolloClient)(options === null || options === void 0 ? void 0 : options.client);\n    (0,_parser_index_js__WEBPACK_IMPORTED_MODULE_3__.verifyDocumentType)(mutation, _parser_index_js__WEBPACK_IMPORTED_MODULE_3__.DocumentType.Mutation);\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_0__.useState({\n        called: false,\n        loading: false,\n        client: client\n    }), result = _a[0], setResult = _a[1];\n    var ref = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef({\n        result: result,\n        mutationId: 0,\n        isMounted: true,\n        client: client,\n        mutation: mutation,\n        options: options\n    });\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_4__.useIsomorphicLayoutEffect)(function() {\n        Object.assign(ref.current, {\n            client: client,\n            options: options,\n            mutation: mutation\n        });\n    });\n    var execute = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(executeOptions) {\n        if (executeOptions === void 0) {\n            executeOptions = {};\n        }\n        var _a = ref.current, options = _a.options, mutation = _a.mutation;\n        var baseOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, options), {\n            mutation: mutation\n        });\n        var client = executeOptions.client || ref.current.client;\n        if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n            setResult(ref.current.result = {\n                loading: true,\n                error: void 0,\n                data: void 0,\n                called: true,\n                client: client\n            });\n        }\n        var mutationId = ++ref.current.mutationId;\n        var clientOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.mergeOptions)(baseOptions, executeOptions);\n        return client.mutate(clientOptions).then(function(response) {\n            var _a, _b;\n            var data = response.data, errors = response.errors;\n            var error = errors && errors.length > 0 ? new _errors_index_js__WEBPACK_IMPORTED_MODULE_7__.ApolloError({\n                graphQLErrors: errors\n            }) : void 0;\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (error && onError) {\n                onError(error, clientOptions);\n            }\n            if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n                var result_1 = {\n                    called: true,\n                    loading: false,\n                    data: data,\n                    error: error,\n                    client: client\n                };\n                if (ref.current.isMounted && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(ref.current.result, result_1)) {\n                    setResult(ref.current.result = result_1);\n                }\n            }\n            var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n            if (!error) {\n                onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n            }\n            return response;\n        }).catch(function(error) {\n            var _a;\n            if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n                var result_2 = {\n                    loading: false,\n                    error: error,\n                    data: void 0,\n                    called: true,\n                    client: client\n                };\n                if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(ref.current.result, result_2)) {\n                    setResult(ref.current.result = result_2);\n                }\n            }\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (onError) {\n                onError(error, clientOptions);\n                // TODO(brian): why are we returning this here???\n                return {\n                    data: void 0,\n                    errors: error\n                };\n            }\n            throw error;\n        });\n    }, []);\n    var reset = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function() {\n        if (ref.current.isMounted) {\n            var result_3 = {\n                called: false,\n                loading: false,\n                client: ref.current.client\n            };\n            Object.assign(ref.current, {\n                mutationId: 0,\n                result: result_3\n            });\n            setResult(result_3);\n        }\n    }, []);\n    rehackt__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        var current = ref.current;\n        current.isMounted = true;\n        return function() {\n            current.isMounted = false;\n        };\n    }, []);\n    return [\n        execute,\n        (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({\n            reset: reset\n        }, result)\n    ];\n} //# sourceMappingURL=useMutation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useMutation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useQuery.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMakeWatchQueryOptions: () => (/* binding */ createMakeWatchQueryOptions),\n/* harmony export */   getDefaultFetchPolicy: () => (/* binding */ getDefaultFetchPolicy),\n/* harmony export */   getObsQueryOptions: () => (/* binding */ getObsQueryOptions),\n/* harmony export */   lastWatchOptions: () => (/* binding */ lastWatchOptions),\n/* harmony export */   toApolloError: () => (/* binding */ toApolloError),\n/* harmony export */   toQueryResult: () => (/* binding */ toQueryResult),\n/* harmony export */   useQuery: () => (/* binding */ useQuery),\n/* harmony export */   useQueryInternals: () => (/* binding */ useQueryInternals)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\");\n\n/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n * isSSRAllowed\n * disableNetworkFetches\n * partialRefetch\n * renderPromises\n * isSyncSSR\n * callbacks\n */ /** */ \n\n\n\n\n\n\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction noop() {}\nvar lastWatchOptions = Symbol();\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */ function useQuery(query, options) {\n    if (options === void 0) {\n        options = Object.create(null);\n    }\n    return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_3__.wrapHook)(\"useQuery\", _useQuery, (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_4__.useApolloClient)(options && options.client))(query, options);\n}\nfunction _useQuery(query, options) {\n    var _a = useQueryInternals(query, options), result = _a.result, obsQueryFields = _a.obsQueryFields;\n    return rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, result), obsQueryFields);\n    }, [\n        result,\n        obsQueryFields\n    ]);\n}\nfunction useInternalState(client, query, options, renderPromises, makeWatchQueryOptions) {\n    function createInternalState(previous) {\n        var _a;\n        (0,_parser_index_js__WEBPACK_IMPORTED_MODULE_6__.verifyDocumentType)(query, _parser_index_js__WEBPACK_IMPORTED_MODULE_6__.DocumentType.Query);\n        var internalState = {\n            client: client,\n            query: query,\n            observable: // See if there is an existing observable that was used to fetch the same\n            // data and if so, use it instead since it will contain the proper queryId\n            // to fetch the result set. This is used during SSR.\n            renderPromises && renderPromises.getSSRObservable(makeWatchQueryOptions()) || client.watchQuery(getObsQueryOptions(void 0, client, options, makeWatchQueryOptions())),\n            resultData: {\n                // Reuse previousData from previous InternalState (if any) to provide\n                // continuity of previousData even if/when the query or client changes.\n                previousData: (_a = previous === null || previous === void 0 ? void 0 : previous.resultData.current) === null || _a === void 0 ? void 0 : _a.data\n            }\n        };\n        return internalState;\n    }\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_1__.useState(createInternalState), internalState = _a[0], updateInternalState = _a[1];\n    /**\n     * Used by `useLazyQuery` when a new query is executed.\n     * We keep this logic here since it needs to update things in unsafe\n     * ways and here we at least can keep track of that in a single place.\n     */ function onQueryExecuted(watchQueryOptions) {\n        var _a;\n        var _b;\n        // this needs to be set to prevent an immediate `resubscribe` in the\n        // next rerender of the `useQuery` internals\n        Object.assign(internalState.observable, (_a = {}, _a[lastWatchOptions] = watchQueryOptions, _a));\n        var resultData = internalState.resultData;\n        updateInternalState((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, internalState), {\n            // might be a different query\n            query: watchQueryOptions.query,\n            resultData: Object.assign(resultData, {\n                // We need to modify the previous `resultData` object as we rely on the\n                // object reference in other places\n                previousData: ((_b = resultData.current) === null || _b === void 0 ? void 0 : _b.data) || resultData.previousData,\n                current: undefined\n            })\n        }));\n    }\n    if (client !== internalState.client || query !== internalState.query) {\n        // If the client or query have changed, we need to create a new InternalState.\n        // This will trigger a re-render with the new state, but it will also continue\n        // to run the current render function to completion.\n        // Since we sometimes trigger some side-effects in the render function, we\n        // re-assign `state` to the new state to ensure that those side-effects are\n        // triggered with the new state.\n        var newInternalState = createInternalState(internalState);\n        updateInternalState(newInternalState);\n        return [\n            newInternalState,\n            onQueryExecuted\n        ];\n    }\n    return [\n        internalState,\n        onQueryExecuted\n    ];\n}\nfunction useQueryInternals(query, options) {\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_4__.useApolloClient)(options.client);\n    var renderPromises = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext((0,_context_index_js__WEBPACK_IMPORTED_MODULE_7__.getApolloContext)()).renderPromises;\n    var isSyncSSR = !!renderPromises;\n    var disableNetworkFetches = client.disableNetworkFetches;\n    var ssrAllowed = options.ssr !== false && !options.skip;\n    var partialRefetch = options.partialRefetch;\n    var makeWatchQueryOptions = createMakeWatchQueryOptions(client, query, options, isSyncSSR);\n    var _a = useInternalState(client, query, options, renderPromises, makeWatchQueryOptions), _b = _a[0], observable = _b.observable, resultData = _b.resultData, onQueryExecuted = _a[1];\n    var watchQueryOptions = makeWatchQueryOptions(observable);\n    useResubscribeIfNecessary(resultData, observable, client, options, watchQueryOptions);\n    var obsQueryFields = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return bindObservableMethods(observable);\n    }, [\n        observable\n    ]);\n    useRegisterSSRObservable(observable, renderPromises, ssrAllowed);\n    var result = useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, {\n        onCompleted: options.onCompleted || noop,\n        onError: options.onError || noop\n    });\n    return {\n        result: result,\n        obsQueryFields: obsQueryFields,\n        observable: observable,\n        resultData: resultData,\n        client: client,\n        onQueryExecuted: onQueryExecuted\n    };\n}\nfunction useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, callbacks) {\n    var callbackRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(callbacks);\n    rehackt__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        // Make sure state.onCompleted and state.onError always reflect the latest\n        // options.onCompleted and options.onError callbacks provided to useQuery,\n        // since those functions are often recreated every time useQuery is called.\n        // Like the forceUpdate method, the versions of these methods inherited from\n        // InternalState.prototype are empty no-ops, but we can override them on the\n        // base state object (without modifying the prototype).\n        callbackRef.current = callbacks;\n    });\n    var resultOverride = (isSyncSSR || disableNetworkFetches) && options.ssr === false && !options.skip ? // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    ssrDisabledResult : options.skip || watchQueryOptions.fetchPolicy === \"standby\" ? // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    skipStandbyResult : void 0;\n    var previousData = resultData.previousData;\n    var currentResultOverride = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return resultOverride && toQueryResult(resultOverride, previousData, observable, client);\n    }, [\n        client,\n        observable,\n        resultOverride,\n        previousData\n    ]);\n    return (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_8__.useSyncExternalStore)(rehackt__WEBPACK_IMPORTED_MODULE_1__.useCallback(function(handleStoreChange) {\n        // reference `disableNetworkFetches` here to ensure that the rules of hooks\n        // keep it as a dependency of this effect, even though it's not used\n        disableNetworkFetches;\n        if (isSyncSSR) {\n            return function() {};\n        }\n        var onNext = function() {\n            var previousResult = resultData.current;\n            // We use `getCurrentResult()` instead of the onNext argument because\n            // the values differ slightly. Specifically, loading results will have\n            // an empty object for data instead of `undefined` for some reason.\n            var result = observable.getCurrentResult();\n            // Make sure we're not attempting to re-render similar results\n            if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(previousResult.data, result.data)) {\n                return;\n            }\n            setResult(result, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n        };\n        var onError = function(error) {\n            subscription.current.unsubscribe();\n            subscription.current = observable.resubscribeAfterError(onNext, onError);\n            if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n                // The error is not a GraphQL error\n                throw error;\n            }\n            var previousResult = resultData.current;\n            if (!previousResult || previousResult && previousResult.loading || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(error, previousResult.error)) {\n                setResult({\n                    data: previousResult && previousResult.data,\n                    error: error,\n                    loading: false,\n                    networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_9__.NetworkStatus.error\n                }, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n            }\n        };\n        // TODO evaluate if we keep this in\n        // React Compiler cannot handle scoped `let` access, but a mutable object\n        // like this is fine.\n        // was:\n        // let subscription = observable.subscribe(onNext, onError);\n        var subscription = {\n            current: observable.subscribe(onNext, onError)\n        };\n        // Do the \"unsubscribe\" with a short delay.\n        // This way, an existing subscription can be reused without an additional\n        // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n        // happen in very fast succession.\n        return function() {\n            setTimeout(function() {\n                return subscription.current.unsubscribe();\n            });\n        };\n    }, [\n        disableNetworkFetches,\n        isSyncSSR,\n        observable,\n        resultData,\n        partialRefetch,\n        client\n    ]), function() {\n        return currentResultOverride || getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n    }, function() {\n        return currentResultOverride || getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n    });\n}\nfunction useRegisterSSRObservable(observable, renderPromises, ssrAllowed) {\n    if (renderPromises && ssrAllowed) {\n        renderPromises.registerSSRObservable(observable);\n        if (observable.getCurrentResult().loading) {\n            // TODO: This is a legacy API which could probably be cleaned up\n            renderPromises.addObservableQueryPromise(observable);\n        }\n    }\n}\n// this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\nfunction useResubscribeIfNecessary(/** this hook will mutate properties on `resultData` */ resultData, /** this hook will mutate properties on `observable` */ observable, client, options, watchQueryOptions) {\n    var _a;\n    if (observable[lastWatchOptions] && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(observable[lastWatchOptions], watchQueryOptions)) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        observable.reobserve(getObsQueryOptions(observable, client, options, watchQueryOptions));\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        resultData.previousData = ((_a = resultData.current) === null || _a === void 0 ? void 0 : _a.data) || resultData.previousData;\n        resultData.current = void 0;\n    }\n    observable[lastWatchOptions] = watchQueryOptions;\n}\n/*\n * A function to massage options before passing them to ObservableQuery.\n * This is two-step curried because we want to reuse the `make` function,\n * but the `observable` might differ between calls to `make`.\n */ function createMakeWatchQueryOptions(client, query, _a, isSyncSSR) {\n    if (_a === void 0) {\n        _a = {};\n    }\n    var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    otherOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(_a, [\n        \"skip\",\n        \"ssr\",\n        \"onCompleted\",\n        \"onError\",\n        \"defaultOptions\"\n    ]);\n    return function(observable) {\n        // This Object.assign is safe because otherOptions is a fresh ...rest object\n        // that did not exist until just now, so modifications are still allowed.\n        var watchQueryOptions = Object.assign(otherOptions, {\n            query: query\n        });\n        if (isSyncSSR && (watchQueryOptions.fetchPolicy === \"network-only\" || watchQueryOptions.fetchPolicy === \"cache-and-network\")) {\n            // this behavior was added to react-apollo without explanation in this PR\n            // https://github.com/apollographql/react-apollo/pull/1579\n            watchQueryOptions.fetchPolicy = \"cache-first\";\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            // When skipping, we set watchQueryOptions.fetchPolicy initially to\n            // \"standby\", but we also need/want to preserve the initial non-standby\n            // fetchPolicy that would have been used if not skipping.\n            watchQueryOptions.initialFetchPolicy = watchQueryOptions.initialFetchPolicy || watchQueryOptions.fetchPolicy || getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n            watchQueryOptions.fetchPolicy = \"standby\";\n        } else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy = (observable === null || observable === void 0 ? void 0 : observable.options.initialFetchPolicy) || getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n        }\n        return watchQueryOptions;\n    };\n}\nfunction getObsQueryOptions(observable, client, queryHookOptions, watchQueryOptions) {\n    var toMerge = [];\n    var globalDefaults = client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n    if (queryHookOptions.defaultOptions) {\n        toMerge.push(queryHookOptions.defaultOptions);\n    }\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.compact)(observable && observable.options, watchQueryOptions));\n    return toMerge.reduce(_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.mergeOptions);\n}\nfunction setResult(nextResult, resultData, observable, client, partialRefetch, forceUpdate, callbacks) {\n    var previousResult = resultData.current;\n    if (previousResult && previousResult.data) {\n        resultData.previousData = previousResult.data;\n    }\n    if (!nextResult.error && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isNonEmptyArray)(nextResult.errors)) {\n        // Until a set naming convention for networkError and graphQLErrors is\n        // decided upon, we map errors (graphQLErrors) to the error options.\n        // TODO: Is it possible for both result.error and result.errors to be\n        // defined here?\n        nextResult.error = new _errors_index_js__WEBPACK_IMPORTED_MODULE_13__.ApolloError({\n            graphQLErrors: nextResult.errors\n        });\n    }\n    resultData.current = toQueryResult(unsafeHandlePartialRefetch(nextResult, observable, partialRefetch), resultData.previousData, observable, client);\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    forceUpdate();\n    handleErrorOrCompleted(nextResult, previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus, callbacks);\n}\nfunction handleErrorOrCompleted(result, previousNetworkStatus, callbacks) {\n    if (!result.loading) {\n        var error_1 = toApolloError(result);\n        // wait a tick in case we are in the middle of rendering a component\n        Promise.resolve().then(function() {\n            if (error_1) {\n                callbacks.onError(error_1);\n            } else if (result.data && previousNetworkStatus !== result.networkStatus && result.networkStatus === _core_index_js__WEBPACK_IMPORTED_MODULE_9__.NetworkStatus.ready) {\n                callbacks.onCompleted(result.data);\n            }\n        }).catch(function(error) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(error);\n        });\n    }\n}\nfunction getCurrentResult(resultData, observable, callbacks, partialRefetch, client) {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!resultData.current) {\n        // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n        // this could call unsafeHandlePartialRefetch\n        setResult(observable.getCurrentResult(), resultData, observable, client, partialRefetch, function() {}, callbacks);\n    }\n    return resultData.current;\n}\nfunction getDefaultFetchPolicy(queryHookDefaultOptions, clientDefaultOptions) {\n    var _a;\n    return (queryHookDefaultOptions === null || queryHookDefaultOptions === void 0 ? void 0 : queryHookDefaultOptions.fetchPolicy) || ((_a = clientDefaultOptions === null || clientDefaultOptions === void 0 ? void 0 : clientDefaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || \"cache-first\";\n}\nfunction toApolloError(result) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isNonEmptyArray)(result.errors) ? new _errors_index_js__WEBPACK_IMPORTED_MODULE_13__.ApolloError({\n        graphQLErrors: result.errors\n    }) : result.error;\n}\nfunction toQueryResult(result, previousData, observable, client) {\n    var data = result.data, partial = result.partial, resultWithoutPartial = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(result, [\n        \"data\",\n        \"partial\"\n    ]);\n    var queryResult = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({\n        data: data\n    }, resultWithoutPartial), {\n        client: client,\n        observable: observable,\n        variables: observable.variables,\n        called: result !== ssrDisabledResult && result !== skipStandbyResult,\n        previousData: previousData\n    });\n    return queryResult;\n}\nfunction unsafeHandlePartialRefetch(result, observable, partialRefetch) {\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (result.partial && partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && observable.options.fetchPolicy !== \"cache-only\") {\n        observable.refetch();\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, result), {\n            loading: true,\n            networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_9__.NetworkStatus.refetch\n        });\n    }\n    return result;\n}\nvar ssrDisabledResult = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.maybeDeepFreeze)({\n    loading: true,\n    data: void 0,\n    error: void 0,\n    networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_9__.NetworkStatus.loading\n});\nvar skipStandbyResult = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.maybeDeepFreeze)({\n    loading: false,\n    data: void 0,\n    error: void 0,\n    networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_9__.NetworkStatus.ready\n});\nfunction bindObservableMethods(observable) {\n    return {\n        refetch: observable.refetch.bind(observable),\n        reobserve: observable.reobserve.bind(observable),\n        fetchMore: observable.fetchMore.bind(observable),\n        updateQuery: observable.updateQuery.bind(observable),\n        startPolling: observable.startPolling.bind(observable),\n        stopPolling: observable.stopPolling.bind(observable),\n        subscribeToMore: observable.subscribeToMore.bind(observable)\n    };\n} //# sourceMappingURL=useQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useQueryRefHandlers.js":
/*!************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useQueryRefHandlers.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQueryRefHandlers: () => (/* binding */ useQueryRefHandlers)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/internal/cache/QueryReference.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\");\n\n\n\n\n/**\n * A React hook that returns a `refetch` and `fetchMore` function for a given\n * `queryRef`.\n *\n * This is useful to get access to handlers for a `queryRef` that was created by\n * `createQueryPreloader` or when the handlers for a `queryRef` produced in\n * a different component are inaccessible.\n *\n * @example\n * ```tsx\n * const MyComponent({ queryRef }) {\n *   const { refetch, fetchMore } = useQueryRefHandlers(queryRef);\n *\n *   // ...\n * }\n * ```\n * @since 3.9.0\n * @param queryRef - A `QueryRef` returned from `useBackgroundQuery`, `useLoadableQuery`, or `createQueryPreloader`.\n */ function useQueryRefHandlers(queryRef) {\n    var unwrapped = (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.unwrapQueryRef)(queryRef);\n    return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_2__.wrapHook)(\"useQueryRefHandlers\", _useQueryRefHandlers, unwrapped ? unwrapped[\"observable\"] : (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)())(queryRef);\n}\nfunction _useQueryRefHandlers(queryRef) {\n    (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.assertWrappedQueryRef)(queryRef);\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_0__.useState(queryRef), previousQueryRef = _a[0], setPreviousQueryRef = _a[1];\n    var _b = rehackt__WEBPACK_IMPORTED_MODULE_0__.useState(queryRef), wrappedQueryRef = _b[0], setWrappedQueryRef = _b[1];\n    var internalQueryRef = (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.unwrapQueryRef)(queryRef);\n    // To ensure we can support React transitions, this hook needs to manage the\n    // queryRef state and apply React's state value immediately to the existing\n    // queryRef since this hook doesn't return the queryRef directly\n    if (previousQueryRef !== queryRef) {\n        setPreviousQueryRef(queryRef);\n        setWrappedQueryRef(queryRef);\n    } else {\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.updateWrappedQueryRef)(queryRef, (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.getWrappedPromise)(wrappedQueryRef));\n    }\n    var refetch = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(variables) {\n        var promise = internalQueryRef.refetch(variables);\n        setWrappedQueryRef((0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.wrapQueryRef)(internalQueryRef));\n        return promise;\n    }, [\n        internalQueryRef\n    ]);\n    var fetchMore = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(options) {\n        var promise = internalQueryRef.fetchMore(options);\n        setWrappedQueryRef((0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.wrapQueryRef)(internalQueryRef));\n        return promise;\n    }, [\n        internalQueryRef\n    ]);\n    return {\n        refetch: refetch,\n        fetchMore: fetchMore,\n        subscribeToMore: internalQueryRef.observable.subscribeToMore\n    };\n} //# sourceMappingURL=useQueryRefHandlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlUXVlcnlSZWZIYW5kbGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFpQztBQUNxRztBQUMvRTtBQUNSO0FBQy9DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FrQkMsR0FDTSxTQUFTUSxvQkFBb0JDLFFBQVE7SUFDeEMsSUFBSUMsWUFBWVAsa0VBQWNBLENBQUNNO0lBQy9CLE9BQU9GLDREQUFRQSxDQUFDLHVCQUF1Qkksc0JBQXNCRCxZQUN6REEsU0FBUyxDQUFDLGFBQWEsR0FTckJKLG9FQUFlQSxJQUFJRztBQUM3QjtBQUNBLFNBQVNFLHFCQUFxQkYsUUFBUTtJQUNsQ1IseUVBQXFCQSxDQUFDUTtJQUN0QixJQUFJRyxLQUFLWiw2Q0FBYyxDQUFDUyxXQUFXSyxtQkFBbUJGLEVBQUUsQ0FBQyxFQUFFLEVBQUVHLHNCQUFzQkgsRUFBRSxDQUFDLEVBQUU7SUFDeEYsSUFBSUksS0FBS2hCLDZDQUFjLENBQUNTLFdBQVdRLGtCQUFrQkQsRUFBRSxDQUFDLEVBQUUsRUFBRUUscUJBQXFCRixFQUFFLENBQUMsRUFBRTtJQUN0RixJQUFJRyxtQkFBbUJoQixrRUFBY0EsQ0FBQ007SUFDdEMsNEVBQTRFO0lBQzVFLDJFQUEyRTtJQUMzRSxnRUFBZ0U7SUFDaEUsSUFBSUsscUJBQXFCTCxVQUFVO1FBQy9CTSxvQkFBb0JOO1FBQ3BCUyxtQkFBbUJUO0lBQ3ZCLE9BQ0s7UUFDREwseUVBQXFCQSxDQUFDSyxVQUFVUCxxRUFBaUJBLENBQUNlO0lBQ3REO0lBQ0EsSUFBSUcsVUFBVXBCLGdEQUFpQixDQUFDLFNBQVVzQixTQUFTO1FBQy9DLElBQUlDLFVBQVVKLGlCQUFpQkMsT0FBTyxDQUFDRTtRQUN2Q0osbUJBQW1CYixnRUFBWUEsQ0FBQ2M7UUFDaEMsT0FBT0k7SUFDWCxHQUFHO1FBQUNKO0tBQWlCO0lBQ3JCLElBQUlLLFlBQVl4QixnREFBaUIsQ0FBQyxTQUFVeUIsT0FBTztRQUMvQyxJQUFJRixVQUFVSixpQkFBaUJLLFNBQVMsQ0FBQ0M7UUFDekNQLG1CQUFtQmIsZ0VBQVlBLENBQUNjO1FBQ2hDLE9BQU9JO0lBQ1gsR0FBRztRQUFDSjtLQUFpQjtJQUNyQixPQUFPO1FBQ0hDLFNBQVNBO1FBQ1RJLFdBQVdBO1FBQ1hFLGlCQUFpQlAsaUJBQWlCUSxVQUFVLENBQUNELGVBQWU7SUFDaEU7QUFDSixFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy91c2VRdWVyeVJlZkhhbmRsZXJzLmpzP2U4MTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlaGFja3RcIjtcbmltcG9ydCB7IGFzc2VydFdyYXBwZWRRdWVyeVJlZiwgZ2V0V3JhcHBlZFByb21pc2UsIHVud3JhcFF1ZXJ5UmVmLCB1cGRhdGVXcmFwcGVkUXVlcnlSZWYsIHdyYXBRdWVyeVJlZiwgfSBmcm9tIFwiLi4vaW50ZXJuYWwvaW5kZXguanNcIjtcbmltcG9ydCB7IHVzZUFwb2xsb0NsaWVudCB9IGZyb20gXCIuL3VzZUFwb2xsb0NsaWVudC5qc1wiO1xuaW1wb3J0IHsgd3JhcEhvb2sgfSBmcm9tIFwiLi9pbnRlcm5hbC9pbmRleC5qc1wiO1xuLyoqXG4gKiBBIFJlYWN0IGhvb2sgdGhhdCByZXR1cm5zIGEgYHJlZmV0Y2hgIGFuZCBgZmV0Y2hNb3JlYCBmdW5jdGlvbiBmb3IgYSBnaXZlblxuICogYHF1ZXJ5UmVmYC5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCB0byBnZXQgYWNjZXNzIHRvIGhhbmRsZXJzIGZvciBhIGBxdWVyeVJlZmAgdGhhdCB3YXMgY3JlYXRlZCBieVxuICogYGNyZWF0ZVF1ZXJ5UHJlbG9hZGVyYCBvciB3aGVuIHRoZSBoYW5kbGVycyBmb3IgYSBgcXVlcnlSZWZgIHByb2R1Y2VkIGluXG4gKiBhIGRpZmZlcmVudCBjb21wb25lbnQgYXJlIGluYWNjZXNzaWJsZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBjb25zdCBNeUNvbXBvbmVudCh7IHF1ZXJ5UmVmIH0pIHtcbiAqICAgY29uc3QgeyByZWZldGNoLCBmZXRjaE1vcmUgfSA9IHVzZVF1ZXJ5UmVmSGFuZGxlcnMocXVlcnlSZWYpO1xuICpcbiAqICAgLy8gLi4uXG4gKiB9XG4gKiBgYGBcbiAqIEBzaW5jZSAzLjkuMFxuICogQHBhcmFtIHF1ZXJ5UmVmIC0gQSBgUXVlcnlSZWZgIHJldHVybmVkIGZyb20gYHVzZUJhY2tncm91bmRRdWVyeWAsIGB1c2VMb2FkYWJsZVF1ZXJ5YCwgb3IgYGNyZWF0ZVF1ZXJ5UHJlbG9hZGVyYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVF1ZXJ5UmVmSGFuZGxlcnMocXVlcnlSZWYpIHtcbiAgICB2YXIgdW53cmFwcGVkID0gdW53cmFwUXVlcnlSZWYocXVlcnlSZWYpO1xuICAgIHJldHVybiB3cmFwSG9vayhcInVzZVF1ZXJ5UmVmSGFuZGxlcnNcIiwgX3VzZVF1ZXJ5UmVmSGFuZGxlcnMsIHVud3JhcHBlZCA/XG4gICAgICAgIHVud3JhcHBlZFtcIm9ic2VydmFibGVcIl1cbiAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgYSBcInRyYW5zcG9ydGVkXCIgcXVlcnlSZWYgb2JqZWN0LCB3ZSBuZWVkIHRvIHVzZSB0aGVcbiAgICAgICAgLy8gY2xpZW50IHRoYXQncyBhdmFpbGFibGUgdG8gdXMgYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIFJlYWN0IHRyZWVcbiAgICAgICAgLy8gdGhhdCBBcG9sbG9DbGllbnQgd2lsbCB0aGVuIGhhdmUgdGhlIGpvYiB0byByZWNyZWF0ZSBhIHJlYWwgcXVlcnlSZWYgZnJvbVxuICAgICAgICAvLyB0aGUgdHJhbnNwb3J0ZWQgb2JqZWN0XG4gICAgICAgIC8vIFRoaXMgaXMganVzdCBhIGNvbnRleHQgcmVhZCAtIGl0J3MgZmluZSB0byBkbyB0aGlzIGNvbmRpdGlvbmFsbHkuXG4gICAgICAgIC8vIFRoaXMgaG9vayB3cmFwcGVyIGFsc28gc2hvdWxkbid0IGJlIG9wdGltaXplZCBieSBSZWFjdCBDb21waWxlci5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWNvbXBpbGVyL3JlYWN0LWNvbXBpbGVyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICA6IHVzZUFwb2xsb0NsaWVudCgpKShxdWVyeVJlZik7XG59XG5mdW5jdGlvbiBfdXNlUXVlcnlSZWZIYW5kbGVycyhxdWVyeVJlZikge1xuICAgIGFzc2VydFdyYXBwZWRRdWVyeVJlZihxdWVyeVJlZik7XG4gICAgdmFyIF9hID0gUmVhY3QudXNlU3RhdGUocXVlcnlSZWYpLCBwcmV2aW91c1F1ZXJ5UmVmID0gX2FbMF0sIHNldFByZXZpb3VzUXVlcnlSZWYgPSBfYVsxXTtcbiAgICB2YXIgX2IgPSBSZWFjdC51c2VTdGF0ZShxdWVyeVJlZiksIHdyYXBwZWRRdWVyeVJlZiA9IF9iWzBdLCBzZXRXcmFwcGVkUXVlcnlSZWYgPSBfYlsxXTtcbiAgICB2YXIgaW50ZXJuYWxRdWVyeVJlZiA9IHVud3JhcFF1ZXJ5UmVmKHF1ZXJ5UmVmKTtcbiAgICAvLyBUbyBlbnN1cmUgd2UgY2FuIHN1cHBvcnQgUmVhY3QgdHJhbnNpdGlvbnMsIHRoaXMgaG9vayBuZWVkcyB0byBtYW5hZ2UgdGhlXG4gICAgLy8gcXVlcnlSZWYgc3RhdGUgYW5kIGFwcGx5IFJlYWN0J3Mgc3RhdGUgdmFsdWUgaW1tZWRpYXRlbHkgdG8gdGhlIGV4aXN0aW5nXG4gICAgLy8gcXVlcnlSZWYgc2luY2UgdGhpcyBob29rIGRvZXNuJ3QgcmV0dXJuIHRoZSBxdWVyeVJlZiBkaXJlY3RseVxuICAgIGlmIChwcmV2aW91c1F1ZXJ5UmVmICE9PSBxdWVyeVJlZikge1xuICAgICAgICBzZXRQcmV2aW91c1F1ZXJ5UmVmKHF1ZXJ5UmVmKTtcbiAgICAgICAgc2V0V3JhcHBlZFF1ZXJ5UmVmKHF1ZXJ5UmVmKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHVwZGF0ZVdyYXBwZWRRdWVyeVJlZihxdWVyeVJlZiwgZ2V0V3JhcHBlZFByb21pc2Uod3JhcHBlZFF1ZXJ5UmVmKSk7XG4gICAgfVxuICAgIHZhciByZWZldGNoID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHZhcmlhYmxlcykge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IGludGVybmFsUXVlcnlSZWYucmVmZXRjaCh2YXJpYWJsZXMpO1xuICAgICAgICBzZXRXcmFwcGVkUXVlcnlSZWYod3JhcFF1ZXJ5UmVmKGludGVybmFsUXVlcnlSZWYpKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSwgW2ludGVybmFsUXVlcnlSZWZdKTtcbiAgICB2YXIgZmV0Y2hNb3JlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSBpbnRlcm5hbFF1ZXJ5UmVmLmZldGNoTW9yZShvcHRpb25zKTtcbiAgICAgICAgc2V0V3JhcHBlZFF1ZXJ5UmVmKHdyYXBRdWVyeVJlZihpbnRlcm5hbFF1ZXJ5UmVmKSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sIFtpbnRlcm5hbFF1ZXJ5UmVmXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVmZXRjaDogcmVmZXRjaCxcbiAgICAgICAgZmV0Y2hNb3JlOiBmZXRjaE1vcmUsXG4gICAgICAgIHN1YnNjcmliZVRvTW9yZTogaW50ZXJuYWxRdWVyeVJlZi5vYnNlcnZhYmxlLnN1YnNjcmliZVRvTW9yZSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlUXVlcnlSZWZIYW5kbGVycy5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJhc3NlcnRXcmFwcGVkUXVlcnlSZWYiLCJnZXRXcmFwcGVkUHJvbWlzZSIsInVud3JhcFF1ZXJ5UmVmIiwidXBkYXRlV3JhcHBlZFF1ZXJ5UmVmIiwid3JhcFF1ZXJ5UmVmIiwidXNlQXBvbGxvQ2xpZW50Iiwid3JhcEhvb2siLCJ1c2VRdWVyeVJlZkhhbmRsZXJzIiwicXVlcnlSZWYiLCJ1bndyYXBwZWQiLCJfdXNlUXVlcnlSZWZIYW5kbGVycyIsIl9hIiwidXNlU3RhdGUiLCJwcmV2aW91c1F1ZXJ5UmVmIiwic2V0UHJldmlvdXNRdWVyeVJlZiIsIl9iIiwid3JhcHBlZFF1ZXJ5UmVmIiwic2V0V3JhcHBlZFF1ZXJ5UmVmIiwiaW50ZXJuYWxRdWVyeVJlZiIsInJlZmV0Y2giLCJ1c2VDYWxsYmFjayIsInZhcmlhYmxlcyIsInByb21pc2UiLCJmZXRjaE1vcmUiLCJvcHRpb25zIiwic3Vic2NyaWJlVG9Nb3JlIiwib2JzZXJ2YWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useQueryRefHandlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useReactiveVar.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useReactiveVar.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useReactiveVar: () => (/* binding */ useReactiveVar)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\n\n\n/**\n * Reads the value of a [reactive variable](https://www.apollographql.com/docs/react/local-state/reactive-variables/) and re-renders the containing component whenever that variable's value changes. This enables a reactive variable to trigger changes _without_ relying on the `useQuery` hook.\n *\n * @example\n * ```jsx\n * import { makeVar, useReactiveVar } from \"@apollo/client\";\n * export const cartItemsVar = makeVar([]);\n *\n * export function Cart() {\n *   const cartItems = useReactiveVar(cartItemsVar);\n *   // ...\n * }\n * ```\n * @since 3.2.0\n * @param rv - A reactive variable.\n * @returns The current value of the reactive variable.\n */ function useReactiveVar(rv) {\n    return (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)(rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(update) {\n        // By reusing the same onNext function in the nested call to\n        // rv.onNextChange(onNext), we can keep using the initial clean-up function\n        // returned by rv.onNextChange(function onNext(v){...}), without having to\n        // register the new clean-up function (returned by the nested\n        // rv.onNextChange(onNext)) with yet another callback.\n        return rv.onNextChange(function onNext() {\n            update();\n            rv.onNextChange(onNext);\n        });\n    }, [\n        rv\n    ]), rv, rv);\n} //# sourceMappingURL=useReactiveVar.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlUmVhY3RpdmVWYXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ2dDO0FBQ2pFOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBQ00sU0FBU0UsZUFBZUMsRUFBRTtJQUM3QixPQUFPRiw4RUFBb0JBLENBQUNELGdEQUFpQixDQUFDLFNBQVVLLE1BQU07UUFDMUQsNERBQTREO1FBQzVELDJFQUEyRTtRQUMzRSwwRUFBMEU7UUFDMUUsNkRBQTZEO1FBQzdELHNEQUFzRDtRQUN0RCxPQUFPRixHQUFHRyxZQUFZLENBQUMsU0FBU0M7WUFDNUJGO1lBQ0FGLEdBQUdHLFlBQVksQ0FBQ0M7UUFDcEI7SUFDSixHQUFHO1FBQUNKO0tBQUcsR0FBR0EsSUFBSUE7QUFDbEIsRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlUmVhY3RpdmVWYXIuanM/ZDFjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVoYWNrdFwiO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmUgfSBmcm9tIFwiLi91c2VTeW5jRXh0ZXJuYWxTdG9yZS5qc1wiO1xuLyoqXG4gKiBSZWFkcyB0aGUgdmFsdWUgb2YgYSBbcmVhY3RpdmUgdmFyaWFibGVdKGh0dHBzOi8vd3d3LmFwb2xsb2dyYXBocWwuY29tL2RvY3MvcmVhY3QvbG9jYWwtc3RhdGUvcmVhY3RpdmUtdmFyaWFibGVzLykgYW5kIHJlLXJlbmRlcnMgdGhlIGNvbnRhaW5pbmcgY29tcG9uZW50IHdoZW5ldmVyIHRoYXQgdmFyaWFibGUncyB2YWx1ZSBjaGFuZ2VzLiBUaGlzIGVuYWJsZXMgYSByZWFjdGl2ZSB2YXJpYWJsZSB0byB0cmlnZ2VyIGNoYW5nZXMgX3dpdGhvdXRfIHJlbHlpbmcgb24gdGhlIGB1c2VRdWVyeWAgaG9vay5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganN4XG4gKiBpbXBvcnQgeyBtYWtlVmFyLCB1c2VSZWFjdGl2ZVZhciB9IGZyb20gXCJAYXBvbGxvL2NsaWVudFwiO1xuICogZXhwb3J0IGNvbnN0IGNhcnRJdGVtc1ZhciA9IG1ha2VWYXIoW10pO1xuICpcbiAqIGV4cG9ydCBmdW5jdGlvbiBDYXJ0KCkge1xuICogICBjb25zdCBjYXJ0SXRlbXMgPSB1c2VSZWFjdGl2ZVZhcihjYXJ0SXRlbXNWYXIpO1xuICogICAvLyAuLi5cbiAqIH1cbiAqIGBgYFxuICogQHNpbmNlIDMuMi4wXG4gKiBAcGFyYW0gcnYgLSBBIHJlYWN0aXZlIHZhcmlhYmxlLlxuICogQHJldHVybnMgVGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHJlYWN0aXZlIHZhcmlhYmxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVhY3RpdmVWYXIocnYpIHtcbiAgICByZXR1cm4gdXNlU3luY0V4dGVybmFsU3RvcmUoUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgICAvLyBCeSByZXVzaW5nIHRoZSBzYW1lIG9uTmV4dCBmdW5jdGlvbiBpbiB0aGUgbmVzdGVkIGNhbGwgdG9cbiAgICAgICAgLy8gcnYub25OZXh0Q2hhbmdlKG9uTmV4dCksIHdlIGNhbiBrZWVwIHVzaW5nIHRoZSBpbml0aWFsIGNsZWFuLXVwIGZ1bmN0aW9uXG4gICAgICAgIC8vIHJldHVybmVkIGJ5IHJ2Lm9uTmV4dENoYW5nZShmdW5jdGlvbiBvbk5leHQodil7Li4ufSksIHdpdGhvdXQgaGF2aW5nIHRvXG4gICAgICAgIC8vIHJlZ2lzdGVyIHRoZSBuZXcgY2xlYW4tdXAgZnVuY3Rpb24gKHJldHVybmVkIGJ5IHRoZSBuZXN0ZWRcbiAgICAgICAgLy8gcnYub25OZXh0Q2hhbmdlKG9uTmV4dCkpIHdpdGggeWV0IGFub3RoZXIgY2FsbGJhY2suXG4gICAgICAgIHJldHVybiBydi5vbk5leHRDaGFuZ2UoZnVuY3Rpb24gb25OZXh0KCkge1xuICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICBydi5vbk5leHRDaGFuZ2Uob25OZXh0KTtcbiAgICAgICAgfSk7XG4gICAgfSwgW3J2XSksIHJ2LCBydik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VSZWFjdGl2ZVZhci5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZVJlYWN0aXZlVmFyIiwicnYiLCJ1c2VDYWxsYmFjayIsInVwZGF0ZSIsIm9uTmV4dENoYW5nZSIsIm9uTmV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useReactiveVar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useReadQuery.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useReadQuery.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useReadQuery: () => (/* binding */ useReadQuery)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/internal/cache/QueryReference.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/__use.js\");\n/* harmony import */ var _useSuspenseQuery_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useSuspenseQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSuspenseQuery.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n\n\n\n\n\n\nfunction useReadQuery(queryRef) {\n    var unwrapped = (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.unwrapQueryRef)(queryRef);\n    return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_2__.wrapHook)(\"useReadQuery\", _useReadQuery, unwrapped ? unwrapped[\"observable\"] : (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)())(queryRef);\n}\nfunction _useReadQuery(queryRef) {\n    (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.assertWrappedQueryRef)(queryRef);\n    var internalQueryRef = rehackt__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.unwrapQueryRef)(queryRef);\n    }, [\n        queryRef\n    ]);\n    var getPromise = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function() {\n        return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.getWrappedPromise)(queryRef);\n    }, [\n        queryRef\n    ]);\n    if (internalQueryRef.disposed) {\n        internalQueryRef.reinitialize();\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.updateWrappedQueryRef)(queryRef, internalQueryRef.promise);\n    }\n    rehackt__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        return internalQueryRef.retain();\n    }, [\n        internalQueryRef\n    ]);\n    var promise = (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_4__.useSyncExternalStore)(rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(forceUpdate) {\n        return internalQueryRef.listen(function(promise) {\n            (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.updateWrappedQueryRef)(queryRef, promise);\n            forceUpdate();\n        });\n    }, [\n        internalQueryRef,\n        queryRef\n    ]), getPromise, getPromise);\n    var result = (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.__use)(promise);\n    return rehackt__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        return {\n            data: result.data,\n            networkStatus: result.networkStatus,\n            error: (0,_useSuspenseQuery_js__WEBPACK_IMPORTED_MODULE_6__.toApolloError)(result)\n        };\n    }, [\n        result\n    ]);\n} //# sourceMappingURL=useReadQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlUmVhZFF1ZXJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ3VGO0FBQ2xFO0FBQ0E7QUFDVztBQUNWO0FBQ2hELFNBQVNVLGFBQWFDLFFBQVE7SUFDakMsSUFBSUMsWUFBWVQsa0VBQWNBLENBQUNRO0lBQy9CLE9BQU9MLDREQUFRQSxDQUFDLGdCQUFnQk8sZUFBZUQsWUFDM0NBLFNBQVMsQ0FBQyxhQUFhLEdBU3JCSCxvRUFBZUEsSUFBSUU7QUFDN0I7QUFDQSxTQUFTRSxjQUFjRixRQUFRO0lBQzNCVix5RUFBcUJBLENBQUNVO0lBQ3RCLElBQUlHLG1CQUFtQmQsNENBQWEsQ0FBQztRQUFjLE9BQU9HLGtFQUFjQSxDQUFDUTtJQUFXLEdBQUc7UUFBQ0E7S0FBUztJQUNqRyxJQUFJSyxhQUFhaEIsZ0RBQWlCLENBQUM7UUFBYyxPQUFPRSxxRUFBaUJBLENBQUNTO0lBQVcsR0FBRztRQUFDQTtLQUFTO0lBQ2xHLElBQUlHLGlCQUFpQkksUUFBUSxFQUFFO1FBQzNCSixpQkFBaUJLLFlBQVk7UUFDN0JmLHlFQUFxQkEsQ0FBQ08sVUFBVUcsaUJBQWlCTSxPQUFPO0lBQzVEO0lBQ0FwQiw4Q0FBZSxDQUFDO1FBQWMsT0FBT2MsaUJBQWlCUSxNQUFNO0lBQUksR0FBRztRQUFDUjtLQUFpQjtJQUNyRixJQUFJTSxVQUFVWiw4RUFBb0JBLENBQUNSLGdEQUFpQixDQUFDLFNBQVV1QixXQUFXO1FBQ3RFLE9BQU9ULGlCQUFpQlUsTUFBTSxDQUFDLFNBQVVKLE9BQU87WUFDNUNoQix5RUFBcUJBLENBQUNPLFVBQVVTO1lBQ2hDRztRQUNKO0lBQ0osR0FBRztRQUFDVDtRQUFrQkg7S0FBUyxHQUFHSyxZQUFZQTtJQUM5QyxJQUFJUyxTQUFTcEIseURBQUtBLENBQUNlO0lBQ25CLE9BQU9wQiw0Q0FBYSxDQUFDO1FBQ2pCLE9BQU87WUFDSDBCLE1BQU1ELE9BQU9DLElBQUk7WUFDakJDLGVBQWVGLE9BQU9FLGFBQWE7WUFDbkNDLE9BQU9yQixtRUFBYUEsQ0FBQ2tCO1FBQ3pCO0lBQ0osR0FBRztRQUFDQTtLQUFPO0FBQ2YsRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlUmVhZFF1ZXJ5LmpzP2Y0ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlaGFja3RcIjtcbmltcG9ydCB7IGFzc2VydFdyYXBwZWRRdWVyeVJlZiwgZ2V0V3JhcHBlZFByb21pc2UsIHVud3JhcFF1ZXJ5UmVmLCB1cGRhdGVXcmFwcGVkUXVlcnlSZWYsIH0gZnJvbSBcIi4uL2ludGVybmFsL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBfX3VzZSwgd3JhcEhvb2sgfSBmcm9tIFwiLi9pbnRlcm5hbC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdG9BcG9sbG9FcnJvciB9IGZyb20gXCIuL3VzZVN1c3BlbnNlUXVlcnkuanNcIjtcbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlIH0gZnJvbSBcIi4vdXNlU3luY0V4dGVybmFsU3RvcmUuanNcIjtcbmltcG9ydCB7IHVzZUFwb2xsb0NsaWVudCB9IGZyb20gXCIuL3VzZUFwb2xsb0NsaWVudC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlYWRRdWVyeShxdWVyeVJlZikge1xuICAgIHZhciB1bndyYXBwZWQgPSB1bndyYXBRdWVyeVJlZihxdWVyeVJlZik7XG4gICAgcmV0dXJuIHdyYXBIb29rKFwidXNlUmVhZFF1ZXJ5XCIsIF91c2VSZWFkUXVlcnksIHVud3JhcHBlZCA/XG4gICAgICAgIHVud3JhcHBlZFtcIm9ic2VydmFibGVcIl1cbiAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgYSBcInRyYW5zcG9ydGVkXCIgcXVlcnlSZWYgb2JqZWN0LCB3ZSBuZWVkIHRvIHVzZSB0aGVcbiAgICAgICAgLy8gY2xpZW50IHRoYXQncyBhdmFpbGFibGUgdG8gdXMgYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIFJlYWN0IHRyZWVcbiAgICAgICAgLy8gdGhhdCBBcG9sbG9DbGllbnQgd2lsbCB0aGVuIGhhdmUgdGhlIGpvYiB0byByZWNyZWF0ZSBhIHJlYWwgcXVlcnlSZWYgZnJvbVxuICAgICAgICAvLyB0aGUgdHJhbnNwb3J0ZWQgb2JqZWN0XG4gICAgICAgIC8vIFRoaXMgaXMganVzdCBhIGNvbnRleHQgcmVhZCAtIGl0J3MgZmluZSB0byBkbyB0aGlzIGNvbmRpdGlvbmFsbHkuXG4gICAgICAgIC8vIFRoaXMgaG9vayB3cmFwcGVyIGFsc28gc2hvdWxkbid0IGJlIG9wdGltaXplZCBieSBSZWFjdCBDb21waWxlci5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWNvbXBpbGVyL3JlYWN0LWNvbXBpbGVyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICA6IHVzZUFwb2xsb0NsaWVudCgpKShxdWVyeVJlZik7XG59XG5mdW5jdGlvbiBfdXNlUmVhZFF1ZXJ5KHF1ZXJ5UmVmKSB7XG4gICAgYXNzZXJ0V3JhcHBlZFF1ZXJ5UmVmKHF1ZXJ5UmVmKTtcbiAgICB2YXIgaW50ZXJuYWxRdWVyeVJlZiA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkgeyByZXR1cm4gdW53cmFwUXVlcnlSZWYocXVlcnlSZWYpOyB9LCBbcXVlcnlSZWZdKTtcbiAgICB2YXIgZ2V0UHJvbWlzZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldFdyYXBwZWRQcm9taXNlKHF1ZXJ5UmVmKTsgfSwgW3F1ZXJ5UmVmXSk7XG4gICAgaWYgKGludGVybmFsUXVlcnlSZWYuZGlzcG9zZWQpIHtcbiAgICAgICAgaW50ZXJuYWxRdWVyeVJlZi5yZWluaXRpYWxpemUoKTtcbiAgICAgICAgdXBkYXRlV3JhcHBlZFF1ZXJ5UmVmKHF1ZXJ5UmVmLCBpbnRlcm5hbFF1ZXJ5UmVmLnByb21pc2UpO1xuICAgIH1cbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxRdWVyeVJlZi5yZXRhaW4oKTsgfSwgW2ludGVybmFsUXVlcnlSZWZdKTtcbiAgICB2YXIgcHJvbWlzZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChmb3JjZVVwZGF0ZSkge1xuICAgICAgICByZXR1cm4gaW50ZXJuYWxRdWVyeVJlZi5saXN0ZW4oZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgICAgIHVwZGF0ZVdyYXBwZWRRdWVyeVJlZihxdWVyeVJlZiwgcHJvbWlzZSk7XG4gICAgICAgICAgICBmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICB9LCBbaW50ZXJuYWxRdWVyeVJlZiwgcXVlcnlSZWZdKSwgZ2V0UHJvbWlzZSwgZ2V0UHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCA9IF9fdXNlKHByb21pc2UpO1xuICAgIHJldHVybiBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHJlc3VsdC5kYXRhLFxuICAgICAgICAgICAgbmV0d29ya1N0YXR1czogcmVzdWx0Lm5ldHdvcmtTdGF0dXMsXG4gICAgICAgICAgICBlcnJvcjogdG9BcG9sbG9FcnJvcihyZXN1bHQpLFxuICAgICAgICB9O1xuICAgIH0sIFtyZXN1bHRdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVJlYWRRdWVyeS5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJhc3NlcnRXcmFwcGVkUXVlcnlSZWYiLCJnZXRXcmFwcGVkUHJvbWlzZSIsInVud3JhcFF1ZXJ5UmVmIiwidXBkYXRlV3JhcHBlZFF1ZXJ5UmVmIiwiX191c2UiLCJ3cmFwSG9vayIsInRvQXBvbGxvRXJyb3IiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUFwb2xsb0NsaWVudCIsInVzZVJlYWRRdWVyeSIsInF1ZXJ5UmVmIiwidW53cmFwcGVkIiwiX3VzZVJlYWRRdWVyeSIsImludGVybmFsUXVlcnlSZWYiLCJ1c2VNZW1vIiwiZ2V0UHJvbWlzZSIsInVzZUNhbGxiYWNrIiwiZGlzcG9zZWQiLCJyZWluaXRpYWxpemUiLCJwcm9taXNlIiwidXNlRWZmZWN0IiwicmV0YWluIiwiZm9yY2VVcGRhdGUiLCJsaXN0ZW4iLCJyZXN1bHQiLCJkYXRhIiwibmV0d29ya1N0YXR1cyIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useReadQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useSubscription.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useSubscription.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSubscription: () => (/* binding */ useSubscription)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _internal_useDeepMemo_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/useDeepMemo.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\n/* harmony import */ var _useQuery_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js\");\n/* harmony import */ var _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/useIsomorphicLayoutEffect.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n * @remarks\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(\n *     query,\n *     {\n *       onData({ data }) {\n *         setAccumulatedData((prev) => [...prev, data])\n *       }\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @since 3.0.0\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */ function useSubscription(subscription, options) {\n    if (options === void 0) {\n        options = Object.create(null);\n    }\n    var hasIssuedDeprecationWarningRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(options.client);\n    (0,_parser_index_js__WEBPACK_IMPORTED_MODULE_4__.verifyDocumentType)(subscription, _parser_index_js__WEBPACK_IMPORTED_MODULE_4__.DocumentType.Subscription);\n    if (!hasIssuedDeprecationWarningRef.current) {\n        hasIssuedDeprecationWarningRef.current = true;\n        if (options.onSubscriptionData) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(options.onData ? 53 : 54);\n        }\n        if (options.onSubscriptionComplete) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(options.onComplete ? 55 : 56);\n        }\n    }\n    var skip = options.skip, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, shouldResubscribe = options.shouldResubscribe, context = options.context, extensions = options.extensions, ignoreResults = options.ignoreResults;\n    var variables = (0,_internal_useDeepMemo_js__WEBPACK_IMPORTED_MODULE_5__.useDeepMemo)(function() {\n        return options.variables;\n    }, [\n        options.variables\n    ]);\n    var recreate = function() {\n        return createSubscription(client, subscription, variables, fetchPolicy, errorPolicy, context, extensions);\n    };\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_1__.useState(options.skip ? null : recreate), observable = _a[0], setObservable = _a[1];\n    var recreateRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(recreate);\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_6__.useIsomorphicLayoutEffect)(function() {\n        recreateRef.current = recreate;\n    });\n    if (skip) {\n        if (observable) {\n            setObservable(observable = null);\n        }\n    } else if (!observable || (client !== observable.__.client || subscription !== observable.__.query || fetchPolicy !== observable.__.fetchPolicy || errorPolicy !== observable.__.errorPolicy || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(variables, observable.__.variables)) && (typeof shouldResubscribe === \"function\" ? !!shouldResubscribe(options) : shouldResubscribe) !== false) {\n        setObservable(observable = recreate());\n    }\n    var optionsRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(options);\n    rehackt__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        optionsRef.current = options;\n    });\n    var fallbackLoading = !skip && !ignoreResults;\n    var fallbackResult = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return {\n            loading: fallbackLoading,\n            error: void 0,\n            data: void 0,\n            variables: variables\n        };\n    }, [\n        fallbackLoading,\n        variables\n    ]);\n    var ignoreResultsRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(ignoreResults);\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_6__.useIsomorphicLayoutEffect)(function() {\n        // We cannot reference `ignoreResults` directly in the effect below\n        // it would add a dependency to the `useEffect` deps array, which means the\n        // subscription would be recreated if `ignoreResults` changes\n        // As a result, on resubscription, the last result would be re-delivered,\n        // rendering the component one additional time, and re-triggering `onData`.\n        // The same applies to `fetchPolicy`, which results in a new `observable`\n        // being created. We cannot really avoid it in that case, but we can at least\n        // avoid it for `ignoreResults`.\n        ignoreResultsRef.current = ignoreResults;\n    });\n    var ret = (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_7__.useSyncExternalStore)(rehackt__WEBPACK_IMPORTED_MODULE_1__.useCallback(function(update) {\n        if (!observable) {\n            return function() {};\n        }\n        var subscriptionStopped = false;\n        var variables = observable.__.variables;\n        var client = observable.__.client;\n        var subscription = observable.subscribe({\n            next: function(fetchResult) {\n                var _a, _b;\n                if (subscriptionStopped) {\n                    return;\n                }\n                var result = {\n                    loading: false,\n                    // TODO: fetchResult.data can be null but SubscriptionResult.data\n                    // expects TData | undefined only\n                    data: fetchResult.data,\n                    error: (0,_useQuery_js__WEBPACK_IMPORTED_MODULE_8__.toApolloError)(fetchResult),\n                    variables: variables\n                };\n                observable.__.setResult(result);\n                if (!ignoreResultsRef.current) update();\n                if (result.error) {\n                    (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, result.error);\n                } else if (optionsRef.current.onData) {\n                    optionsRef.current.onData({\n                        client: client,\n                        data: result\n                    });\n                } else if (optionsRef.current.onSubscriptionData) {\n                    optionsRef.current.onSubscriptionData({\n                        client: client,\n                        subscriptionData: result\n                    });\n                }\n            },\n            error: function(error) {\n                var _a, _b;\n                error = error instanceof _core_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError ? error : new _core_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                    protocolErrors: [\n                        error\n                    ]\n                });\n                if (!subscriptionStopped) {\n                    observable.__.setResult({\n                        loading: false,\n                        data: void 0,\n                        error: error,\n                        variables: variables\n                    });\n                    if (!ignoreResultsRef.current) update();\n                    (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n                }\n            },\n            complete: function() {\n                if (!subscriptionStopped) {\n                    if (optionsRef.current.onComplete) {\n                        optionsRef.current.onComplete();\n                    } else if (optionsRef.current.onSubscriptionComplete) {\n                        optionsRef.current.onSubscriptionComplete();\n                    }\n                }\n            }\n        });\n        return function() {\n            // immediately stop receiving subscription values, but do not unsubscribe\n            // until after a short delay in case another useSubscription hook is\n            // reusing the same underlying observable and is about to subscribe\n            subscriptionStopped = true;\n            setTimeout(function() {\n                subscription.unsubscribe();\n            });\n        };\n    }, [\n        observable\n    ]), function() {\n        return observable && !skip && !ignoreResults ? observable.__.result : fallbackResult;\n    }, function() {\n        return fallbackResult;\n    });\n    var restart = rehackt__WEBPACK_IMPORTED_MODULE_1__.useCallback(function() {\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!optionsRef.current.skip, 57);\n        setObservable(recreateRef.current());\n    }, [\n        optionsRef,\n        recreateRef\n    ]);\n    return rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_10__.__assign)({}, ret), {\n            restart: restart\n        });\n    }, [\n        ret,\n        restart\n    ]);\n}\nfunction createSubscription(client, query, variables, fetchPolicy, errorPolicy, context, extensions) {\n    var options = {\n        query: query,\n        variables: variables,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy,\n        context: context,\n        extensions: extensions\n    };\n    var __ = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_10__.__assign)({}, options), {\n        client: client,\n        result: {\n            loading: true,\n            data: void 0,\n            error: void 0,\n            variables: variables\n        },\n        setResult: function(result) {\n            __.result = result;\n        }\n    });\n    var observable = null;\n    return Object.assign(new _core_index_js__WEBPACK_IMPORTED_MODULE_11__.Observable(function(observer) {\n        // lazily start the subscription when the first observer subscribes\n        // to get around strict mode\n        if (!observable) {\n            observable = client.subscribe(options);\n        }\n        var sub = observable.subscribe(observer);\n        return function() {\n            return sub.unsubscribe();\n        };\n    }), {\n        /**\n         * A tracking object to store details about the observable and the latest result of the subscription.\n         */ __: __\n    });\n} //# sourceMappingURL=useSubscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlU3Vic2NyaXB0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDNEI7QUFDNUI7QUFDSztBQUNnQztBQUNSO0FBQ1A7QUFDQztBQUNTO0FBQ25CO0FBQ3NDO0FBQ3BGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWdGQyxHQUNNLFNBQVNhLGdCQUFnQkMsWUFBWSxFQUFFQyxPQUFPO0lBQ2pELElBQUlBLFlBQVksS0FBSyxHQUFHO1FBQUVBLFVBQVVDLE9BQU9DLE1BQU0sQ0FBQztJQUFPO0lBQ3pELElBQUlDLGlDQUFpQ2hCLDJDQUFZLENBQUM7SUFDbEQsSUFBSWtCLFNBQVNaLG9FQUFlQSxDQUFDTyxRQUFRSyxNQUFNO0lBQzNDZixvRUFBa0JBLENBQUNTLGNBQWNWLDBEQUFZQSxDQUFDaUIsWUFBWTtJQUMxRCxJQUFJLENBQUNILCtCQUErQkksT0FBTyxFQUFFO1FBQ3pDSiwrQkFBK0JJLE9BQU8sR0FBRztRQUN6QyxJQUFJUCxRQUFRUSxrQkFBa0IsRUFBRTtZQUM1QkMsV0FBV0MsT0FBTyxLQUFLLFNBQVN4QixrRUFBU0EsQ0FBQ3lCLElBQUksQ0FBQ1gsUUFBUVksTUFBTSxHQUFHLEtBQUs7UUFDekU7UUFDQSxJQUFJWixRQUFRYSxzQkFBc0IsRUFBRTtZQUNoQ0osV0FBV0MsT0FBTyxLQUFLLFNBQVN4QixrRUFBU0EsQ0FBQ3lCLElBQUksQ0FBQ1gsUUFBUWMsVUFBVSxHQUFHLEtBQUs7UUFDN0U7SUFDSjtJQUNBLElBQUlDLE9BQU9mLFFBQVFlLElBQUksRUFBRUMsY0FBY2hCLFFBQVFnQixXQUFXLEVBQUVDLGNBQWNqQixRQUFRaUIsV0FBVyxFQUFFQyxvQkFBb0JsQixRQUFRa0IsaUJBQWlCLEVBQUVDLFVBQVVuQixRQUFRbUIsT0FBTyxFQUFFQyxhQUFhcEIsUUFBUW9CLFVBQVUsRUFBRUMsZ0JBQWdCckIsUUFBUXFCLGFBQWE7SUFDL08sSUFBSUMsWUFBWTVCLHFFQUFXQSxDQUFDO1FBQWMsT0FBT00sUUFBUXNCLFNBQVM7SUFBRSxHQUFHO1FBQUN0QixRQUFRc0IsU0FBUztLQUFDO0lBQzFGLElBQUlDLFdBQVc7UUFDWCxPQUFPQyxtQkFBbUJuQixRQUFRTixjQUFjdUIsV0FBV04sYUFBYUMsYUFBYUUsU0FBU0M7SUFDbEc7SUFDQSxJQUFJSyxLQUFLdEMsNkNBQWMsQ0FBQ2EsUUFBUWUsSUFBSSxHQUFHLE9BQU9RLFdBQVdJLGFBQWFGLEVBQUUsQ0FBQyxFQUFFLEVBQUVHLGdCQUFnQkgsRUFBRSxDQUFDLEVBQUU7SUFDbEcsSUFBSUksY0FBYzFDLDJDQUFZLENBQUNvQztJQUMvQjFCLGlHQUF5QkEsQ0FBQztRQUN0QmdDLFlBQVl0QixPQUFPLEdBQUdnQjtJQUMxQjtJQUNBLElBQUlSLE1BQU07UUFDTixJQUFJWSxZQUFZO1lBQ1pDLGNBQWVELGFBQWE7UUFDaEM7SUFDSixPQUNLLElBQUksQ0FBQ0EsY0FDTCxDQUFDdEIsV0FBV3NCLFdBQVdHLEVBQUUsQ0FBQ3pCLE1BQU0sSUFDN0JOLGlCQUFpQjRCLFdBQVdHLEVBQUUsQ0FBQ0MsS0FBSyxJQUNwQ2YsZ0JBQWdCVyxXQUFXRyxFQUFFLENBQUNkLFdBQVcsSUFDekNDLGdCQUFnQlUsV0FBV0csRUFBRSxDQUFDYixXQUFXLElBQ3pDLENBQUM3QixvREFBS0EsQ0FBQ2tDLFdBQVdLLFdBQVdHLEVBQUUsQ0FBQ1IsU0FBUyxNQUN6QyxDQUFDLE9BQU9KLHNCQUFzQixhQUMxQixDQUFDLENBQUNBLGtCQUFrQmxCLFdBQ2xCa0IsaUJBQWdCLE1BQU8sT0FBUTtRQUN6Q1UsY0FBZUQsYUFBYUo7SUFDaEM7SUFDQSxJQUFJUyxhQUFhN0MsMkNBQVksQ0FBQ2E7SUFDOUJiLDhDQUFlLENBQUM7UUFDWjZDLFdBQVd6QixPQUFPLEdBQUdQO0lBQ3pCO0lBQ0EsSUFBSWtDLGtCQUFrQixDQUFDbkIsUUFBUSxDQUFDTTtJQUNoQyxJQUFJYyxpQkFBaUJoRCw0Q0FBYSxDQUFDO1FBQWMsT0FBUTtZQUNyRGtELFNBQVNIO1lBQ1RJLE9BQU8sS0FBSztZQUNaQyxNQUFNLEtBQUs7WUFDWGpCLFdBQVdBO1FBQ2Y7SUFBSSxHQUFHO1FBQUNZO1FBQWlCWjtLQUFVO0lBQ25DLElBQUlrQixtQkFBbUJyRCwyQ0FBWSxDQUFDa0M7SUFDcEN4QixpR0FBeUJBLENBQUM7UUFDdEIsbUVBQW1FO1FBQ25FLDJFQUEyRTtRQUMzRSw2REFBNkQ7UUFDN0QseUVBQXlFO1FBQ3pFLDJFQUEyRTtRQUMzRSx5RUFBeUU7UUFDekUsNkVBQTZFO1FBQzdFLGdDQUFnQztRQUNoQzJDLGlCQUFpQmpDLE9BQU8sR0FBR2M7SUFDL0I7SUFDQSxJQUFJb0IsTUFBTTlDLDhFQUFvQkEsQ0FBQ1IsZ0RBQWlCLENBQUMsU0FBVXdELE1BQU07UUFDN0QsSUFBSSxDQUFDaEIsWUFBWTtZQUNiLE9BQU8sWUFBYztRQUN6QjtRQUNBLElBQUlpQixzQkFBc0I7UUFDMUIsSUFBSXRCLFlBQVlLLFdBQVdHLEVBQUUsQ0FBQ1IsU0FBUztRQUN2QyxJQUFJakIsU0FBU3NCLFdBQVdHLEVBQUUsQ0FBQ3pCLE1BQU07UUFDakMsSUFBSU4sZUFBZTRCLFdBQVdrQixTQUFTLENBQUM7WUFDcENDLE1BQU0sU0FBVUMsV0FBVztnQkFDdkIsSUFBSXRCLElBQUl1QjtnQkFDUixJQUFJSixxQkFBcUI7b0JBQ3JCO2dCQUNKO2dCQUNBLElBQUlLLFNBQVM7b0JBQ1RaLFNBQVM7b0JBQ1QsaUVBQWlFO29CQUNqRSxpQ0FBaUM7b0JBQ2pDRSxNQUFNUSxZQUFZUixJQUFJO29CQUN0QkQsT0FBTzFDLDJEQUFhQSxDQUFDbUQ7b0JBQ3JCekIsV0FBV0E7Z0JBQ2Y7Z0JBQ0FLLFdBQVdHLEVBQUUsQ0FBQ29CLFNBQVMsQ0FBQ0Q7Z0JBQ3hCLElBQUksQ0FBQ1QsaUJBQWlCakMsT0FBTyxFQUN6Qm9DO2dCQUNKLElBQUlNLE9BQU9YLEtBQUssRUFBRTtvQkFDYlUsQ0FBQUEsS0FBSyxDQUFDdkIsS0FBS08sV0FBV3pCLE9BQU8sRUFBRTRDLE9BQU8sTUFBTSxRQUFRSCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdJLElBQUksQ0FBQzNCLElBQUl3QixPQUFPWCxLQUFLO2dCQUMxRyxPQUNLLElBQUlOLFdBQVd6QixPQUFPLENBQUNLLE1BQU0sRUFBRTtvQkFDaENvQixXQUFXekIsT0FBTyxDQUFDSyxNQUFNLENBQUM7d0JBQ3RCUCxRQUFRQTt3QkFDUmtDLE1BQU1VO29CQUNWO2dCQUNKLE9BQ0ssSUFBSWpCLFdBQVd6QixPQUFPLENBQUNDLGtCQUFrQixFQUFFO29CQUM1Q3dCLFdBQVd6QixPQUFPLENBQUNDLGtCQUFrQixDQUFDO3dCQUNsQ0gsUUFBUUE7d0JBQ1JnRCxrQkFBa0JKO29CQUN0QjtnQkFDSjtZQUNKO1lBQ0FYLE9BQU8sU0FBVUEsS0FBSztnQkFDbEIsSUFBSWIsSUFBSXVCO2dCQUNSVixRQUNJQSxpQkFBaUIvQyx1REFBV0EsR0FBRytDLFFBQVMsSUFBSS9DLHVEQUFXQSxDQUFDO29CQUFFK0QsZ0JBQWdCO3dCQUFDaEI7cUJBQU07Z0JBQUM7Z0JBQ3RGLElBQUksQ0FBQ00scUJBQXFCO29CQUN0QmpCLFdBQVdHLEVBQUUsQ0FBQ29CLFNBQVMsQ0FBQzt3QkFDcEJiLFNBQVM7d0JBQ1RFLE1BQU0sS0FBSzt3QkFDWEQsT0FBT0E7d0JBQ1BoQixXQUFXQTtvQkFDZjtvQkFDQSxJQUFJLENBQUNrQixpQkFBaUJqQyxPQUFPLEVBQ3pCb0M7b0JBQ0hLLENBQUFBLEtBQUssQ0FBQ3ZCLEtBQUtPLFdBQVd6QixPQUFPLEVBQUU0QyxPQUFPLE1BQU0sUUFBUUgsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHSSxJQUFJLENBQUMzQixJQUFJYTtnQkFDOUY7WUFDSjtZQUNBaUIsVUFBVTtnQkFDTixJQUFJLENBQUNYLHFCQUFxQjtvQkFDdEIsSUFBSVosV0FBV3pCLE9BQU8sQ0FBQ08sVUFBVSxFQUFFO3dCQUMvQmtCLFdBQVd6QixPQUFPLENBQUNPLFVBQVU7b0JBQ2pDLE9BQ0ssSUFBSWtCLFdBQVd6QixPQUFPLENBQUNNLHNCQUFzQixFQUFFO3dCQUNoRG1CLFdBQVd6QixPQUFPLENBQUNNLHNCQUFzQjtvQkFDN0M7Z0JBQ0o7WUFDSjtRQUNKO1FBQ0EsT0FBTztZQUNILHlFQUF5RTtZQUN6RSxvRUFBb0U7WUFDcEUsbUVBQW1FO1lBQ25FK0Isc0JBQXNCO1lBQ3RCWSxXQUFXO2dCQUNQekQsYUFBYTBELFdBQVc7WUFDNUI7UUFDSjtJQUNKLEdBQUc7UUFBQzlCO0tBQVcsR0FBRztRQUNkLE9BQU9BLGNBQWMsQ0FBQ1osUUFBUSxDQUFDTSxnQkFDM0JNLFdBQVdHLEVBQUUsQ0FBQ21CLE1BQU0sR0FDbEJkO0lBQ1YsR0FBRztRQUFjLE9BQU9BO0lBQWdCO0lBQ3hDLElBQUl1QixVQUFVdkUsZ0RBQWlCLENBQUM7UUFDNUJELHNFQUFTQSxDQUFDLENBQUM4QyxXQUFXekIsT0FBTyxDQUFDUSxJQUFJLEVBQUU7UUFDcENhLGNBQWNDLFlBQVl0QixPQUFPO0lBQ3JDLEdBQUc7UUFBQ3lCO1FBQVlIO0tBQVk7SUFDNUIsT0FBTzFDLDRDQUFhLENBQUM7UUFBYyxPQUFRRixnREFBUUEsQ0FBQ0EsZ0RBQVFBLENBQUMsQ0FBQyxHQUFHd0QsTUFBTTtZQUFFaUIsU0FBU0E7UUFBUTtJQUFLLEdBQUc7UUFBQ2pCO1FBQUtpQjtLQUFRO0FBQ3BIO0FBQ0EsU0FBU2xDLG1CQUFtQm5CLE1BQU0sRUFBRTBCLEtBQUssRUFBRVQsU0FBUyxFQUFFTixXQUFXLEVBQUVDLFdBQVcsRUFBRUUsT0FBTyxFQUFFQyxVQUFVO0lBQy9GLElBQUlwQixVQUFVO1FBQ1YrQixPQUFPQTtRQUNQVCxXQUFXQTtRQUNYTixhQUFhQTtRQUNiQyxhQUFhQTtRQUNiRSxTQUFTQTtRQUNUQyxZQUFZQTtJQUNoQjtJQUNBLElBQUlVLEtBQUs3QyxnREFBUUEsQ0FBQ0EsZ0RBQVFBLENBQUMsQ0FBQyxHQUFHZSxVQUFVO1FBQUVLLFFBQVFBO1FBQVE0QyxRQUFRO1lBQzNEWixTQUFTO1lBQ1RFLE1BQU0sS0FBSztZQUNYRCxPQUFPLEtBQUs7WUFDWmhCLFdBQVdBO1FBQ2Y7UUFBRzRCLFdBQVcsU0FBVUQsTUFBTTtZQUMxQm5CLEdBQUdtQixNQUFNLEdBQUdBO1FBQ2hCO0lBQUU7SUFDTixJQUFJdEIsYUFBYTtJQUNqQixPQUFPMUIsT0FBTzBELE1BQU0sQ0FBQyxJQUFJbkUsdURBQVVBLENBQUMsU0FBVW9FLFFBQVE7UUFDbEQsbUVBQW1FO1FBQ25FLDRCQUE0QjtRQUM1QixJQUFJLENBQUNqQyxZQUFZO1lBQ2JBLGFBQWF0QixPQUFPd0MsU0FBUyxDQUFDN0M7UUFDbEM7UUFDQSxJQUFJNkQsTUFBTWxDLFdBQVdrQixTQUFTLENBQUNlO1FBQy9CLE9BQU87WUFBYyxPQUFPQyxJQUFJSixXQUFXO1FBQUk7SUFDbkQsSUFBSTtRQUNBOztTQUVDLEdBQ0QzQixJQUFJQTtJQUNSO0FBQ0osRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlU3Vic2NyaXB0aW9uLmpzPzI1ZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlaGFja3RcIjtcbmltcG9ydCB7IGVxdWFsIH0gZnJvbSBcIkB3cnkvZXF1YWxpdHlcIjtcbmltcG9ydCB7IERvY3VtZW50VHlwZSwgdmVyaWZ5RG9jdW1lbnRUeXBlIH0gZnJvbSBcIi4uL3BhcnNlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQXBvbGxvRXJyb3IsIE9ic2VydmFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdXNlQXBvbGxvQ2xpZW50IH0gZnJvbSBcIi4vdXNlQXBvbGxvQ2xpZW50LmpzXCI7XG5pbXBvcnQgeyB1c2VEZWVwTWVtbyB9IGZyb20gXCIuL2ludGVybmFsL3VzZURlZXBNZW1vLmpzXCI7XG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gXCIuL3VzZVN5bmNFeHRlcm5hbFN0b3JlLmpzXCI7XG5pbXBvcnQgeyB0b0Fwb2xsb0Vycm9yIH0gZnJvbSBcIi4vdXNlUXVlcnkuanNcIjtcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tIFwiLi9pbnRlcm5hbC91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzXCI7XG4vKipcbiAqID4gUmVmZXIgdG8gdGhlIFtTdWJzY3JpcHRpb25zXShodHRwczovL3d3dy5hcG9sbG9ncmFwaHFsLmNvbS9kb2NzL3JlYWN0L2RhdGEvc3Vic2NyaXB0aW9ucy8pIHNlY3Rpb24gZm9yIGEgbW9yZSBpbi1kZXB0aCBvdmVydmlldyBvZiBgdXNlU3Vic2NyaXB0aW9uYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganN4XG4gKiBjb25zdCBDT01NRU5UU19TVUJTQ1JJUFRJT04gPSBncWxgXG4gKiAgIHN1YnNjcmlwdGlvbiBPbkNvbW1lbnRBZGRlZCgkcmVwb0Z1bGxOYW1lOiBTdHJpbmchKSB7XG4gKiAgICAgY29tbWVudEFkZGVkKHJlcG9GdWxsTmFtZTogJHJlcG9GdWxsTmFtZSkge1xuICogICAgICAgaWRcbiAqICAgICAgIGNvbnRlbnRcbiAqICAgICB9XG4gKiAgIH1cbiAqIGA7XG4gKlxuICogZnVuY3Rpb24gRG9udFJlYWRUaGVDb21tZW50cyh7IHJlcG9GdWxsTmFtZSB9KSB7XG4gKiAgIGNvbnN0IHtcbiAqICAgICBkYXRhOiB7IGNvbW1lbnRBZGRlZCB9LFxuICogICAgIGxvYWRpbmcsXG4gKiAgIH0gPSB1c2VTdWJzY3JpcHRpb24oQ09NTUVOVFNfU1VCU0NSSVBUSU9OLCB7IHZhcmlhYmxlczogeyByZXBvRnVsbE5hbWUgfSB9KTtcbiAqICAgcmV0dXJuIDxoND5OZXcgY29tbWVudDogeyFsb2FkaW5nICYmIGNvbW1lbnRBZGRlZC5jb250ZW50fTwvaDQ+O1xuICogfVxuICogYGBgXG4gKiBAcmVtYXJrc1xuICogIyMjIyBDb25zaWRlciB1c2luZyBgb25EYXRhYCBpbnN0ZWFkIG9mIGB1c2VFZmZlY3RgXG4gKlxuICogSWYgeW91IHdhbnQgdG8gcmVhY3QgdG8gaW5jb21pbmcgZGF0YSwgcGxlYXNlIHVzZSB0aGUgYG9uRGF0YWAgb3B0aW9uIGluc3RlYWQgb2YgYHVzZUVmZmVjdGAuXG4gKiBTdGF0ZSB1cGRhdGVzIHlvdSBtYWtlIGluc2lkZSBhIGB1c2VFZmZlY3RgIGhvb2sgbWlnaHQgY2F1c2UgYWRkaXRpb25hbCByZXJlbmRlcnMsIGFuZCBgdXNlRWZmZWN0YCBpcyBtb3N0bHkgbWVhbnQgZm9yIHNpZGUgZWZmZWN0cyBvZiByZW5kZXJpbmcsIG5vdCBhcyBhbiBldmVudCBoYW5kbGVyLlxuICogU3RhdGUgdXBkYXRlcyBtYWRlIGluIGFuIGV2ZW50IGhhbmRsZXIgbGlrZSBgb25EYXRhYCBtaWdodCAtIGRlcGVuZGluZyBvbiB0aGUgUmVhY3QgdmVyc2lvbiAtIGJlIGJhdGNoZWQgYW5kIGNhdXNlIG9ubHkgYSBzaW5nbGUgcmVyZW5kZXIuXG4gKlxuICogQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBjb21wb25lbnQ6XG4gKlxuICogYGBganN4XG4gKiBleHBvcnQgZnVuY3Rpb24gU3Vic2NyaXB0aW9ucygpIHtcbiAqICAgY29uc3QgeyBkYXRhLCBlcnJvciwgbG9hZGluZyB9ID0gdXNlU3Vic2NyaXB0aW9uKHF1ZXJ5KTtcbiAqICAgY29uc3QgW2FjY3VtdWxhdGVkRGF0YSwgc2V0QWNjdW11bGF0ZWREYXRhXSA9IHVzZVN0YXRlKFtdKTtcbiAqXG4gKiAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gKiAgICAgc2V0QWNjdW11bGF0ZWREYXRhKChwcmV2KSA9PiBbLi4ucHJldiwgZGF0YV0pO1xuICogICB9LCBbZGF0YV0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8PlxuICogICAgICAge2xvYWRpbmcgJiYgPHA+TG9hZGluZy4uLjwvcD59XG4gKiAgICAgICB7SlNPTi5zdHJpbmdpZnkoYWNjdW11bGF0ZWREYXRhLCB1bmRlZmluZWQsIDIpfVxuICogICAgIDwvPlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogSW5zdGVhZCBvZiB1c2luZyBgdXNlRWZmZWN0YCBoZXJlLCB3ZSBjYW4gcmUtd3JpdGUgdGhpcyBjb21wb25lbnQgdG8gdXNlIHRoZSBgb25EYXRhYCBjYWxsYmFjayBmdW5jdGlvbiBhY2NlcHRlZCBpbiBgdXNlU3Vic2NyaXB0aW9uYCdzIGBvcHRpb25zYCBvYmplY3Q6XG4gKlxuICogYGBganN4XG4gKiBleHBvcnQgZnVuY3Rpb24gU3Vic2NyaXB0aW9ucygpIHtcbiAqICAgY29uc3QgW2FjY3VtdWxhdGVkRGF0YSwgc2V0QWNjdW11bGF0ZWREYXRhXSA9IHVzZVN0YXRlKFtdKTtcbiAqICAgY29uc3QgeyBkYXRhLCBlcnJvciwgbG9hZGluZyB9ID0gdXNlU3Vic2NyaXB0aW9uKFxuICogICAgIHF1ZXJ5LFxuICogICAgIHtcbiAqICAgICAgIG9uRGF0YSh7IGRhdGEgfSkge1xuICogICAgICAgICBzZXRBY2N1bXVsYXRlZERhdGEoKHByZXYpID0+IFsuLi5wcmV2LCBkYXRhXSlcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgICk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDw+XG4gKiAgICAgICB7bG9hZGluZyAmJiA8cD5Mb2FkaW5nLi4uPC9wPn1cbiAqICAgICAgIHtKU09OLnN0cmluZ2lmeShhY2N1bXVsYXRlZERhdGEsIHVuZGVmaW5lZCwgMil9XG4gKiAgICAgPC8+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiA+IOKaoO+4jyAqKk5vdGU6KiogVGhlIGB1c2VTdWJzY3JpcHRpb25gIG9wdGlvbiBgb25EYXRhYCBpcyBhdmFpbGFibGUgaW4gQXBvbGxvIENsaWVudCA+PSAzLjcuIEluIHByZXZpb3VzIHZlcnNpb25zLCB0aGUgZXF1aXZhbGVudCBvcHRpb24gaXMgbmFtZWQgYG9uU3Vic2NyaXB0aW9uRGF0YWAuXG4gKlxuICogTm93LCB0aGUgZmlyc3QgbWVzc2FnZSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBgYWNjdW11bGF0ZWREYXRhYCBhcnJheSBzaW5jZSBgb25EYXRhYCBpcyBjYWxsZWQgX2JlZm9yZV8gdGhlIGNvbXBvbmVudCByZS1yZW5kZXJzLiBSZWFjdCAxOCBhdXRvbWF0aWMgYmF0Y2hpbmcgaXMgc3RpbGwgaW4gZWZmZWN0IGFuZCByZXN1bHRzIGluIGEgc2luZ2xlIHJlLXJlbmRlciwgYnV0IHdpdGggYG9uRGF0YWAgd2UgY2FuIGd1YXJhbnRlZSBlYWNoIG1lc3NhZ2UgcmVjZWl2ZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBtb3VudHMgaXMgYWRkZWQgdG8gYGFjY3VtdWxhdGVkRGF0YWAuXG4gKlxuICogQHNpbmNlIDMuMC4wXG4gKiBAcGFyYW0gc3Vic2NyaXB0aW9uIC0gQSBHcmFwaFFMIHN1YnNjcmlwdGlvbiBkb2N1bWVudCBwYXJzZWQgaW50byBhbiBBU1QgYnkgYGdxbGAuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY29udHJvbCBob3cgdGhlIHN1YnNjcmlwdGlvbiBpcyBleGVjdXRlZC5cbiAqIEByZXR1cm5zIFF1ZXJ5IHJlc3VsdCBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpOyB9XG4gICAgdmFyIGhhc0lzc3VlZERlcHJlY2F0aW9uV2FybmluZ1JlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgdmFyIGNsaWVudCA9IHVzZUFwb2xsb0NsaWVudChvcHRpb25zLmNsaWVudCk7XG4gICAgdmVyaWZ5RG9jdW1lbnRUeXBlKHN1YnNjcmlwdGlvbiwgRG9jdW1lbnRUeXBlLlN1YnNjcmlwdGlvbik7XG4gICAgaWYgKCFoYXNJc3N1ZWREZXByZWNhdGlvbldhcm5pbmdSZWYuY3VycmVudCkge1xuICAgICAgICBoYXNJc3N1ZWREZXByZWNhdGlvbldhcm5pbmdSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgIGlmIChvcHRpb25zLm9uU3Vic2NyaXB0aW9uRGF0YSkge1xuICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQud2FybihvcHRpb25zLm9uRGF0YSA/IDUzIDogNTQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm9uU3Vic2NyaXB0aW9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50Lndhcm4ob3B0aW9ucy5vbkNvbXBsZXRlID8gNTUgOiA1Nik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHNraXAgPSBvcHRpb25zLnNraXAsIGZldGNoUG9saWN5ID0gb3B0aW9ucy5mZXRjaFBvbGljeSwgZXJyb3JQb2xpY3kgPSBvcHRpb25zLmVycm9yUG9saWN5LCBzaG91bGRSZXN1YnNjcmliZSA9IG9wdGlvbnMuc2hvdWxkUmVzdWJzY3JpYmUsIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQsIGV4dGVuc2lvbnMgPSBvcHRpb25zLmV4dGVuc2lvbnMsIGlnbm9yZVJlc3VsdHMgPSBvcHRpb25zLmlnbm9yZVJlc3VsdHM7XG4gICAgdmFyIHZhcmlhYmxlcyA9IHVzZURlZXBNZW1vKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9wdGlvbnMudmFyaWFibGVzOyB9LCBbb3B0aW9ucy52YXJpYWJsZXNdKTtcbiAgICB2YXIgcmVjcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVTdWJzY3JpcHRpb24oY2xpZW50LCBzdWJzY3JpcHRpb24sIHZhcmlhYmxlcywgZmV0Y2hQb2xpY3ksIGVycm9yUG9saWN5LCBjb250ZXh0LCBleHRlbnNpb25zKTtcbiAgICB9O1xuICAgIHZhciBfYSA9IFJlYWN0LnVzZVN0YXRlKG9wdGlvbnMuc2tpcCA/IG51bGwgOiByZWNyZWF0ZSksIG9ic2VydmFibGUgPSBfYVswXSwgc2V0T2JzZXJ2YWJsZSA9IF9hWzFdO1xuICAgIHZhciByZWNyZWF0ZVJlZiA9IFJlYWN0LnVzZVJlZihyZWNyZWF0ZSk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlY3JlYXRlUmVmLmN1cnJlbnQgPSByZWNyZWF0ZTtcbiAgICB9KTtcbiAgICBpZiAoc2tpcCkge1xuICAgICAgICBpZiAob2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgc2V0T2JzZXJ2YWJsZSgob2JzZXJ2YWJsZSA9IG51bGwpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICghb2JzZXJ2YWJsZSB8fFxuICAgICAgICAoKGNsaWVudCAhPT0gb2JzZXJ2YWJsZS5fXy5jbGllbnQgfHxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiAhPT0gb2JzZXJ2YWJsZS5fXy5xdWVyeSB8fFxuICAgICAgICAgICAgZmV0Y2hQb2xpY3kgIT09IG9ic2VydmFibGUuX18uZmV0Y2hQb2xpY3kgfHxcbiAgICAgICAgICAgIGVycm9yUG9saWN5ICE9PSBvYnNlcnZhYmxlLl9fLmVycm9yUG9saWN5IHx8XG4gICAgICAgICAgICAhZXF1YWwodmFyaWFibGVzLCBvYnNlcnZhYmxlLl9fLnZhcmlhYmxlcykpICYmXG4gICAgICAgICAgICAodHlwZW9mIHNob3VsZFJlc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCIgP1xuICAgICAgICAgICAgICAgICEhc2hvdWxkUmVzdWJzY3JpYmUob3B0aW9ucylcbiAgICAgICAgICAgICAgICA6IHNob3VsZFJlc3Vic2NyaWJlKSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNldE9ic2VydmFibGUoKG9ic2VydmFibGUgPSByZWNyZWF0ZSgpKSk7XG4gICAgfVxuICAgIHZhciBvcHRpb25zUmVmID0gUmVhY3QudXNlUmVmKG9wdGlvbnMpO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9wdGlvbnNSZWYuY3VycmVudCA9IG9wdGlvbnM7XG4gICAgfSk7XG4gICAgdmFyIGZhbGxiYWNrTG9hZGluZyA9ICFza2lwICYmICFpZ25vcmVSZXN1bHRzO1xuICAgIHZhciBmYWxsYmFja1Jlc3VsdCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICAgICAgbG9hZGluZzogZmFsbGJhY2tMb2FkaW5nLFxuICAgICAgICBlcnJvcjogdm9pZCAwLFxuICAgICAgICBkYXRhOiB2b2lkIDAsXG4gICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgIH0pOyB9LCBbZmFsbGJhY2tMb2FkaW5nLCB2YXJpYWJsZXNdKTtcbiAgICB2YXIgaWdub3JlUmVzdWx0c1JlZiA9IFJlYWN0LnVzZVJlZihpZ25vcmVSZXN1bHRzKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHJlZmVyZW5jZSBgaWdub3JlUmVzdWx0c2AgZGlyZWN0bHkgaW4gdGhlIGVmZmVjdCBiZWxvd1xuICAgICAgICAvLyBpdCB3b3VsZCBhZGQgYSBkZXBlbmRlbmN5IHRvIHRoZSBgdXNlRWZmZWN0YCBkZXBzIGFycmF5LCB3aGljaCBtZWFucyB0aGVcbiAgICAgICAgLy8gc3Vic2NyaXB0aW9uIHdvdWxkIGJlIHJlY3JlYXRlZCBpZiBgaWdub3JlUmVzdWx0c2AgY2hhbmdlc1xuICAgICAgICAvLyBBcyBhIHJlc3VsdCwgb24gcmVzdWJzY3JpcHRpb24sIHRoZSBsYXN0IHJlc3VsdCB3b3VsZCBiZSByZS1kZWxpdmVyZWQsXG4gICAgICAgIC8vIHJlbmRlcmluZyB0aGUgY29tcG9uZW50IG9uZSBhZGRpdGlvbmFsIHRpbWUsIGFuZCByZS10cmlnZ2VyaW5nIGBvbkRhdGFgLlxuICAgICAgICAvLyBUaGUgc2FtZSBhcHBsaWVzIHRvIGBmZXRjaFBvbGljeWAsIHdoaWNoIHJlc3VsdHMgaW4gYSBuZXcgYG9ic2VydmFibGVgXG4gICAgICAgIC8vIGJlaW5nIGNyZWF0ZWQuIFdlIGNhbm5vdCByZWFsbHkgYXZvaWQgaXQgaW4gdGhhdCBjYXNlLCBidXQgd2UgY2FuIGF0IGxlYXN0XG4gICAgICAgIC8vIGF2b2lkIGl0IGZvciBgaWdub3JlUmVzdWx0c2AuXG4gICAgICAgIGlnbm9yZVJlc3VsdHNSZWYuY3VycmVudCA9IGlnbm9yZVJlc3VsdHM7XG4gICAgfSk7XG4gICAgdmFyIHJldCA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgICAgaWYgKCFvYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25TdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHZhciB2YXJpYWJsZXMgPSBvYnNlcnZhYmxlLl9fLnZhcmlhYmxlcztcbiAgICAgICAgdmFyIGNsaWVudCA9IG9ic2VydmFibGUuX18uY2xpZW50O1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKGZldGNoUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBmZXRjaFJlc3VsdC5kYXRhIGNhbiBiZSBudWxsIGJ1dCBTdWJzY3JpcHRpb25SZXN1bHQuZGF0YVxuICAgICAgICAgICAgICAgICAgICAvLyBleHBlY3RzIFREYXRhIHwgdW5kZWZpbmVkIG9ubHlcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZmV0Y2hSZXN1bHQuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHRvQXBvbGxvRXJyb3IoZmV0Y2hSZXN1bHQpLFxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG9ic2VydmFibGUuX18uc2V0UmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgaWYgKCFpZ25vcmVSZXN1bHRzUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9iID0gKF9hID0gb3B0aW9uc1JlZi5jdXJyZW50KS5vbkVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgcmVzdWx0LmVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9uc1JlZi5jdXJyZW50Lm9uRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zUmVmLmN1cnJlbnQub25EYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudDogY2xpZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9uc1JlZi5jdXJyZW50Lm9uU3Vic2NyaXB0aW9uRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zUmVmLmN1cnJlbnQub25TdWJzY3JpcHRpb25EYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudDogY2xpZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uRGF0YTogcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgZXJyb3IgPVxuICAgICAgICAgICAgICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEFwb2xsb0Vycm9yID8gZXJyb3IgOiAobmV3IEFwb2xsb0Vycm9yKHsgcHJvdG9jb2xFcnJvcnM6IFtlcnJvcl0gfSkpO1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaXB0aW9uU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLl9fLnNldFJlc3VsdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpZ25vcmVSZXN1bHRzUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgKF9iID0gKF9hID0gb3B0aW9uc1JlZi5jdXJyZW50KS5vbkVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaXB0aW9uU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uc1JlZi5jdXJyZW50Lm9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNSZWYuY3VycmVudC5vbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9uc1JlZi5jdXJyZW50Lm9uU3Vic2NyaXB0aW9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNSZWYuY3VycmVudC5vblN1YnNjcmlwdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIGltbWVkaWF0ZWx5IHN0b3AgcmVjZWl2aW5nIHN1YnNjcmlwdGlvbiB2YWx1ZXMsIGJ1dCBkbyBub3QgdW5zdWJzY3JpYmVcbiAgICAgICAgICAgIC8vIHVudGlsIGFmdGVyIGEgc2hvcnQgZGVsYXkgaW4gY2FzZSBhbm90aGVyIHVzZVN1YnNjcmlwdGlvbiBob29rIGlzXG4gICAgICAgICAgICAvLyByZXVzaW5nIHRoZSBzYW1lIHVuZGVybHlpbmcgb2JzZXJ2YWJsZSBhbmQgaXMgYWJvdXQgdG8gc3Vic2NyaWJlXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25TdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfSwgW29ic2VydmFibGVdKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZSAmJiAhc2tpcCAmJiAhaWdub3JlUmVzdWx0cyA/XG4gICAgICAgICAgICBvYnNlcnZhYmxlLl9fLnJlc3VsdFxuICAgICAgICAgICAgOiBmYWxsYmFja1Jlc3VsdDtcbiAgICB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxsYmFja1Jlc3VsdDsgfSk7XG4gICAgdmFyIHJlc3RhcnQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGludmFyaWFudCghb3B0aW9uc1JlZi5jdXJyZW50LnNraXAsIDU3KTtcbiAgICAgICAgc2V0T2JzZXJ2YWJsZShyZWNyZWF0ZVJlZi5jdXJyZW50KCkpO1xuICAgIH0sIFtvcHRpb25zUmVmLCByZWNyZWF0ZVJlZl0pO1xuICAgIHJldHVybiBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmV0KSwgeyByZXN0YXJ0OiByZXN0YXJ0IH0pKTsgfSwgW3JldCwgcmVzdGFydF0pO1xufVxuZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uKGNsaWVudCwgcXVlcnksIHZhcmlhYmxlcywgZmV0Y2hQb2xpY3ksIGVycm9yUG9saWN5LCBjb250ZXh0LCBleHRlbnNpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgIGZldGNoUG9saWN5OiBmZXRjaFBvbGljeSxcbiAgICAgICAgZXJyb3JQb2xpY3k6IGVycm9yUG9saWN5LFxuICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICBleHRlbnNpb25zOiBleHRlbnNpb25zLFxuICAgIH07XG4gICAgdmFyIF9fID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGNsaWVudDogY2xpZW50LCByZXN1bHQ6IHtcbiAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiB2b2lkIDAsXG4gICAgICAgICAgICBlcnJvcjogdm9pZCAwLFxuICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgIH0sIHNldFJlc3VsdDogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgX18ucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICB9IH0pO1xuICAgIHZhciBvYnNlcnZhYmxlID0gbnVsbDtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgLy8gbGF6aWx5IHN0YXJ0IHRoZSBzdWJzY3JpcHRpb24gd2hlbiB0aGUgZmlyc3Qgb2JzZXJ2ZXIgc3Vic2NyaWJlc1xuICAgICAgICAvLyB0byBnZXQgYXJvdW5kIHN0cmljdCBtb2RlXG4gICAgICAgIGlmICghb2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZSA9IGNsaWVudC5zdWJzY3JpYmUob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YiA9IG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1Yi51bnN1YnNjcmliZSgpOyB9O1xuICAgIH0pLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHRyYWNraW5nIG9iamVjdCB0byBzdG9yZSBkZXRhaWxzIGFib3V0IHRoZSBvYnNlcnZhYmxlIGFuZCB0aGUgbGF0ZXN0IHJlc3VsdCBvZiB0aGUgc3Vic2NyaXB0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgX186IF9fLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlU3Vic2NyaXB0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImludmFyaWFudCIsIlJlYWN0IiwiZXF1YWwiLCJEb2N1bWVudFR5cGUiLCJ2ZXJpZnlEb2N1bWVudFR5cGUiLCJBcG9sbG9FcnJvciIsIk9ic2VydmFibGUiLCJ1c2VBcG9sbG9DbGllbnQiLCJ1c2VEZWVwTWVtbyIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidG9BcG9sbG9FcnJvciIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJ1c2VTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJvcHRpb25zIiwiT2JqZWN0IiwiY3JlYXRlIiwiaGFzSXNzdWVkRGVwcmVjYXRpb25XYXJuaW5nUmVmIiwidXNlUmVmIiwiY2xpZW50IiwiU3Vic2NyaXB0aW9uIiwiY3VycmVudCIsIm9uU3Vic2NyaXB0aW9uRGF0YSIsImdsb2JhbFRoaXMiLCJfX0RFVl9fIiwid2FybiIsIm9uRGF0YSIsIm9uU3Vic2NyaXB0aW9uQ29tcGxldGUiLCJvbkNvbXBsZXRlIiwic2tpcCIsImZldGNoUG9saWN5IiwiZXJyb3JQb2xpY3kiLCJzaG91bGRSZXN1YnNjcmliZSIsImNvbnRleHQiLCJleHRlbnNpb25zIiwiaWdub3JlUmVzdWx0cyIsInZhcmlhYmxlcyIsInJlY3JlYXRlIiwiY3JlYXRlU3Vic2NyaXB0aW9uIiwiX2EiLCJ1c2VTdGF0ZSIsIm9ic2VydmFibGUiLCJzZXRPYnNlcnZhYmxlIiwicmVjcmVhdGVSZWYiLCJfXyIsInF1ZXJ5Iiwib3B0aW9uc1JlZiIsInVzZUVmZmVjdCIsImZhbGxiYWNrTG9hZGluZyIsImZhbGxiYWNrUmVzdWx0IiwidXNlTWVtbyIsImxvYWRpbmciLCJlcnJvciIsImRhdGEiLCJpZ25vcmVSZXN1bHRzUmVmIiwicmV0IiwidXNlQ2FsbGJhY2siLCJ1cGRhdGUiLCJzdWJzY3JpcHRpb25TdG9wcGVkIiwic3Vic2NyaWJlIiwibmV4dCIsImZldGNoUmVzdWx0IiwiX2IiLCJyZXN1bHQiLCJzZXRSZXN1bHQiLCJvbkVycm9yIiwiY2FsbCIsInN1YnNjcmlwdGlvbkRhdGEiLCJwcm90b2NvbEVycm9ycyIsImNvbXBsZXRlIiwic2V0VGltZW91dCIsInVuc3Vic2NyaWJlIiwicmVzdGFydCIsImFzc2lnbiIsIm9ic2VydmVyIiwic3ViIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useSubscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useSuspenseQuery.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useSuspenseQuery.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toApolloError: () => (/* binding */ toApolloError),\n/* harmony export */   useSuspenseQuery: () => (/* binding */ useSuspenseQuery),\n/* harmony export */   useWatchQueryOptions: () => (/* binding */ useWatchQueryOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/__use.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/constants.js\");\n\n\n\n\n\n\n\n\n\n\n\nfunction useSuspenseQuery(query, options) {\n    if (options === void 0) {\n        options = Object.create(null);\n    }\n    return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_2__.wrapHook)(\"useSuspenseQuery\", _useSuspenseQuery, (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(typeof options === \"object\" ? options.client : undefined))(query, options);\n}\nfunction _useSuspenseQuery(query, options) {\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(options.client);\n    var suspenseCache = (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_4__.getSuspenseCache)(client);\n    var watchQueryOptions = useWatchQueryOptions({\n        client: client,\n        query: query,\n        options: options\n    });\n    var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    var cacheKey = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([\n        query,\n        (0,_cache_index_js__WEBPACK_IMPORTED_MODULE_6__.canonicalStringify)(variables)\n    ], [].concat(queryKey), true);\n    var queryRef = suspenseCache.getQueryRef(cacheKey, function() {\n        return client.watchQuery(watchQueryOptions);\n    });\n    var _b = rehackt__WEBPACK_IMPORTED_MODULE_0__.useState([\n        queryRef.key,\n        queryRef.promise\n    ]), current = _b[0], setPromise = _b[1];\n    // This saves us a re-execution of the render function when a variable changed.\n    if (current[0] !== queryRef.key) {\n        current[0] = queryRef.key;\n        current[1] = queryRef.promise;\n    }\n    var promise = current[1];\n    if (queryRef.didChangeOptions(watchQueryOptions)) {\n        current[1] = promise = queryRef.applyOptions(watchQueryOptions);\n    }\n    rehackt__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        var dispose = queryRef.retain();\n        var removeListener = queryRef.listen(function(promise) {\n            setPromise([\n                queryRef.key,\n                promise\n            ]);\n        });\n        return function() {\n            removeListener();\n            dispose();\n        };\n    }, [\n        queryRef\n    ]);\n    var skipResult = rehackt__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        var error = toApolloError(queryRef.result);\n        return {\n            loading: false,\n            data: queryRef.result.data,\n            networkStatus: error ? _core_index_js__WEBPACK_IMPORTED_MODULE_7__.NetworkStatus.error : _core_index_js__WEBPACK_IMPORTED_MODULE_7__.NetworkStatus.ready,\n            error: error\n        };\n    }, [\n        queryRef.result\n    ]);\n    var result = fetchPolicy === \"standby\" ? skipResult : (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_8__.__use)(promise);\n    var fetchMore = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(options) {\n        var promise = queryRef.fetchMore(options);\n        setPromise([\n            queryRef.key,\n            queryRef.promise\n        ]);\n        return promise;\n    }, [\n        queryRef\n    ]);\n    var refetch = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(variables) {\n        var promise = queryRef.refetch(variables);\n        setPromise([\n            queryRef.key,\n            queryRef.promise\n        ]);\n        return promise;\n    }, [\n        queryRef\n    ]);\n    var subscribeToMore = queryRef.observable.subscribeToMore;\n    return rehackt__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        return {\n            client: client,\n            data: result.data,\n            error: toApolloError(result),\n            networkStatus: result.networkStatus,\n            fetchMore: fetchMore,\n            refetch: refetch,\n            subscribeToMore: subscribeToMore\n        };\n    }, [\n        client,\n        fetchMore,\n        refetch,\n        result,\n        subscribeToMore\n    ]);\n}\nfunction validateOptions(options) {\n    var query = options.query, fetchPolicy = options.fetchPolicy, returnPartialData = options.returnPartialData;\n    (0,_parser_index_js__WEBPACK_IMPORTED_MODULE_9__.verifyDocumentType)(query, _parser_index_js__WEBPACK_IMPORTED_MODULE_9__.DocumentType.Query);\n    validateFetchPolicy(fetchPolicy);\n    validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\nfunction validateFetchPolicy(fetchPolicy) {\n    if (fetchPolicy === void 0) {\n        fetchPolicy = \"cache-first\";\n    }\n    var supportedFetchPolicies = [\n        \"cache-first\",\n        \"network-only\",\n        \"no-cache\",\n        \"cache-and-network\"\n    ];\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(supportedFetchPolicies.includes(fetchPolicy), 58, fetchPolicy);\n}\nfunction validatePartialDataReturn(fetchPolicy, returnPartialData) {\n    if (fetchPolicy === \"no-cache\" && returnPartialData) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(59);\n    }\n}\nfunction toApolloError(result) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.isNonEmptyArray)(result.errors) ? new _core_index_js__WEBPACK_IMPORTED_MODULE_11__.ApolloError({\n        graphQLErrors: result.errors\n    }) : result.error;\n}\nfunction useWatchQueryOptions(_a) {\n    var client = _a.client, query = _a.query, options = _a.options;\n    return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_12__.useDeepMemo)(function() {\n        var _a;\n        if (options === _constants_js__WEBPACK_IMPORTED_MODULE_13__.skipToken) {\n            return {\n                query: query,\n                fetchPolicy: \"standby\"\n            };\n        }\n        var fetchPolicy = options.fetchPolicy || ((_a = client.defaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || \"cache-first\";\n        var watchQueryOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, options), {\n            fetchPolicy: fetchPolicy,\n            query: query,\n            notifyOnNetworkStatusChange: false,\n            nextFetchPolicy: void 0\n        });\n        if (globalThis.__DEV__ !== false) {\n            validateOptions(watchQueryOptions);\n        }\n        // Assign the updated fetch policy after our validation since `standby` is\n        // not a supported fetch policy on its own without the use of `skip`.\n        if (options.skip) {\n            watchQueryOptions.fetchPolicy = \"standby\";\n        }\n        return watchQueryOptions;\n    }, [\n        client,\n        options,\n        query\n    ]);\n} //# sourceMappingURL=useSuspenseQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useSuspenseQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSyncExternalStore: () => (/* binding */ useSyncExternalStore)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n\nvar didWarnUncachedGetSnapshot = false;\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = /*#__PURE__*/ (rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(rehackt__WEBPACK_IMPORTED_MODULE_1__, 2)))[uSESKey];\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nvar useSyncExternalStore = realHook || function(subscribe, getSnapshot, getServerSnapshot) {\n    // Read the current snapshot from the store on every render. Again, this\n    // breaks the rules of React, and only works here because of specific\n    // implementation details, most importantly that updates are\n    // always synchronous.\n    var value = getSnapshot();\n    if (// DEVIATION: Using __DEV__\n    globalThis.__DEV__ !== false && !didWarnUncachedGetSnapshot && // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        // DEVIATION: Using invariant.error instead of console.error directly.\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(60);\n    }\n    // Because updates are synchronous, we don't queue them. Instead we force a\n    // re-render whenever the subscribed state changes by updating an some\n    // arbitrary useState hook. Then, during render, we call getSnapshot to read\n    // the current value.\n    //\n    // Because we don't actually use the state returned by the useState hook, we\n    // can save a bit of memory by storing other stuff in that slot.\n    //\n    // To implement the early bailout, we need to track some things on a mutable\n    // object. Usually, we would put that in a useRef hook, but we can stash it in\n    // our useState hook instead.\n    //\n    // To force a re-render, we call forceUpdate({inst}). That works because the\n    // new object always fails an equality check.\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_1__.useState({\n        inst: {\n            value: value,\n            getSnapshot: getSnapshot\n        }\n    }), inst = _a[0].inst, forceUpdate = _a[1];\n    // Track the latest getSnapshot function with a ref. This needs to be updated\n    // in the layout phase so we can access it during the tearing check that\n    // happens on subscribe.\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseLayoutEffect) {\n        // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n        // which may seem like a conditional hook, but this code ends up behaving\n        // unconditionally (one way or the other) because canUseLayoutEffect is\n        // constant.\n        rehackt__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(function() {\n            Object.assign(inst, {\n                value: value,\n                getSnapshot: getSnapshot\n            });\n            // Whenever getSnapshot or subscribe changes, we need to check in the\n            // commit phase if there was an interleaved mutation. In concurrent mode\n            // this can happen all the time, but even in synchronous mode, an earlier\n            // effect may have mutated the store.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({\n                    inst: inst\n                });\n            }\n        // React Hook React.useLayoutEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            subscribe,\n            value,\n            getSnapshot\n        ]);\n    } else {\n        Object.assign(inst, {\n            value: value,\n            getSnapshot: getSnapshot\n        });\n    }\n    rehackt__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        // Check for changes right before subscribing. Subsequent changes will be\n        // detected in the subscription handler.\n        if (checkIfSnapshotChanged(inst)) {\n            // Force a re-render.\n            forceUpdate({\n                inst: inst\n            });\n        }\n        // Subscribe to the store and return a clean-up function.\n        return subscribe(function handleStoreChange() {\n            // TODO: Because there is no cross-renderer API for batching updates, it's\n            // up to the consumer of this library to wrap their subscription event\n            // with unstable_batchedUpdates. Should we try to detect when this isn't\n            // the case and print a warning in development?\n            // The store changed. Check if the snapshot changed since the last time we\n            // read from the store.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({\n                    inst: inst\n                });\n            }\n        });\n    // React Hook React.useEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        subscribe\n    ]);\n    return value;\n};\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    } catch (_b) {\n        return true;\n    }\n} //# sourceMappingURL=useSyncExternalStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@apollo/client/react/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloConsumer: () => (/* reexport safe */ _context_index_js__WEBPACK_IMPORTED_MODULE_2__.ApolloConsumer),\n/* harmony export */   ApolloProvider: () => (/* reexport safe */ _context_index_js__WEBPACK_IMPORTED_MODULE_1__.ApolloProvider),\n/* harmony export */   DocumentType: () => (/* reexport safe */ _parser_index_js__WEBPACK_IMPORTED_MODULE_5__.DocumentType),\n/* harmony export */   createQueryPreloader: () => (/* reexport safe */ _query_preloader_createQueryPreloader_js__WEBPACK_IMPORTED_MODULE_6__.createQueryPreloader),\n/* harmony export */   getApolloContext: () => (/* reexport safe */ _context_index_js__WEBPACK_IMPORTED_MODULE_3__.getApolloContext),\n/* harmony export */   operationName: () => (/* reexport safe */ _parser_index_js__WEBPACK_IMPORTED_MODULE_5__.operationName),\n/* harmony export */   parser: () => (/* reexport safe */ _parser_index_js__WEBPACK_IMPORTED_MODULE_5__.parser),\n/* harmony export */   resetApolloContext: () => (/* reexport safe */ _context_index_js__WEBPACK_IMPORTED_MODULE_3__.resetApolloContext),\n/* harmony export */   skipToken: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.skipToken),\n/* harmony export */   useApolloClient: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useApolloClient),\n/* harmony export */   useBackgroundQuery: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useBackgroundQuery),\n/* harmony export */   useFragment: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useFragment),\n/* harmony export */   useLazyQuery: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useLazyQuery),\n/* harmony export */   useLoadableQuery: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useLoadableQuery),\n/* harmony export */   useMutation: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useMutation),\n/* harmony export */   useQuery: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useQuery),\n/* harmony export */   useQueryRefHandlers: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useQueryRefHandlers),\n/* harmony export */   useReactiveVar: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useReactiveVar),\n/* harmony export */   useReadQuery: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useReadQuery),\n/* harmony export */   useSubscription: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useSubscription),\n/* harmony export */   useSuspenseQuery: () => (/* reexport safe */ _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__.useSuspenseQuery)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloProvider.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloConsumer.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n/* harmony import */ var _hooks_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hooks/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/index.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _query_preloader_createQueryPreloader_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./query-preloader/createQueryPreloader.js */ \"(ssr)/./node_modules/@apollo/client/react/query-preloader/createQueryPreloader.js\");\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1QztBQUNvRTtBQUMxRTtBQUN1QztBQUNTO0FBQ2hELENBQ2pDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9pbmRleC5qcz9iYTNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBBcG9sbG9Qcm92aWRlciwgQXBvbGxvQ29uc3VtZXIsIGdldEFwb2xsb0NvbnRleHQsIHJlc2V0QXBvbGxvQ29udGV4dCwgfSBmcm9tIFwiLi9jb250ZXh0L2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ob29rcy9pbmRleC5qc1wiO1xuZXhwb3J0IHsgRG9jdW1lbnRUeXBlLCBvcGVyYXRpb25OYW1lLCBwYXJzZXIgfSBmcm9tIFwiLi9wYXJzZXIvaW5kZXguanNcIjtcbmV4cG9ydCB7IGNyZWF0ZVF1ZXJ5UHJlbG9hZGVyIH0gZnJvbSBcIi4vcXVlcnktcHJlbG9hZGVyL2NyZWF0ZVF1ZXJ5UHJlbG9hZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlcy90eXBlcy5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkFwb2xsb1Byb3ZpZGVyIiwiQXBvbGxvQ29uc3VtZXIiLCJnZXRBcG9sbG9Db250ZXh0IiwicmVzZXRBcG9sbG9Db250ZXh0IiwiRG9jdW1lbnRUeXBlIiwib3BlcmF0aW9uTmFtZSIsInBhcnNlciIsImNyZWF0ZVF1ZXJ5UHJlbG9hZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/internal/cache/QueryReference.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/internal/cache/QueryReference.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InternalQueryReference: () => (/* binding */ InternalQueryReference),\n/* harmony export */   assertWrappedQueryRef: () => (/* binding */ assertWrappedQueryRef),\n/* harmony export */   getWrappedPromise: () => (/* binding */ getWrappedPromise),\n/* harmony export */   unwrapQueryRef: () => (/* binding */ unwrapQueryRef),\n/* harmony export */   updateWrappedQueryRef: () => (/* binding */ updateWrappedQueryRef),\n/* harmony export */   wrapQueryRef: () => (/* binding */ wrapQueryRef)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/promises/decoration.js\");\n/* harmony import */ var _utilities_globals_invariantWrappers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/globals/invariantWrappers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\");\n\n\n\n\n\nvar QUERY_REFERENCE_SYMBOL = Symbol();\nvar PROMISE_SYMBOL = Symbol();\nfunction wrapQueryRef(internalQueryRef) {\n    var _a;\n    var ref = (_a = {\n        toPromise: function() {\n            // We avoid resolving this promise with the query data because we want to\n            // discourage using the server data directly from the queryRef. Instead,\n            // the data should be accessed through `useReadQuery`. When the server\n            // data is needed, its better to use `client.query()` directly.\n            //\n            // Here we resolve with the ref itself to make using this in React Router\n            // or TanStack Router `loader` functions a bit more ergonomic e.g.\n            //\n            // function loader() {\n            //   return { queryRef: await preloadQuery(query).toPromise() }\n            // }\n            return getWrappedPromise(ref).then(function() {\n                return ref;\n            });\n        }\n    }, _a[QUERY_REFERENCE_SYMBOL] = internalQueryRef, _a[PROMISE_SYMBOL] = internalQueryRef.promise, _a);\n    return ref;\n}\nfunction assertWrappedQueryRef(queryRef) {\n    (0,_utilities_globals_invariantWrappers_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(!queryRef || QUERY_REFERENCE_SYMBOL in queryRef, 61);\n}\nfunction getWrappedPromise(queryRef) {\n    var internalQueryRef = unwrapQueryRef(queryRef);\n    return internalQueryRef.promise.status === \"fulfilled\" ? internalQueryRef.promise : queryRef[PROMISE_SYMBOL];\n}\nfunction unwrapQueryRef(queryRef) {\n    return queryRef[QUERY_REFERENCE_SYMBOL];\n}\nfunction updateWrappedQueryRef(queryRef, promise) {\n    queryRef[PROMISE_SYMBOL] = promise;\n}\nvar OBSERVED_CHANGED_OPTIONS = [\n    \"canonizeResults\",\n    \"context\",\n    \"errorPolicy\",\n    \"fetchPolicy\",\n    \"refetchWritePolicy\",\n    \"returnPartialData\"\n];\nvar InternalQueryReference = /** @class */ function() {\n    function InternalQueryReference(observable, options) {\n        var _this = this;\n        this.key = {};\n        this.listeners = new Set();\n        this.references = 0;\n        this.softReferences = 0;\n        this.handleNext = this.handleNext.bind(this);\n        this.handleError = this.handleError.bind(this);\n        this.dispose = this.dispose.bind(this);\n        this.observable = observable;\n        if (options.onDispose) {\n            this.onDispose = options.onDispose;\n        }\n        this.setResult();\n        this.subscribeToQuery();\n        // Start a timer that will automatically dispose of the query if the\n        // suspended resource does not use this queryRef in the given time. This\n        // helps prevent memory leaks when a component has unmounted before the\n        // query has finished loading.\n        var startDisposeTimer = function() {\n            var _a;\n            if (!_this.references) {\n                _this.autoDisposeTimeoutId = setTimeout(_this.dispose, (_a = options.autoDisposeTimeoutMs) !== null && _a !== void 0 ? _a : 30000);\n            }\n        };\n        // We wait until the request has settled to ensure we don't dispose of the\n        // query ref before the request finishes, otherwise we would leave the\n        // promise in a pending state rendering the suspense boundary indefinitely.\n        this.promise.then(startDisposeTimer, startDisposeTimer);\n    }\n    Object.defineProperty(InternalQueryReference.prototype, \"disposed\", {\n        get: function() {\n            return this.subscription.closed;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(InternalQueryReference.prototype, \"watchQueryOptions\", {\n        get: function() {\n            return this.observable.options;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    InternalQueryReference.prototype.reinitialize = function() {\n        var observable = this.observable;\n        var originalFetchPolicy = this.watchQueryOptions.fetchPolicy;\n        var avoidNetworkRequests = originalFetchPolicy === \"no-cache\" || originalFetchPolicy === \"standby\";\n        try {\n            if (avoidNetworkRequests) {\n                observable.silentSetOptions({\n                    fetchPolicy: \"standby\"\n                });\n            } else {\n                observable.resetLastResults();\n                observable.silentSetOptions({\n                    fetchPolicy: \"cache-first\"\n                });\n            }\n            this.subscribeToQuery();\n            if (avoidNetworkRequests) {\n                return;\n            }\n            observable.resetDiff();\n            this.setResult();\n        } finally{\n            observable.silentSetOptions({\n                fetchPolicy: originalFetchPolicy\n            });\n        }\n    };\n    InternalQueryReference.prototype.retain = function() {\n        var _this = this;\n        this.references++;\n        clearTimeout(this.autoDisposeTimeoutId);\n        var disposed = false;\n        return function() {\n            if (disposed) {\n                return;\n            }\n            disposed = true;\n            _this.references--;\n            setTimeout(function() {\n                if (!_this.references) {\n                    _this.dispose();\n                }\n            });\n        };\n    };\n    InternalQueryReference.prototype.softRetain = function() {\n        var _this = this;\n        this.softReferences++;\n        var disposed = false;\n        return function() {\n            // Tracking if this has already been called helps ensure that\n            // multiple calls to this function won't decrement the reference\n            // counter more than it should. Subsequent calls just result in a noop.\n            if (disposed) {\n                return;\n            }\n            disposed = true;\n            _this.softReferences--;\n            setTimeout(function() {\n                if (!_this.softReferences && !_this.references) {\n                    _this.dispose();\n                }\n            });\n        };\n    };\n    InternalQueryReference.prototype.didChangeOptions = function(watchQueryOptions) {\n        var _this = this;\n        return OBSERVED_CHANGED_OPTIONS.some(function(option) {\n            return option in watchQueryOptions && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(_this.watchQueryOptions[option], watchQueryOptions[option]);\n        });\n    };\n    InternalQueryReference.prototype.applyOptions = function(watchQueryOptions) {\n        var _a = this.watchQueryOptions, currentFetchPolicy = _a.fetchPolicy, currentCanonizeResults = _a.canonizeResults;\n        // \"standby\" is used when `skip` is set to `true`. Detect when we've\n        // enabled the query (i.e. `skip` is `false`) to execute a network request.\n        if (currentFetchPolicy === \"standby\" && currentFetchPolicy !== watchQueryOptions.fetchPolicy) {\n            this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n        } else {\n            this.observable.silentSetOptions(watchQueryOptions);\n            if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n                this.result = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.result), this.observable.getCurrentResult());\n                this.promise = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.createFulfilledPromise)(this.result);\n            }\n        }\n        return this.promise;\n    };\n    InternalQueryReference.prototype.listen = function(listener) {\n        var _this = this;\n        this.listeners.add(listener);\n        return function() {\n            _this.listeners.delete(listener);\n        };\n    };\n    InternalQueryReference.prototype.refetch = function(variables) {\n        return this.initiateFetch(this.observable.refetch(variables));\n    };\n    InternalQueryReference.prototype.fetchMore = function(options) {\n        return this.initiateFetch(this.observable.fetchMore(options));\n    };\n    InternalQueryReference.prototype.dispose = function() {\n        this.subscription.unsubscribe();\n        this.onDispose();\n    };\n    InternalQueryReference.prototype.onDispose = function() {\n    // noop. overridable by options\n    };\n    InternalQueryReference.prototype.handleNext = function(result) {\n        var _a;\n        switch(this.promise.status){\n            case \"pending\":\n                {\n                    // Maintain the last successful `data` value if the next result does not\n                    // have one.\n                    if (result.data === void 0) {\n                        result.data = this.result.data;\n                    }\n                    this.result = result;\n                    (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, result);\n                    break;\n                }\n            default:\n                {\n                    // This occurs when switching to a result that is fully cached when this\n                    // class is instantiated. ObservableQuery will run reobserve when\n                    // subscribing, which delivers a result from the cache.\n                    if (result.data === this.result.data && result.networkStatus === this.result.networkStatus) {\n                        return;\n                    }\n                    // Maintain the last successful `data` value if the next result does not\n                    // have one.\n                    if (result.data === void 0) {\n                        result.data = this.result.data;\n                    }\n                    this.result = result;\n                    this.promise = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.createFulfilledPromise)(result);\n                    this.deliver(this.promise);\n                    break;\n                }\n        }\n    };\n    InternalQueryReference.prototype.handleError = function(error) {\n        var _a;\n        this.subscription.unsubscribe();\n        this.subscription = this.observable.resubscribeAfterError(this.handleNext, this.handleError);\n        switch(this.promise.status){\n            case \"pending\":\n                {\n                    (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, error);\n                    break;\n                }\n            default:\n                {\n                    this.promise = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.createRejectedPromise)(error);\n                    this.deliver(this.promise);\n                }\n        }\n    };\n    InternalQueryReference.prototype.deliver = function(promise) {\n        this.listeners.forEach(function(listener) {\n            return listener(promise);\n        });\n    };\n    InternalQueryReference.prototype.initiateFetch = function(returnedPromise) {\n        var _this = this;\n        this.promise = this.createPendingPromise();\n        this.promise.catch(function() {});\n        // If the data returned from the fetch is deeply equal to the data already\n        // in the cache, `handleNext` will not be triggered leaving the promise we\n        // created in a pending state forever. To avoid this situtation, we attempt\n        // to resolve the promise if `handleNext` hasn't been run to ensure the\n        // promise is resolved correctly.\n        returnedPromise.then(function() {\n            // In the case of `fetchMore`, this promise is resolved before a cache\n            // result is emitted due to the fact that `fetchMore` sets a `no-cache`\n            // fetch policy and runs `cache.batch` in its `.then` handler. Because\n            // the timing is different, we accidentally run this update twice\n            // causing an additional re-render with the `fetchMore` result by\n            // itself. By wrapping in `setTimeout`, this should provide a short\n            // delay to allow the `QueryInfo.notify` handler to run before this\n            // promise is checked.\n            // See https://github.com/apollographql/apollo-client/issues/11315 for\n            // more information\n            setTimeout(function() {\n                var _a;\n                if (_this.promise.status === \"pending\") {\n                    // Use the current result from the observable instead of the value\n                    // resolved from the promise. This avoids issues in some cases where\n                    // the raw resolved value should not be the emitted value, such as\n                    // when a `fetchMore` call returns an empty array after it has\n                    // reached the end of the list.\n                    //\n                    // See the following for more information:\n                    // https://github.com/apollographql/apollo-client/issues/11642\n                    _this.result = _this.observable.getCurrentResult();\n                    (_a = _this.resolve) === null || _a === void 0 ? void 0 : _a.call(_this, _this.result);\n                }\n            });\n        }).catch(function() {});\n        return returnedPromise;\n    };\n    InternalQueryReference.prototype.subscribeToQuery = function() {\n        var _this = this;\n        this.subscription = this.observable.filter(function(result) {\n            return !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result.data, {}) && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result, _this.result);\n        }).subscribe(this.handleNext, this.handleError);\n    };\n    InternalQueryReference.prototype.setResult = function() {\n        // Don't save this result as last result to prevent delivery of last result\n        // when first subscribing\n        var result = this.observable.getCurrentResult(false);\n        if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result, this.result)) {\n            return;\n        }\n        this.result = result;\n        this.promise = result.data && (!result.partial || this.watchQueryOptions.returnPartialData) ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.createFulfilledPromise)(result) : this.createPendingPromise();\n    };\n    InternalQueryReference.prototype.createPendingPromise = function() {\n        var _this = this;\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.wrapPromiseWithState)(new Promise(function(resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        }));\n    };\n    return InternalQueryReference;\n}();\n //# sourceMappingURL=QueryReference.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/internal/cache/QueryReference.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/internal/cache/SuspenseCache.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/internal/cache/SuspenseCache.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SuspenseCache: () => (/* binding */ SuspenseCache)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _QueryReference_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./QueryReference.js */ \"(ssr)/./node_modules/@apollo/client/react/internal/cache/QueryReference.js\");\n\n\n\nvar SuspenseCache = /** @class */ function() {\n    function SuspenseCache(options) {\n        if (options === void 0) {\n            options = Object.create(null);\n        }\n        this.queryRefs = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.canUseWeakMap);\n        this.options = options;\n    }\n    SuspenseCache.prototype.getQueryRef = function(cacheKey, createObservable) {\n        var ref = this.queryRefs.lookupArray(cacheKey);\n        if (!ref.current) {\n            ref.current = new _QueryReference_js__WEBPACK_IMPORTED_MODULE_2__.InternalQueryReference(createObservable(), {\n                autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n                onDispose: function() {\n                    delete ref.current;\n                }\n            });\n        }\n        return ref.current;\n    };\n    SuspenseCache.prototype.add = function(cacheKey, queryRef) {\n        var ref = this.queryRefs.lookupArray(cacheKey);\n        ref.current = queryRef;\n    };\n    return SuspenseCache;\n}();\n //# sourceMappingURL=SuspenseCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaW50ZXJuYWwvY2FjaGUvU3VzcGVuc2VDYWNoZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlDO0FBQzJCO0FBQ0M7QUFDN0QsSUFBSUcsZ0JBQWdCLFdBQVcsR0FBSTtJQUMvQixTQUFTQSxjQUFjQyxPQUFPO1FBQzFCLElBQUlBLFlBQVksS0FBSyxHQUFHO1lBQUVBLFVBQVVDLE9BQU9DLE1BQU0sQ0FBQztRQUFPO1FBQ3pELElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUlQLDJDQUFJQSxDQUFDQyw4REFBYUE7UUFDdkMsSUFBSSxDQUFDRyxPQUFPLEdBQUdBO0lBQ25CO0lBQ0FELGNBQWNLLFNBQVMsQ0FBQ0MsV0FBVyxHQUFHLFNBQVVDLFFBQVEsRUFBRUMsZ0JBQWdCO1FBQ3RFLElBQUlDLE1BQU0sSUFBSSxDQUFDTCxTQUFTLENBQUNNLFdBQVcsQ0FBQ0g7UUFDckMsSUFBSSxDQUFDRSxJQUFJRSxPQUFPLEVBQUU7WUFDZEYsSUFBSUUsT0FBTyxHQUFHLElBQUlaLHNFQUFzQkEsQ0FBQ1Msb0JBQW9CO2dCQUN6REksc0JBQXNCLElBQUksQ0FBQ1gsT0FBTyxDQUFDVyxvQkFBb0I7Z0JBQ3ZEQyxXQUFXO29CQUNQLE9BQU9KLElBQUlFLE9BQU87Z0JBQ3RCO1lBQ0o7UUFDSjtRQUNBLE9BQU9GLElBQUlFLE9BQU87SUFDdEI7SUFDQVgsY0FBY0ssU0FBUyxDQUFDUyxHQUFHLEdBQUcsU0FBVVAsUUFBUSxFQUFFUSxRQUFRO1FBQ3RELElBQUlOLE1BQU0sSUFBSSxDQUFDTCxTQUFTLENBQUNNLFdBQVcsQ0FBQ0g7UUFDckNFLElBQUlFLE9BQU8sR0FBR0k7SUFDbEI7SUFDQSxPQUFPZjtBQUNYO0FBQ3lCLENBQ3pCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9pbnRlcm5hbC9jYWNoZS9TdXNwZW5zZUNhY2hlLmpzP2RmYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJpZSB9IGZyb20gXCJAd3J5L3RyaWVcIjtcbmltcG9ydCB7IGNhblVzZVdlYWtNYXAgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBJbnRlcm5hbFF1ZXJ5UmVmZXJlbmNlIH0gZnJvbSBcIi4vUXVlcnlSZWZlcmVuY2UuanNcIjtcbnZhciBTdXNwZW5zZUNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1c3BlbnNlQ2FjaGUob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpOyB9XG4gICAgICAgIHRoaXMucXVlcnlSZWZzID0gbmV3IFRyaWUoY2FuVXNlV2Vha01hcCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIFN1c3BlbnNlQ2FjaGUucHJvdG90eXBlLmdldFF1ZXJ5UmVmID0gZnVuY3Rpb24gKGNhY2hlS2V5LCBjcmVhdGVPYnNlcnZhYmxlKSB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzLnF1ZXJ5UmVmcy5sb29rdXBBcnJheShjYWNoZUtleSk7XG4gICAgICAgIGlmICghcmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJlZi5jdXJyZW50ID0gbmV3IEludGVybmFsUXVlcnlSZWZlcmVuY2UoY3JlYXRlT2JzZXJ2YWJsZSgpLCB7XG4gICAgICAgICAgICAgICAgYXV0b0Rpc3Bvc2VUaW1lb3V0TXM6IHRoaXMub3B0aW9ucy5hdXRvRGlzcG9zZVRpbWVvdXRNcyxcbiAgICAgICAgICAgICAgICBvbkRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlZi5jdXJyZW50O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVmLmN1cnJlbnQ7XG4gICAgfTtcbiAgICBTdXNwZW5zZUNhY2hlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoY2FjaGVLZXksIHF1ZXJ5UmVmKSB7XG4gICAgICAgIHZhciByZWYgPSB0aGlzLnF1ZXJ5UmVmcy5sb29rdXBBcnJheShjYWNoZUtleSk7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gcXVlcnlSZWY7XG4gICAgfTtcbiAgICByZXR1cm4gU3VzcGVuc2VDYWNoZTtcbn0oKSk7XG5leHBvcnQgeyBTdXNwZW5zZUNhY2hlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdXNwZW5zZUNhY2hlLmpzLm1hcCJdLCJuYW1lcyI6WyJUcmllIiwiY2FuVXNlV2Vha01hcCIsIkludGVybmFsUXVlcnlSZWZlcmVuY2UiLCJTdXNwZW5zZUNhY2hlIiwib3B0aW9ucyIsIk9iamVjdCIsImNyZWF0ZSIsInF1ZXJ5UmVmcyIsInByb3RvdHlwZSIsImdldFF1ZXJ5UmVmIiwiY2FjaGVLZXkiLCJjcmVhdGVPYnNlcnZhYmxlIiwicmVmIiwibG9va3VwQXJyYXkiLCJjdXJyZW50IiwiYXV0b0Rpc3Bvc2VUaW1lb3V0TXMiLCJvbkRpc3Bvc2UiLCJhZGQiLCJxdWVyeVJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/internal/cache/SuspenseCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSuspenseCache: () => (/* binding */ getSuspenseCache)\n/* harmony export */ });\n/* harmony import */ var _SuspenseCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SuspenseCache.js */ \"(ssr)/./node_modules/@apollo/client/react/internal/cache/SuspenseCache.js\");\n\nvar suspenseCacheSymbol = Symbol.for(\"apollo.suspenseCache\");\nfunction getSuspenseCache(client) {\n    var _a;\n    if (!client[suspenseCacheSymbol]) {\n        client[suspenseCacheSymbol] = new _SuspenseCache_js__WEBPACK_IMPORTED_MODULE_0__.SuspenseCache((_a = client.defaultOptions.react) === null || _a === void 0 ? void 0 : _a.suspense);\n    }\n    return client[suspenseCacheSymbol];\n} //# sourceMappingURL=getSuspenseCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaW50ZXJuYWwvY2FjaGUvZ2V0U3VzcGVuc2VDYWNoZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFtRDtBQUNuRCxJQUFJQyxzQkFBc0JDLE9BQU9DLEdBQUcsQ0FBQztBQUM5QixTQUFTQyxpQkFBaUJDLE1BQU07SUFDbkMsSUFBSUM7SUFDSixJQUFJLENBQUNELE1BQU0sQ0FBQ0osb0JBQW9CLEVBQUU7UUFDOUJJLE1BQU0sQ0FBQ0osb0JBQW9CLEdBQUcsSUFBSUQsNERBQWFBLENBQUMsQ0FBQ00sS0FBS0QsT0FBT0UsY0FBYyxDQUFDQyxLQUFLLE1BQU0sUUFBUUYsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRyxRQUFRO0lBQ3ZJO0lBQ0EsT0FBT0osTUFBTSxDQUFDSixvQkFBb0I7QUFDdEMsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaW50ZXJuYWwvY2FjaGUvZ2V0U3VzcGVuc2VDYWNoZS5qcz9kNGYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1c3BlbnNlQ2FjaGUgfSBmcm9tIFwiLi9TdXNwZW5zZUNhY2hlLmpzXCI7XG52YXIgc3VzcGVuc2VDYWNoZVN5bWJvbCA9IFN5bWJvbC5mb3IoXCJhcG9sbG8uc3VzcGVuc2VDYWNoZVwiKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdXNwZW5zZUNhY2hlKGNsaWVudCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIWNsaWVudFtzdXNwZW5zZUNhY2hlU3ltYm9sXSkge1xuICAgICAgICBjbGllbnRbc3VzcGVuc2VDYWNoZVN5bWJvbF0gPSBuZXcgU3VzcGVuc2VDYWNoZSgoX2EgPSBjbGllbnQuZGVmYXVsdE9wdGlvbnMucmVhY3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdXNwZW5zZSk7XG4gICAgfVxuICAgIHJldHVybiBjbGllbnRbc3VzcGVuc2VDYWNoZVN5bWJvbF07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRTdXNwZW5zZUNhY2hlLmpzLm1hcCJdLCJuYW1lcyI6WyJTdXNwZW5zZUNhY2hlIiwic3VzcGVuc2VDYWNoZVN5bWJvbCIsIlN5bWJvbCIsImZvciIsImdldFN1c3BlbnNlQ2FjaGUiLCJjbGllbnQiLCJfYSIsImRlZmF1bHRPcHRpb25zIiwicmVhY3QiLCJzdXNwZW5zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/parser/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/react/parser/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentType: () => (/* binding */ DocumentType),\n/* harmony export */   operationName: () => (/* binding */ operationName),\n/* harmony export */   parser: () => (/* binding */ parser),\n/* harmony export */   verifyDocumentType: () => (/* binding */ verifyDocumentType)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\nvar DocumentType;\n(function(DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache;\nfunction operationName(type) {\n    var name;\n    switch(type){\n        case DocumentType.Query:\n            name = \"Query\";\n            break;\n        case DocumentType.Mutation:\n            name = \"Mutation\";\n            break;\n        case DocumentType.Subscription:\n            name = \"Subscription\";\n            break;\n    }\n    return name;\n}\n// This parser is mostly used to safety check incoming documents.\nfunction parser(document) {\n    if (!cache) {\n        cache = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.AutoCleanedWeakCache(_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes.parser || 1000 /* defaultCacheSizes.parser */ );\n    }\n    var cached = cache.get(document);\n    if (cached) return cached;\n    var variables, type, name;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!document && !!document.kind, 62, document);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for(var _i = 0, _a = document.definitions; _i < _a.length; _i++){\n        var x = _a[_i];\n        if (x.kind === \"FragmentDefinition\") {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === \"OperationDefinition\") {\n            switch(x.operation){\n                case \"query\":\n                    queries.push(x);\n                    break;\n                case \"mutation\":\n                    mutations.push(x);\n                    break;\n                case \"subscription\":\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!fragments.length || queries.length || mutations.length || subscriptions.length, 63);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(queries.length + mutations.length + subscriptions.length <= 1, 64, document, queries.length, subscriptions.length, mutations.length);\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n    var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(definitions.length === 1, 65, document, definitions.length);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === \"Name\") {\n        name = definition.name.value;\n    } else {\n        name = \"data\"; // fallback to using data if no name\n    }\n    var payload = {\n        name: name,\n        type: type,\n        variables: variables\n    };\n    cache.set(document, payload);\n    return payload;\n}\nparser.resetCache = function() {\n    cache = undefined;\n};\nif (globalThis.__DEV__ !== false) {\n    (0,_utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__.registerGlobalCache)(\"parser\", function() {\n        return cache ? cache.size : 0;\n    });\n}\nfunction verifyDocumentType(document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(operation.type === type, 66, requiredOperationName, requiredOperationName, usedOperationName);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/parser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/query-preloader/createQueryPreloader.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/query-preloader/createQueryPreloader.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createQueryPreloader: () => (/* binding */ createQueryPreloader)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/internal/cache/QueryReference.js\");\n/* harmony import */ var _hooks_internal_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hooks/internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\");\n\n\n\n/**\n * A higher order function that returns a `preloadQuery` function which\n * can be used to begin loading a query with the given `client`. This is useful\n * when you want to start loading a query as early as possible outside of a\n * React component.\n *\n * > Refer to the [Suspense - Initiating queries outside React](https://www.apollographql.com/docs/react/data/suspense#initiating-queries-outside-react) section for a more in-depth overview.\n *\n * @param client - The `ApolloClient` instance that will be used to load queries\n * from the returned `preloadQuery` function.\n * @returns The `preloadQuery` function.\n *\n * @example\n * ```js\n * const preloadQuery = createQueryPreloader(client);\n * ```\n * @since 3.9.0\n */ function createQueryPreloader(client) {\n    return (0,_hooks_internal_index_js__WEBPACK_IMPORTED_MODULE_0__.wrapHook)(\"createQueryPreloader\", _createQueryPreloader, client)(client);\n}\nvar _createQueryPreloader = function(client) {\n    return function preloadQuery(query, options) {\n        var _a, _b;\n        if (options === void 0) {\n            options = Object.create(null);\n        }\n        var queryRef = new _internal_index_js__WEBPACK_IMPORTED_MODULE_1__.InternalQueryReference(client.watchQuery((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n            query: query\n        })), {\n            autoDisposeTimeoutMs: (_b = (_a = client.defaultOptions.react) === null || _a === void 0 ? void 0 : _a.suspense) === null || _b === void 0 ? void 0 : _b.autoDisposeTimeoutMs\n        });\n        return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_1__.wrapQueryRef)(queryRef);\n    };\n}; //# sourceMappingURL=createQueryPreloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvcXVlcnktcHJlbG9hZGVyL2NyZWF0ZVF1ZXJ5UHJlbG9hZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUM7QUFDMkM7QUFDdEI7QUFDdEQ7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBaUJDLEdBQ00sU0FBU0kscUJBQXFCQyxNQUFNO0lBQ3ZDLE9BQU9GLGtFQUFRQSxDQUFDLHdCQUF3QkcsdUJBQXVCRCxRQUFRQTtBQUMzRTtBQUNBLElBQUlDLHdCQUF3QixTQUFVRCxNQUFNO0lBQ3hDLE9BQU8sU0FBU0UsYUFBYUMsS0FBSyxFQUFFQyxPQUFPO1FBQ3ZDLElBQUlDLElBQUlDO1FBQ1IsSUFBSUYsWUFBWSxLQUFLLEdBQUc7WUFBRUEsVUFBVUcsT0FBT0MsTUFBTSxDQUFDO1FBQU87UUFDekQsSUFBSUMsV0FBVyxJQUFJYixzRUFBc0JBLENBQUNJLE9BQU9VLFVBQVUsQ0FBQ2YsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR1MsVUFBVTtZQUFFRCxPQUFPQTtRQUFNLEtBQUs7WUFDNUdRLHNCQUFzQixDQUFDTCxLQUFLLENBQUNELEtBQUtMLE9BQU9ZLGNBQWMsQ0FBQ0MsS0FBSyxNQUFNLFFBQVFSLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1MsUUFBUSxNQUFNLFFBQVFSLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ssb0JBQW9CO1FBQ2pMO1FBQ0EsT0FBT2QsZ0VBQVlBLENBQUNZO0lBQ3hCO0FBQ0osR0FDQSxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvcXVlcnktcHJlbG9hZGVyL2NyZWF0ZVF1ZXJ5UHJlbG9hZGVyLmpzP2RkYjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEludGVybmFsUXVlcnlSZWZlcmVuY2UsIHdyYXBRdWVyeVJlZiB9IGZyb20gXCIuLi9pbnRlcm5hbC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgd3JhcEhvb2sgfSBmcm9tIFwiLi4vaG9va3MvaW50ZXJuYWwvaW5kZXguanNcIjtcbi8qKlxuICogQSBoaWdoZXIgb3JkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgYHByZWxvYWRRdWVyeWAgZnVuY3Rpb24gd2hpY2hcbiAqIGNhbiBiZSB1c2VkIHRvIGJlZ2luIGxvYWRpbmcgYSBxdWVyeSB3aXRoIHRoZSBnaXZlbiBgY2xpZW50YC4gVGhpcyBpcyB1c2VmdWxcbiAqIHdoZW4geW91IHdhbnQgdG8gc3RhcnQgbG9hZGluZyBhIHF1ZXJ5IGFzIGVhcmx5IGFzIHBvc3NpYmxlIG91dHNpZGUgb2YgYVxuICogUmVhY3QgY29tcG9uZW50LlxuICpcbiAqID4gUmVmZXIgdG8gdGhlIFtTdXNwZW5zZSAtIEluaXRpYXRpbmcgcXVlcmllcyBvdXRzaWRlIFJlYWN0XShodHRwczovL3d3dy5hcG9sbG9ncmFwaHFsLmNvbS9kb2NzL3JlYWN0L2RhdGEvc3VzcGVuc2UjaW5pdGlhdGluZy1xdWVyaWVzLW91dHNpZGUtcmVhY3QpIHNlY3Rpb24gZm9yIGEgbW9yZSBpbi1kZXB0aCBvdmVydmlldy5cbiAqXG4gKiBAcGFyYW0gY2xpZW50IC0gVGhlIGBBcG9sbG9DbGllbnRgIGluc3RhbmNlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGxvYWQgcXVlcmllc1xuICogZnJvbSB0aGUgcmV0dXJuZWQgYHByZWxvYWRRdWVyeWAgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyBUaGUgYHByZWxvYWRRdWVyeWAgZnVuY3Rpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBjb25zdCBwcmVsb2FkUXVlcnkgPSBjcmVhdGVRdWVyeVByZWxvYWRlcihjbGllbnQpO1xuICogYGBgXG4gKiBAc2luY2UgMy45LjBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVF1ZXJ5UHJlbG9hZGVyKGNsaWVudCkge1xuICAgIHJldHVybiB3cmFwSG9vayhcImNyZWF0ZVF1ZXJ5UHJlbG9hZGVyXCIsIF9jcmVhdGVRdWVyeVByZWxvYWRlciwgY2xpZW50KShjbGllbnQpO1xufVxudmFyIF9jcmVhdGVRdWVyeVByZWxvYWRlciA9IGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcHJlbG9hZFF1ZXJ5KHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IH1cbiAgICAgICAgdmFyIHF1ZXJ5UmVmID0gbmV3IEludGVybmFsUXVlcnlSZWZlcmVuY2UoY2xpZW50LndhdGNoUXVlcnkoX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHF1ZXJ5OiBxdWVyeSB9KSksIHtcbiAgICAgICAgICAgIGF1dG9EaXNwb3NlVGltZW91dE1zOiAoX2IgPSAoX2EgPSBjbGllbnQuZGVmYXVsdE9wdGlvbnMucmVhY3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdXNwZW5zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmF1dG9EaXNwb3NlVGltZW91dE1zLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdyYXBRdWVyeVJlZihxdWVyeVJlZik7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVRdWVyeVByZWxvYWRlci5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJJbnRlcm5hbFF1ZXJ5UmVmZXJlbmNlIiwid3JhcFF1ZXJ5UmVmIiwid3JhcEhvb2siLCJjcmVhdGVRdWVyeVByZWxvYWRlciIsImNsaWVudCIsIl9jcmVhdGVRdWVyeVByZWxvYWRlciIsInByZWxvYWRRdWVyeSIsInF1ZXJ5Iiwib3B0aW9ucyIsIl9hIiwiX2IiLCJPYmplY3QiLCJjcmVhdGUiLCJxdWVyeVJlZiIsIndhdGNoUXVlcnkiLCJhdXRvRGlzcG9zZVRpbWVvdXRNcyIsImRlZmF1bHRPcHRpb25zIiwicmVhY3QiLCJzdXNwZW5zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/query-preloader/createQueryPreloader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/caches.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoCleanedStrongCache: () => (/* binding */ AutoCleanedStrongCache),\n/* harmony export */   AutoCleanedWeakCache: () => (/* binding */ AutoCleanedWeakCache)\n/* harmony export */ });\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/strong.js\");\n\nvar scheduledCleanup = new WeakSet();\nfunction schedule(cache) {\n    if (cache.size <= (cache.max || -1)) {\n        return;\n    }\n    if (!scheduledCleanup.has(cache)) {\n        scheduledCleanup.add(cache);\n        setTimeout(function() {\n            cache.clean();\n            scheduledCleanup.delete(cache);\n        }, 100);\n    }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */ var AutoCleanedWeakCache = function(max, dispose) {\n    /*\n    Some builds of `WeakCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache(max, dispose);\n    cache.set = function(key, value) {\n        var ret = _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache.prototype.set.call(this, key, value);\n        schedule(this);\n        return ret;\n    };\n    return cache;\n};\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */ var AutoCleanedStrongCache = function(max, dispose) {\n    /*\n    Some builds of `StrongCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache(max, dispose);\n    cache.set = function(key, value) {\n        var ret = _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache.prototype.set.call(this, key, value);\n        schedule(this);\n        return ret;\n    };\n    return cache;\n}; //# sourceMappingURL=caches.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvY2FjaGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFDckQsSUFBSUUsbUJBQW1CLElBQUlDO0FBQzNCLFNBQVNDLFNBQVNDLEtBQUs7SUFDbkIsSUFBSUEsTUFBTUMsSUFBSSxJQUFLRCxDQUFBQSxNQUFNRSxHQUFHLElBQUksQ0FBQyxJQUFJO1FBQ2pDO0lBQ0o7SUFDQSxJQUFJLENBQUNMLGlCQUFpQk0sR0FBRyxDQUFDSCxRQUFRO1FBQzlCSCxpQkFBaUJPLEdBQUcsQ0FBQ0o7UUFDckJLLFdBQVc7WUFDUEwsTUFBTU0sS0FBSztZQUNYVCxpQkFBaUJVLE1BQU0sQ0FBQ1A7UUFDNUIsR0FBRztJQUNQO0FBQ0o7QUFDQTs7Ozs7Ozs7OztDQVVDLEdBQ00sSUFBSVEsdUJBQXVCLFNBQVVOLEdBQUcsRUFBRU8sT0FBTztJQUNwRDs7Ozs7O0lBTUEsR0FDQSxJQUFJVCxRQUFRLElBQUlMLGtEQUFTQSxDQUFDTyxLQUFLTztJQUMvQlQsTUFBTVUsR0FBRyxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsS0FBSztRQUM1QixJQUFJQyxNQUFNbEIsa0RBQVNBLENBQUNtQixTQUFTLENBQUNKLEdBQUcsQ0FBQ0ssSUFBSSxDQUFDLElBQUksRUFBRUosS0FBS0M7UUFDbERiLFNBQVMsSUFBSTtRQUNiLE9BQU9jO0lBQ1g7SUFDQSxPQUFPYjtBQUNYLEVBQUU7QUFDRjs7Ozs7Ozs7OztDQVVDLEdBQ00sSUFBSWdCLHlCQUF5QixTQUFVZCxHQUFHLEVBQUVPLE9BQU87SUFDdEQ7Ozs7OztJQU1BLEdBQ0EsSUFBSVQsUUFBUSxJQUFJSixvREFBV0EsQ0FBQ00sS0FBS087SUFDakNULE1BQU1VLEdBQUcsR0FBRyxTQUFVQyxHQUFHLEVBQUVDLEtBQUs7UUFDNUIsSUFBSUMsTUFBTWpCLG9EQUFXQSxDQUFDa0IsU0FBUyxDQUFDSixHQUFHLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUVKLEtBQUtDO1FBQ3BEYixTQUFTLElBQUk7UUFDYixPQUFPYztJQUNYO0lBQ0EsT0FBT2I7QUFDWCxFQUFFLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jYWNoaW5nL2NhY2hlcy5qcz8yMTNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdlYWtDYWNoZSwgU3Ryb25nQ2FjaGUgfSBmcm9tIFwiQHdyeS9jYWNoZXNcIjtcbnZhciBzY2hlZHVsZWRDbGVhbnVwID0gbmV3IFdlYWtTZXQoKTtcbmZ1bmN0aW9uIHNjaGVkdWxlKGNhY2hlKSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPD0gKGNhY2hlLm1heCB8fCAtMSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXNjaGVkdWxlZENsZWFudXAuaGFzKGNhY2hlKSkge1xuICAgICAgICBzY2hlZHVsZWRDbGVhbnVwLmFkZChjYWNoZSk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2FjaGUuY2xlYW4oKTtcbiAgICAgICAgICAgIHNjaGVkdWxlZENsZWFudXAuZGVsZXRlKGNhY2hlKTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQSB2ZXJzaW9uIG9mIFdlYWtDYWNoZSB0aGF0IHdpbGwgYXV0by1zY2hlZHVsZSBhIGNsZWFudXAgb2YgdGhlIGNhY2hlIHdoZW5cbiAqIGEgbmV3IGl0ZW0gaXMgYWRkZWQgYW5kIHRoZSBjYWNoZSByZWFjaGVkIG1heGltdW0gc2l6ZS5cbiAqIFRocm90dGxlZCB0byBvbmNlIHBlciAxMDBtcy5cbiAqXG4gKiBAcHJpdmF0ZVJlbWFya3NcbiAqIFNob3VsZCBiZSB1c2VkIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhlIGNvZGViYXNlIGluc3RlYWQgb2YgV2Vha0NhY2hlLFxuICogd2l0aCB0aGUgbm90YWJsZSBleGNlcHRpb24gb2YgdXNhZ2UgaW4gYHdyYXBgIGZyb20gYG9wdGltaXNtYCAtIHRoYXQgb25lXG4gKiBhbHJlYWR5IGhhbmRsZXMgY2xlYW51cCBhbmQgc2hvdWxkIHJlbWFpbiBhIGBXZWFrQ2FjaGVgLlxuICovXG5leHBvcnQgdmFyIEF1dG9DbGVhbmVkV2Vha0NhY2hlID0gZnVuY3Rpb24gKG1heCwgZGlzcG9zZSkge1xuICAgIC8qXG4gICAgU29tZSBidWlsZHMgb2YgYFdlYWtDYWNoZWAgYXJlIGZ1bmN0aW9uIHByb3RvdHlwZXMsIHNvbWUgYXJlIGNsYXNzZXMuXG4gICAgVGhpcyBsaWJyYXJ5IHN0aWxsIGJ1aWxkcyB3aXRoIGFuIEVTNSB0YXJnZXQsIHNvIHdlIGNhbid0IGV4dGVuZCB0aGVcbiAgICByZWFsIGNsYXNzZXMuXG4gICAgSW5zdGVhZCwgd2UgaGF2ZSB0byB1c2UgdGhpcyB3b3JrYXJvdW5kIHVudGlsIHdlIHN3aXRjaCB0byBhIG5ld2VyIGJ1aWxkXG4gICAgdGFyZ2V0LlxuICAgICovXG4gICAgdmFyIGNhY2hlID0gbmV3IFdlYWtDYWNoZShtYXgsIGRpc3Bvc2UpO1xuICAgIGNhY2hlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciByZXQgPSBXZWFrQ2FjaGUucHJvdG90eXBlLnNldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBzY2hlZHVsZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIHJldHVybiBjYWNoZTtcbn07XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQSB2ZXJzaW9uIG9mIFN0cm9uZ0NhY2hlIHRoYXQgd2lsbCBhdXRvLXNjaGVkdWxlIGEgY2xlYW51cCBvZiB0aGUgY2FjaGUgd2hlblxuICogYSBuZXcgaXRlbSBpcyBhZGRlZCBhbmQgdGhlIGNhY2hlIHJlYWNoZWQgbWF4aW11bSBzaXplLlxuICogVGhyb3R0bGVkIHRvIG9uY2UgcGVyIDEwMG1zLlxuICpcbiAqIEBwcml2YXRlUmVtYXJrc1xuICogU2hvdWxkIGJlIHVzZWQgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGUgY29kZWJhc2UgaW5zdGVhZCBvZiBTdHJvbmdDYWNoZSxcbiAqIHdpdGggdGhlIG5vdGFibGUgZXhjZXB0aW9uIG9mIHVzYWdlIGluIGB3cmFwYCBmcm9tIGBvcHRpbWlzbWAgLSB0aGF0IG9uZVxuICogYWxyZWFkeSBoYW5kbGVzIGNsZWFudXAgYW5kIHNob3VsZCByZW1haW4gYSBgU3Ryb25nQ2FjaGVgLlxuICovXG5leHBvcnQgdmFyIEF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUgPSBmdW5jdGlvbiAobWF4LCBkaXNwb3NlKSB7XG4gICAgLypcbiAgICBTb21lIGJ1aWxkcyBvZiBgU3Ryb25nQ2FjaGVgIGFyZSBmdW5jdGlvbiBwcm90b3R5cGVzLCBzb21lIGFyZSBjbGFzc2VzLlxuICAgIFRoaXMgbGlicmFyeSBzdGlsbCBidWlsZHMgd2l0aCBhbiBFUzUgdGFyZ2V0LCBzbyB3ZSBjYW4ndCBleHRlbmQgdGhlXG4gICAgcmVhbCBjbGFzc2VzLlxuICAgIEluc3RlYWQsIHdlIGhhdmUgdG8gdXNlIHRoaXMgd29ya2Fyb3VuZCB1bnRpbCB3ZSBzd2l0Y2ggdG8gYSBuZXdlciBidWlsZFxuICAgIHRhcmdldC5cbiAgICAqL1xuICAgIHZhciBjYWNoZSA9IG5ldyBTdHJvbmdDYWNoZShtYXgsIGRpc3Bvc2UpO1xuICAgIGNhY2hlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciByZXQgPSBTdHJvbmdDYWNoZS5wcm90b3R5cGUuc2V0LmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIHNjaGVkdWxlKHRoaXMpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gICAgcmV0dXJuIGNhY2hlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlcy5qcy5tYXAiXSwibmFtZXMiOlsiV2Vha0NhY2hlIiwiU3Ryb25nQ2FjaGUiLCJzY2hlZHVsZWRDbGVhbnVwIiwiV2Vha1NldCIsInNjaGVkdWxlIiwiY2FjaGUiLCJzaXplIiwibWF4IiwiaGFzIiwiYWRkIiwic2V0VGltZW91dCIsImNsZWFuIiwiZGVsZXRlIiwiQXV0b0NsZWFuZWRXZWFrQ2FjaGUiLCJkaXNwb3NlIiwic2V0Iiwia2V5IiwidmFsdWUiLCJyZXQiLCJwcm90b3R5cGUiLCJjYWxsIiwiQXV0b0NsZWFuZWRTdHJvbmdDYWNoZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloCacheMemoryInternals: () => (/* binding */ getApolloCacheMemoryInternals),\n/* harmony export */   getApolloClientMemoryInternals: () => (/* binding */ getApolloClientMemoryInternals),\n/* harmony export */   getInMemoryCacheMemoryInternals: () => (/* binding */ getInMemoryCacheMemoryInternals),\n/* harmony export */   registerGlobalCache: () => (/* binding */ registerGlobalCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _sizes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sizes.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\nvar globalCaches = {};\nfunction registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ? _getApolloClientMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ? _getInMemoryCacheMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ? _getApolloCacheMemoryInternals : undefined;\nfunction getCurrentCacheSizes() {\n    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n    var defaults = {\n        parser: 1000 /* defaultCacheSizes[\"parser\"] */ ,\n        canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */ ,\n        print: 2000 /* defaultCacheSizes[\"print\"] */ ,\n        \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */ ,\n        \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ ,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */ ,\n        \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */ ,\n        \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */ ,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */ ,\n        \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */ ,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n        \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ \n    };\n    return Object.fromEntries(Object.entries(defaults).map(function(_a) {\n        var k = _a[0], v = _a[1];\n        return [\n            k,\n            _sizes_js__WEBPACK_IMPORTED_MODULE_0__.cacheSizes[k] || v\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _a, _b, _c, _d, _e;\n    if (!(globalThis.__DEV__ !== false)) throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches),\n            parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches),\n            canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches),\n            links: linkInfo(this.link),\n            queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform)\n            }\n        }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d))\n    };\n}\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"])\n        }\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    var fragments = this.config.fragments;\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _getApolloCacheMemoryInternals.apply(this)), {\n        addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n        inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"])\n        },\n        fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform)\n        }\n    });\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function(cache) {\n        return {\n            cache: cache\n        };\n    });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n    ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined) : [];\n}\nfunction linkInfo(link) {\n    var _a;\n    return link ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)\n    ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined) : [];\n} //# sourceMappingURL=getMemoryInternals.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/sizes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSizes: () => (/* binding */ cacheSizes)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\nvar cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n *\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `parser`, `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   parser: 100\n * } satisfies Partial<CacheSizes> // the `satisfies` is optional if using TypeScript\n * ```\n */ var cacheSizes = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.global[cacheSizeSymbol]); //# sourceMappingURL=sizes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvc2l6ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ1k7QUFDN0MsSUFBSUUsa0JBQWtCQyxPQUFPQyxHQUFHLENBQUM7QUFDakM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNNLElBQUlDLGFBQWFMLCtDQUFRQSxDQUFDLENBQUMsR0FBR0MscURBQU0sQ0FBQ0MsZ0JBQWdCLEVBQUUsQ0FDOUQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jYWNoaW5nL3NpemVzLmpzPzMzNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gXCIuLi9nbG9iYWxzL2luZGV4LmpzXCI7XG52YXIgY2FjaGVTaXplU3ltYm9sID0gU3ltYm9sLmZvcihcImFwb2xsby5jYWNoZVNpemVcIik7XG4vKipcbiAqXG4gKiBUaGUgZ2xvYmFsIGNhY2hlIHNpemUgY29uZmlndXJhdGlvbiBmb3IgQXBvbGxvIENsaWVudC5cbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIFlvdSBjYW4gZGlyZWN0bHkgbW9kaWZ5IHRoaXMgb2JqZWN0LCBidXQgYW55IG1vZGlmaWNhdGlvbiB3aWxsXG4gKiBvbmx5IGhhdmUgYW4gZWZmZWN0IG9uIGNhY2hlcyB0aGF0IGFyZSBjcmVhdGVkIGFmdGVyIHRoZSBtb2RpZmljYXRpb24uXG4gKlxuICogU28gZm9yIGdsb2JhbCBjYWNoZXMsIHN1Y2ggYXMgYHBhcnNlcmAsIGBjYW5vbmljYWxTdHJpbmdpZnlgIGFuZCBgcHJpbnRgLFxuICogeW91IG1pZ2h0IG5lZWQgdG8gY2FsbCBgLnJlc2V0YCBvbiB0aGVtLCB3aGljaCB3aWxsIGVzc2VudGlhbGx5IHJlLWNyZWF0ZSB0aGVtLlxuICpcbiAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gc2V0IGBnbG9iYWxUaGlzW1N5bWJvbC5mb3IoXCJhcG9sbG8uY2FjaGVTaXplXCIpXWAgYmVmb3JlXG4gKiB5b3UgbG9hZCB0aGUgQXBvbGxvIENsaWVudCBwYWNrYWdlOlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogZ2xvYmFsVGhpc1tTeW1ib2wuZm9yKFwiYXBvbGxvLmNhY2hlU2l6ZVwiKV0gPSB7XG4gKiAgIHBhcnNlcjogMTAwXG4gKiB9IHNhdGlzZmllcyBQYXJ0aWFsPENhY2hlU2l6ZXM+IC8vIHRoZSBgc2F0aXNmaWVzYCBpcyBvcHRpb25hbCBpZiB1c2luZyBUeXBlU2NyaXB0XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBjYWNoZVNpemVzID0gX19hc3NpZ24oe30sIGdsb2JhbFtjYWNoZVNpemVTeW1ib2xdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpemVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImdsb2JhbCIsImNhY2hlU2l6ZVN5bWJvbCIsIlN5bWJvbCIsImZvciIsImNhY2hlU2l6ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/arrays.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray)\n/* harmony export */ });\n// A version of Array.isArray that works better with readonly arrays.\nvar isArray = Array.isArray;\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n} //# sourceMappingURL=arrays.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9hcnJheXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxRUFBcUU7QUFDOUQsSUFBSUEsVUFBVUMsTUFBTUQsT0FBTyxDQUFDO0FBQzVCLFNBQVNFLGdCQUFnQkMsS0FBSztJQUNqQyxPQUFPRixNQUFNRCxPQUFPLENBQUNHLFVBQVVBLE1BQU1DLE1BQU0sR0FBRztBQUNsRCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2FycmF5cy5qcz80ZGZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEEgdmVyc2lvbiBvZiBBcnJheS5pc0FycmF5IHRoYXQgd29ya3MgYmV0dGVyIHdpdGggcmVhZG9ubHkgYXJyYXlzLlxuZXhwb3J0IHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmV4cG9ydCBmdW5jdGlvbiBpc05vbkVtcHR5QXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5cy5qcy5tYXAiXSwibmFtZXMiOlsiaXNBcnJheSIsIkFycmF5IiwiaXNOb25FbXB0eUFycmF5IiwidmFsdWUiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/canUse.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canUseAsyncIteratorSymbol: () => (/* binding */ canUseAsyncIteratorSymbol),\n/* harmony export */   canUseDOM: () => (/* binding */ canUseDOM),\n/* harmony export */   canUseLayoutEffect: () => (/* binding */ canUseLayoutEffect),\n/* harmony export */   canUseSymbol: () => (/* binding */ canUseSymbol),\n/* harmony export */   canUseWeakMap: () => (/* binding */ canUseWeakMap),\n/* harmony export */   canUseWeakSet: () => (/* binding */ canUseWeakSet)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar isReactNative = (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return navigator.product;\n}) == \"ReactNative\";\nvar canUseWeakMap = typeof WeakMap === \"function\" && !(isReactNative && !global.HermesInternal);\nvar canUseWeakSet = typeof WeakSet === \"function\";\nvar canUseSymbol = typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\nvar canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nvar canUseDOM = typeof (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return window.document.createElement;\n}) === \"function\";\nvar usingJSDOM = // Following advice found in this comment from @domenic (maintainer of jsdom):\n// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n//\n// Since we control the version of Jest and jsdom used when running Apollo\n// Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n// at the end of the user agent string, I believe this case is all we need to\n// check. Testing for \"Node.js\" was recommended for backwards compatibility\n// with older version of jsdom, but we don't have that problem.\n(0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return navigator.userAgent.indexOf(\"jsdom\") >= 0;\n}) || false;\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nvar canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM; //# sourceMappingURL=canUse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5Vc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE0QztBQUM1QyxJQUFJQyxnQkFBZ0JELHdEQUFLQSxDQUFDO0lBQWMsT0FBT0UsVUFBVUMsT0FBTztBQUFFLE1BQU07QUFDakUsSUFBSUMsZ0JBQWdCLE9BQU9DLFlBQVksY0FDMUMsQ0FBRUosQ0FBQUEsaUJBQWlCLENBQUNLLE9BQU9DLGNBQWMsRUFBRTtBQUN4QyxJQUFJQyxnQkFBZ0IsT0FBT0MsWUFBWSxXQUFXO0FBQ2xELElBQUlDLGVBQWUsT0FBT0MsV0FBVyxjQUFjLE9BQU9BLE9BQU9DLEdBQUcsS0FBSyxXQUFXO0FBQ3BGLElBQUlDLDRCQUE0QkgsZ0JBQWdCQyxPQUFPRyxhQUFhLENBQUM7QUFDckUsSUFBSUMsWUFBWSxPQUFPZix3REFBS0EsQ0FBQztJQUFjLE9BQU9nQixPQUFPQyxRQUFRLENBQUNDLGFBQWE7QUFBRSxPQUFPLFdBQVc7QUFDMUcsSUFBSUMsYUFDSiw4RUFBOEU7QUFDOUUsb0VBQW9FO0FBQ3BFLEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsNkVBQTZFO0FBQzdFLDZFQUE2RTtBQUM3RSwyRUFBMkU7QUFDM0UsK0RBQStEO0FBQy9EbkIsd0RBQUtBLENBQUM7SUFBYyxPQUFPRSxVQUFVa0IsU0FBUyxDQUFDQyxPQUFPLENBQUMsWUFBWTtBQUFHLE1BQU07QUFDNUUsc0VBQXNFO0FBQ3RFLCtFQUErRTtBQUMvRSx3RUFBd0U7QUFDeEUsMEVBQTBFO0FBQzFFLGdGQUFnRjtBQUNoRixpRUFBaUU7QUFDMUQsSUFBSUMscUJBQXFCLENBQUNQLGFBQWFkLGFBQVksS0FBTSxDQUFDa0IsV0FBVyxDQUM1RSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5Vc2UuanM/MGY1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXliZSB9IGZyb20gXCIuLi9nbG9iYWxzL2luZGV4LmpzXCI7XG52YXIgaXNSZWFjdE5hdGl2ZSA9IG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdmlnYXRvci5wcm9kdWN0OyB9KSA9PSBcIlJlYWN0TmF0aXZlXCI7XG5leHBvcnQgdmFyIGNhblVzZVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgIShpc1JlYWN0TmF0aXZlICYmICFnbG9iYWwuSGVybWVzSW50ZXJuYWwpO1xuZXhwb3J0IHZhciBjYW5Vc2VXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09IFwiZnVuY3Rpb25cIjtcbmV4cG9ydCB2YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuZm9yID09PSBcImZ1bmN0aW9uXCI7XG5leHBvcnQgdmFyIGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgPSBjYW5Vc2VTeW1ib2wgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3I7XG5leHBvcnQgdmFyIGNhblVzZURPTSA9IHR5cGVvZiBtYXliZShmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudDsgfSkgPT09IFwiZnVuY3Rpb25cIjtcbnZhciB1c2luZ0pTRE9NID0gXG4vLyBGb2xsb3dpbmcgYWR2aWNlIGZvdW5kIGluIHRoaXMgY29tbWVudCBmcm9tIEBkb21lbmljIChtYWludGFpbmVyIG9mIGpzZG9tKTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qc2RvbS9qc2RvbS9pc3N1ZXMvMTUzNyNpc3N1ZWNvbW1lbnQtMjI5NDA1MzI3XG4vL1xuLy8gU2luY2Ugd2UgY29udHJvbCB0aGUgdmVyc2lvbiBvZiBKZXN0IGFuZCBqc2RvbSB1c2VkIHdoZW4gcnVubmluZyBBcG9sbG9cbi8vIENsaWVudCB0ZXN0cywgYW5kIHRoYXQgdmVyc2lvbiBpcyByZWNlbnQgZW5vdWdodCB0byBpbmNsdWRlIFwiIGpzZG9tL3gueS56XCJcbi8vIGF0IHRoZSBlbmQgb2YgdGhlIHVzZXIgYWdlbnQgc3RyaW5nLCBJIGJlbGlldmUgdGhpcyBjYXNlIGlzIGFsbCB3ZSBuZWVkIHRvXG4vLyBjaGVjay4gVGVzdGluZyBmb3IgXCJOb2RlLmpzXCIgd2FzIHJlY29tbWVuZGVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuLy8gd2l0aCBvbGRlciB2ZXJzaW9uIG9mIGpzZG9tLCBidXQgd2UgZG9uJ3QgaGF2ZSB0aGF0IHByb2JsZW0uXG5tYXliZShmdW5jdGlvbiAoKSB7IHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJqc2RvbVwiKSA+PSAwOyB9KSB8fCBmYWxzZTtcbi8vIE91ciB0ZXN0cyBzaG91bGQgYWxsIGNvbnRpbnVlIHRvIHBhc3MgaWYgd2UgcmVtb3ZlIHRoaXMgIXVzaW5nSlNET01cbi8vIGNvbmRpdGlvbiwgdGhlcmVieSBhbGxvd2luZyB1c2VMYXlvdXRFZmZlY3Qgd2hlbiB1c2luZyBqc2RvbS4gVW5mb3J0dW5hdGVseSxcbi8vIGlmIHdlIGFsbG93IHVzZUxheW91dEVmZmVjdCwgdGhlbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBnZW5lcmF0ZXMgbWFueVxuLy8gd2FybmluZ3MgYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGRvaW5nIG5vdGhpbmcgb24gdGhlIHNlcnZlci4gV2hpbGUgdGhlc2Vcbi8vIHdhcm5pbmdzIGFyZSBoYXJtbGVzcywgdGhpcyAhdXNpbmdKU0RPTSBjb25kaXRpb24gc2VlbXMgdG8gYmUgdGhlIGJlc3Qgd2F5IHRvXG4vLyBwcmV2ZW50IHRoZW0gKGkuZS4gc2tpcHBpbmcgdXNlTGF5b3V0RWZmZWN0IHdoZW4gdXNpbmcganNkb20pLlxuZXhwb3J0IHZhciBjYW5Vc2VMYXlvdXRFZmZlY3QgPSAoY2FuVXNlRE9NIHx8IGlzUmVhY3ROYXRpdmUpICYmICF1c2luZ0pTRE9NO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FuVXNlLmpzLm1hcCJdLCJuYW1lcyI6WyJtYXliZSIsImlzUmVhY3ROYXRpdmUiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiY2FuVXNlV2Vha01hcCIsIldlYWtNYXAiLCJnbG9iYWwiLCJIZXJtZXNJbnRlcm5hbCIsImNhblVzZVdlYWtTZXQiLCJXZWFrU2V0IiwiY2FuVXNlU3ltYm9sIiwiU3ltYm9sIiwiZm9yIiwiY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1c2luZ0pTRE9NIiwidXNlckFnZW50IiwiaW5kZXhPZiIsImNhblVzZUxheW91dEVmZmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/canonicalStringify.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalStringify: () => (/* binding */ canonicalStringify)\n/* harmony export */ });\n/* harmony import */ var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n/**\n * Like JSON.stringify, but with object keys always sorted in the same order.\n *\n * To achieve performant sorting, this function uses a Map from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little bit more memory for every\n * object encountered that has different (more, less, a different order of) keys\n * than in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem, so we provide\n * canonicalStringify.reset() as a way of clearing the cache.\n * */ var canonicalStringify = Object.assign(function canonicalStringify(value) {\n    return JSON.stringify(value, stableObjectReplacer);\n}, {\n    reset: function() {\n        // Clearing the sortingMap will reclaim all cached memory, without\n        // affecting the logical results of canonicalStringify, but potentially\n        // sacrificing performance until the cache is refilled.\n        sortingMap = new _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__.AutoCleanedStrongCache(_utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__.cacheSizes.canonicalStringify || 1000 /* defaultCacheSizes.canonicalStringify */ );\n    }\n});\nif (globalThis.__DEV__ !== false) {\n    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__.registerGlobalCache)(\"canonicalStringify\", function() {\n        return sortingMap.size;\n    });\n}\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nvar sortingMap;\ncanonicalStringify.reset();\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key, value) {\n    if (value && typeof value === \"object\") {\n        var proto = Object.getPrototypeOf(value);\n        // We don't want to mess with objects that are not \"plain\" objects, which\n        // means their prototype is either Object.prototype or null. This check also\n        // prevents needlessly rearranging the indices of arrays.\n        if (proto === Object.prototype || proto === null) {\n            var keys = Object.keys(value);\n            // If keys is already sorted, let JSON.stringify serialize the original\n            // value instead of creating a new object with keys in the same order.\n            if (keys.every(everyKeyInOrder)) return value;\n            var unsortedKey = JSON.stringify(keys);\n            var sortedKeys = sortingMap.get(unsortedKey);\n            if (!sortedKeys) {\n                keys.sort();\n                var sortedKey = JSON.stringify(keys);\n                // Checking for sortedKey in the sortingMap allows us to share the same\n                // sorted array reference for all permutations of the same set of keys.\n                sortedKeys = sortingMap.get(sortedKey) || keys;\n                sortingMap.set(unsortedKey, sortedKeys);\n                sortingMap.set(sortedKey, sortedKeys);\n            }\n            var sortedObject_1 = Object.create(proto);\n            // Reassigning the keys in sorted order will cause JSON.stringify to\n            // serialize them in sorted order.\n            sortedKeys.forEach(function(key) {\n                sortedObject_1[key] = value[key];\n            });\n            return sortedObject_1;\n        }\n    }\n    return value;\n}\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(key, i, keys) {\n    return i === 0 || keys[i - 1] <= key;\n} //# sourceMappingURL=canonicalStringify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5vbmljYWxTdHJpbmdpZnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RjtBQUNoQjtBQUN2RTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRyxHQUNJLElBQUlHLHFCQUFxQkMsT0FBT0MsTUFBTSxDQUFDLFNBQVNGLG1CQUFtQkcsS0FBSztJQUMzRSxPQUFPQyxLQUFLQyxTQUFTLENBQUNGLE9BQU9HO0FBQ2pDLEdBQUc7SUFDQ0MsT0FBTztRQUNILGtFQUFrRTtRQUNsRSx1RUFBdUU7UUFDdkUsdURBQXVEO1FBQ3ZEQyxhQUFhLElBQUlYLCtFQUFzQkEsQ0FBQ0MsbUVBQVVBLENBQUNFLGtCQUFrQixJQUFJLEtBQUssd0NBQXdDO0lBQzFIO0FBQ0osR0FBRztBQUNILElBQUlTLFdBQVdDLE9BQU8sS0FBSyxPQUFPO0lBQzlCWCxtRkFBbUJBLENBQUMsc0JBQXNCO1FBQWMsT0FBT1MsV0FBV0csSUFBSTtJQUFFO0FBQ3BGO0FBQ0EsOEVBQThFO0FBQzlFLHNDQUFzQztBQUN0QyxJQUFJSDtBQUNKUixtQkFBbUJPLEtBQUs7QUFDeEIseUVBQXlFO0FBQ3pFLDRFQUE0RTtBQUM1RSx3RUFBd0U7QUFDeEUsOEVBQThFO0FBQzlFLHFFQUFxRTtBQUNyRSx5SEFBeUg7QUFDekgsU0FBU0QscUJBQXFCTSxHQUFHLEVBQUVULEtBQUs7SUFDcEMsSUFBSUEsU0FBUyxPQUFPQSxVQUFVLFVBQVU7UUFDcEMsSUFBSVUsUUFBUVosT0FBT2EsY0FBYyxDQUFDWDtRQUNsQyx5RUFBeUU7UUFDekUsNEVBQTRFO1FBQzVFLHlEQUF5RDtRQUN6RCxJQUFJVSxVQUFVWixPQUFPYyxTQUFTLElBQUlGLFVBQVUsTUFBTTtZQUM5QyxJQUFJRyxPQUFPZixPQUFPZSxJQUFJLENBQUNiO1lBQ3ZCLHVFQUF1RTtZQUN2RSxzRUFBc0U7WUFDdEUsSUFBSWEsS0FBS0MsS0FBSyxDQUFDQyxrQkFDWCxPQUFPZjtZQUNYLElBQUlnQixjQUFjZixLQUFLQyxTQUFTLENBQUNXO1lBQ2pDLElBQUlJLGFBQWFaLFdBQVdhLEdBQUcsQ0FBQ0Y7WUFDaEMsSUFBSSxDQUFDQyxZQUFZO2dCQUNiSixLQUFLTSxJQUFJO2dCQUNULElBQUlDLFlBQVluQixLQUFLQyxTQUFTLENBQUNXO2dCQUMvQix1RUFBdUU7Z0JBQ3ZFLHVFQUF1RTtnQkFDdkVJLGFBQWFaLFdBQVdhLEdBQUcsQ0FBQ0UsY0FBY1A7Z0JBQzFDUixXQUFXZ0IsR0FBRyxDQUFDTCxhQUFhQztnQkFDNUJaLFdBQVdnQixHQUFHLENBQUNELFdBQVdIO1lBQzlCO1lBQ0EsSUFBSUssaUJBQWlCeEIsT0FBT3lCLE1BQU0sQ0FBQ2I7WUFDbkMsb0VBQW9FO1lBQ3BFLGtDQUFrQztZQUNsQ08sV0FBV08sT0FBTyxDQUFDLFNBQVVmLEdBQUc7Z0JBQzVCYSxjQUFjLENBQUNiLElBQUksR0FBR1QsS0FBSyxDQUFDUyxJQUFJO1lBQ3BDO1lBQ0EsT0FBT2E7UUFDWDtJQUNKO0lBQ0EsT0FBT3RCO0FBQ1g7QUFDQSwrRUFBK0U7QUFDL0Usc0VBQXNFO0FBQ3RFLDhFQUE4RTtBQUM5RSwwQ0FBMEM7QUFDMUMsU0FBU2UsZ0JBQWdCTixHQUFHLEVBQUVnQixDQUFDLEVBQUVaLElBQUk7SUFDakMsT0FBT1ksTUFBTSxLQUFLWixJQUFJLENBQUNZLElBQUksRUFBRSxJQUFJaEI7QUFDckMsRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5vbmljYWxTdHJpbmdpZnkuanM/NjRkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdXRvQ2xlYW5lZFN0cm9uZ0NhY2hlLCBjYWNoZVNpemVzLCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvY2FjaGluZy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcmVnaXN0ZXJHbG9iYWxDYWNoZSB9IGZyb20gXCIuLi9jYWNoaW5nL2dldE1lbW9yeUludGVybmFscy5qc1wiO1xuLyoqXG4gKiBMaWtlIEpTT04uc3RyaW5naWZ5LCBidXQgd2l0aCBvYmplY3Qga2V5cyBhbHdheXMgc29ydGVkIGluIHRoZSBzYW1lIG9yZGVyLlxuICpcbiAqIFRvIGFjaGlldmUgcGVyZm9ybWFudCBzb3J0aW5nLCB0aGlzIGZ1bmN0aW9uIHVzZXMgYSBNYXAgZnJvbSBKU09OLXNlcmlhbGl6ZWRcbiAqIGFycmF5cyBvZiBrZXlzIChpbiBhbnkgb3JkZXIpIHRvIHNvcnRlZCBhcnJheXMgb2YgdGhlIHNhbWUga2V5cywgd2l0aCBhXG4gKiBzaW5nbGUgc29ydGVkIGFycmF5IHJlZmVyZW5jZSBzaGFyZWQgYnkgYWxsIHBlcm11dGF0aW9ucyBvZiB0aGUga2V5cy5cbiAqXG4gKiBBcyBhIGRyYXdiYWNrLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYWRkIGEgbGl0dGxlIGJpdCBtb3JlIG1lbW9yeSBmb3IgZXZlcnlcbiAqIG9iamVjdCBlbmNvdW50ZXJlZCB0aGF0IGhhcyBkaWZmZXJlbnQgKG1vcmUsIGxlc3MsIGEgZGlmZmVyZW50IG9yZGVyIG9mKSBrZXlzXG4gKiB0aGFuIGluIHRoZSBwYXN0LlxuICpcbiAqIEluIGEgdHlwaWNhbCBhcHBsaWNhdGlvbiwgdGhpcyBleHRyYSBtZW1vcnkgdXNhZ2Ugc2hvdWxkIG5vdCBwbGF5IGFcbiAqIHNpZ25pZmljYW50IHJvbGUsIGFzIGBjYW5vbmljYWxTdHJpbmdpZnlgIHdpbGwgYmUgY2FsbGVkIGZvciBvbmx5IGEgbGltaXRlZFxuICogbnVtYmVyIG9mIG9iamVjdCBzaGFwZXMsIGFuZCB0aGUgY2FjaGUgd2lsbCBub3QgZ3JvdyBiZXlvbmQgYSBjZXJ0YWluIHBvaW50LlxuICogQnV0IGluIHNvbWUgZWRnZSBjYXNlcywgdGhpcyBjb3VsZCBiZSBhIHByb2JsZW0sIHNvIHdlIHByb3ZpZGVcbiAqIGNhbm9uaWNhbFN0cmluZ2lmeS5yZXNldCgpIGFzIGEgd2F5IG9mIGNsZWFyaW5nIHRoZSBjYWNoZS5cbiAqICovXG5leHBvcnQgdmFyIGNhbm9uaWNhbFN0cmluZ2lmeSA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gY2Fub25pY2FsU3RyaW5naWZ5KHZhbHVlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlLCBzdGFibGVPYmplY3RSZXBsYWNlcik7XG59LCB7XG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQ2xlYXJpbmcgdGhlIHNvcnRpbmdNYXAgd2lsbCByZWNsYWltIGFsbCBjYWNoZWQgbWVtb3J5LCB3aXRob3V0XG4gICAgICAgIC8vIGFmZmVjdGluZyB0aGUgbG9naWNhbCByZXN1bHRzIG9mIGNhbm9uaWNhbFN0cmluZ2lmeSwgYnV0IHBvdGVudGlhbGx5XG4gICAgICAgIC8vIHNhY3JpZmljaW5nIHBlcmZvcm1hbmNlIHVudGlsIHRoZSBjYWNoZSBpcyByZWZpbGxlZC5cbiAgICAgICAgc29ydGluZ01hcCA9IG5ldyBBdXRvQ2xlYW5lZFN0cm9uZ0NhY2hlKGNhY2hlU2l6ZXMuY2Fub25pY2FsU3RyaW5naWZ5IHx8IDEwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXMuY2Fub25pY2FsU3RyaW5naWZ5ICovKTtcbiAgICB9LFxufSk7XG5pZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgIHJlZ2lzdGVyR2xvYmFsQ2FjaGUoXCJjYW5vbmljYWxTdHJpbmdpZnlcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc29ydGluZ01hcC5zaXplOyB9KTtcbn1cbi8vIFZhbHVlcyBhcmUgSlNPTi1zZXJpYWxpemVkIGFycmF5cyBvZiBvYmplY3Qga2V5cyAoaW4gYW55IG9yZGVyKSwgYW5kIHZhbHVlc1xuLy8gYXJlIHNvcnRlZCBhcnJheXMgb2YgdGhlIHNhbWUga2V5cy5cbnZhciBzb3J0aW5nTWFwO1xuY2Fub25pY2FsU3RyaW5naWZ5LnJlc2V0KCk7XG4vLyBUaGUgSlNPTi5zdHJpbmdpZnkgZnVuY3Rpb24gdGFrZXMgYW4gb3B0aW9uYWwgc2Vjb25kIGFyZ3VtZW50IGNhbGxlZCBhXG4vLyByZXBsYWNlciBmdW5jdGlvbi4gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2gga2V5LXZhbHVlIHBhaXIgaW4gdGhlXG4vLyBvYmplY3QgYmVpbmcgc3RyaW5naWZpZWQsIGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIHVzZWQgaW5zdGVhZCBvZiB0aGVcbi8vIG9yaWdpbmFsIHZhbHVlLiBJZiB0aGUgcmVwbGFjZXIgZnVuY3Rpb24gcmV0dXJucyBhIG5ldyB2YWx1ZSwgdGhhdCB2YWx1ZSBpc1xuLy8gc3RyaW5naWZpZWQgYXMgSlNPTiBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCB2YWx1ZSBvZiB0aGUgcHJvcGVydHkuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9KU09OL3N0cmluZ2lmeSN0aGVfcmVwbGFjZXJfcGFyYW1ldGVyXG5mdW5jdGlvbiBzdGFibGVPYmplY3RSZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIG1lc3Mgd2l0aCBvYmplY3RzIHRoYXQgYXJlIG5vdCBcInBsYWluXCIgb2JqZWN0cywgd2hpY2hcbiAgICAgICAgLy8gbWVhbnMgdGhlaXIgcHJvdG90eXBlIGlzIGVpdGhlciBPYmplY3QucHJvdG90eXBlIG9yIG51bGwuIFRoaXMgY2hlY2sgYWxzb1xuICAgICAgICAvLyBwcmV2ZW50cyBuZWVkbGVzc2x5IHJlYXJyYW5naW5nIHRoZSBpbmRpY2VzIG9mIGFycmF5cy5cbiAgICAgICAgaWYgKHByb3RvID09PSBPYmplY3QucHJvdG90eXBlIHx8IHByb3RvID09PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgICAgICAgICAgIC8vIElmIGtleXMgaXMgYWxyZWFkeSBzb3J0ZWQsIGxldCBKU09OLnN0cmluZ2lmeSBzZXJpYWxpemUgdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAvLyB2YWx1ZSBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG9iamVjdCB3aXRoIGtleXMgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAgICAgICAgICBpZiAoa2V5cy5ldmVyeShldmVyeUtleUluT3JkZXIpKVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIHZhciB1bnNvcnRlZEtleSA9IEpTT04uc3RyaW5naWZ5KGtleXMpO1xuICAgICAgICAgICAgdmFyIHNvcnRlZEtleXMgPSBzb3J0aW5nTWFwLmdldCh1bnNvcnRlZEtleSk7XG4gICAgICAgICAgICBpZiAoIXNvcnRlZEtleXMpIHtcbiAgICAgICAgICAgICAgICBrZXlzLnNvcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgc29ydGVkS2V5ID0gSlNPTi5zdHJpbmdpZnkoa2V5cyk7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2tpbmcgZm9yIHNvcnRlZEtleSBpbiB0aGUgc29ydGluZ01hcCBhbGxvd3MgdXMgdG8gc2hhcmUgdGhlIHNhbWVcbiAgICAgICAgICAgICAgICAvLyBzb3J0ZWQgYXJyYXkgcmVmZXJlbmNlIGZvciBhbGwgcGVybXV0YXRpb25zIG9mIHRoZSBzYW1lIHNldCBvZiBrZXlzLlxuICAgICAgICAgICAgICAgIHNvcnRlZEtleXMgPSBzb3J0aW5nTWFwLmdldChzb3J0ZWRLZXkpIHx8IGtleXM7XG4gICAgICAgICAgICAgICAgc29ydGluZ01hcC5zZXQodW5zb3J0ZWRLZXksIHNvcnRlZEtleXMpO1xuICAgICAgICAgICAgICAgIHNvcnRpbmdNYXAuc2V0KHNvcnRlZEtleSwgc29ydGVkS2V5cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc29ydGVkT2JqZWN0XzEgPSBPYmplY3QuY3JlYXRlKHByb3RvKTtcbiAgICAgICAgICAgIC8vIFJlYXNzaWduaW5nIHRoZSBrZXlzIGluIHNvcnRlZCBvcmRlciB3aWxsIGNhdXNlIEpTT04uc3RyaW5naWZ5IHRvXG4gICAgICAgICAgICAvLyBzZXJpYWxpemUgdGhlbSBpbiBzb3J0ZWQgb3JkZXIuXG4gICAgICAgICAgICBzb3J0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHNvcnRlZE9iamVjdF8xW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc29ydGVkT2JqZWN0XzE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLy8gU2luY2UgZXZlcnl0aGluZyB0aGF0IGhhcHBlbnMgaW4gc3RhYmxlT2JqZWN0UmVwbGFjZXIgYmVuZWZpdHMgZnJvbSBiZWluZyBhc1xuLy8gZWZmaWNpZW50IGFzIHBvc3NpYmxlLCB3ZSB1c2UgYSBzdGF0aWMgZnVuY3Rpb24gYXMgdGhlIGNhbGxiYWNrIGZvclxuLy8ga2V5cy5ldmVyeSBpbiBvcmRlciB0byB0ZXN0IGlmIHRoZSBwcm92aWRlZCBrZXlzIGFyZSBhbHJlYWR5IHNvcnRlZCB3aXRob3V0XG4vLyBhbGxvY2F0aW5nIGV4dHJhIG1lbW9yeSBmb3IgYSBjYWxsYmFjay5cbmZ1bmN0aW9uIGV2ZXJ5S2V5SW5PcmRlcihrZXksIGksIGtleXMpIHtcbiAgICByZXR1cm4gaSA9PT0gMCB8fCBrZXlzW2kgLSAxXSA8PSBrZXk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYW5vbmljYWxTdHJpbmdpZnkuanMubWFwIl0sIm5hbWVzIjpbIkF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUiLCJjYWNoZVNpemVzIiwicmVnaXN0ZXJHbG9iYWxDYWNoZSIsImNhbm9uaWNhbFN0cmluZ2lmeSIsIk9iamVjdCIsImFzc2lnbiIsInZhbHVlIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0YWJsZU9iamVjdFJlcGxhY2VyIiwicmVzZXQiLCJzb3J0aW5nTWFwIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJzaXplIiwia2V5IiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImtleXMiLCJldmVyeSIsImV2ZXJ5S2V5SW5PcmRlciIsInVuc29ydGVkS2V5Iiwic29ydGVkS2V5cyIsImdldCIsInNvcnQiLCJzb3J0ZWRLZXkiLCJzZXQiLCJzb3J0ZWRPYmplY3RfMSIsImNyZWF0ZSIsImZvckVhY2giLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/cloneDeep.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cloneDeep: () => (/* binding */ cloneDeep)\n/* harmony export */ });\nvar toString = Object.prototype.toString;\n/**\n * Deeply clones a value to create a new instance.\n */ function cloneDeep(value) {\n    return cloneDeepHelper(value);\n}\nfunction cloneDeepHelper(val, seen) {\n    switch(toString.call(val)){\n        case \"[object Array]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                var copy_1 = val.slice(0);\n                seen.set(val, copy_1);\n                copy_1.forEach(function(child, i) {\n                    copy_1[i] = cloneDeepHelper(child, seen);\n                });\n                return copy_1;\n            }\n        case \"[object Object]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n                // possible in all JS environments, so we will assume they exist/work.\n                var copy_2 = Object.create(Object.getPrototypeOf(val));\n                seen.set(val, copy_2);\n                Object.keys(val).forEach(function(key) {\n                    copy_2[key] = cloneDeepHelper(val[key], seen);\n                });\n                return copy_2;\n            }\n        default:\n            return val;\n    }\n} //# sourceMappingURL=cloneDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jbG9uZURlZXAuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLFdBQVdDLE9BQU9DLFNBQVMsQ0FBQ0YsUUFBUTtBQUN4Qzs7Q0FFQyxHQUNNLFNBQVNHLFVBQVVDLEtBQUs7SUFDM0IsT0FBT0MsZ0JBQWdCRDtBQUMzQjtBQUNBLFNBQVNDLGdCQUFnQkMsR0FBRyxFQUFFQyxJQUFJO0lBQzlCLE9BQVFQLFNBQVNRLElBQUksQ0FBQ0Y7UUFDbEIsS0FBSztZQUFrQjtnQkFDbkJDLE9BQU9BLFFBQVEsSUFBSUU7Z0JBQ25CLElBQUlGLEtBQUtHLEdBQUcsQ0FBQ0osTUFDVCxPQUFPQyxLQUFLSSxHQUFHLENBQUNMO2dCQUNwQixJQUFJTSxTQUFTTixJQUFJTyxLQUFLLENBQUM7Z0JBQ3ZCTixLQUFLTyxHQUFHLENBQUNSLEtBQUtNO2dCQUNkQSxPQUFPRyxPQUFPLENBQUMsU0FBVUMsS0FBSyxFQUFFQyxDQUFDO29CQUM3QkwsTUFBTSxDQUFDSyxFQUFFLEdBQUdaLGdCQUFnQlcsT0FBT1Q7Z0JBQ3ZDO2dCQUNBLE9BQU9LO1lBQ1g7UUFDQSxLQUFLO1lBQW1CO2dCQUNwQkwsT0FBT0EsUUFBUSxJQUFJRTtnQkFDbkIsSUFBSUYsS0FBS0csR0FBRyxDQUFDSixNQUNULE9BQU9DLEtBQUtJLEdBQUcsQ0FBQ0w7Z0JBQ3BCLHlFQUF5RTtnQkFDekUsc0VBQXNFO2dCQUN0RSxJQUFJWSxTQUFTakIsT0FBT2tCLE1BQU0sQ0FBQ2xCLE9BQU9tQixjQUFjLENBQUNkO2dCQUNqREMsS0FBS08sR0FBRyxDQUFDUixLQUFLWTtnQkFDZGpCLE9BQU9vQixJQUFJLENBQUNmLEtBQUtTLE9BQU8sQ0FBQyxTQUFVTyxHQUFHO29CQUNsQ0osTUFBTSxDQUFDSSxJQUFJLEdBQUdqQixnQkFBZ0JDLEdBQUcsQ0FBQ2dCLElBQUksRUFBRWY7Z0JBQzVDO2dCQUNBLE9BQU9XO1lBQ1g7UUFDQTtZQUNJLE9BQU9aO0lBQ2Y7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2Nsb25lRGVlcC5qcz84ODQwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4vKipcbiAqIERlZXBseSBjbG9uZXMgYSB2YWx1ZSB0byBjcmVhdGUgYSBuZXcgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICByZXR1cm4gY2xvbmVEZWVwSGVscGVyKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGNsb25lRGVlcEhlbHBlcih2YWwsIHNlZW4pIHtcbiAgICBzd2l0Y2ggKHRvU3RyaW5nLmNhbGwodmFsKSkge1xuICAgICAgICBjYXNlIFwiW29iamVjdCBBcnJheV1cIjoge1xuICAgICAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xuICAgICAgICAgICAgaWYgKHNlZW4uaGFzKHZhbCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4uZ2V0KHZhbCk7XG4gICAgICAgICAgICB2YXIgY29weV8xID0gdmFsLnNsaWNlKDApO1xuICAgICAgICAgICAgc2Vlbi5zZXQodmFsLCBjb3B5XzEpO1xuICAgICAgICAgICAgY29weV8xLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICAgICAgICAgICAgY29weV8xW2ldID0gY2xvbmVEZWVwSGVscGVyKGNoaWxkLCBzZWVuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvcHlfMTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiW29iamVjdCBPYmplY3RdXCI6IHtcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGlmIChzZWVuLmhhcyh2YWwpKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLmdldCh2YWwpO1xuICAgICAgICAgICAgLy8gSGlnaCBmaWRlbGl0eSBwb2x5ZmlsbHMgb2YgT2JqZWN0LmNyZWF0ZSBhbmQgT2JqZWN0LmdldFByb3RvdHlwZU9mIGFyZVxuICAgICAgICAgICAgLy8gcG9zc2libGUgaW4gYWxsIEpTIGVudmlyb25tZW50cywgc28gd2Ugd2lsbCBhc3N1bWUgdGhleSBleGlzdC93b3JrLlxuICAgICAgICAgICAgdmFyIGNvcHlfMiA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCkpO1xuICAgICAgICAgICAgc2Vlbi5zZXQodmFsLCBjb3B5XzIpO1xuICAgICAgICAgICAgT2JqZWN0LmtleXModmFsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBjb3B5XzJba2V5XSA9IGNsb25lRGVlcEhlbHBlcih2YWxba2V5XSwgc2Vlbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb3B5XzI7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xvbmVEZWVwLmpzLm1hcCJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsImNsb25lRGVlcCIsInZhbHVlIiwiY2xvbmVEZWVwSGVscGVyIiwidmFsIiwic2VlbiIsImNhbGwiLCJNYXAiLCJoYXMiLCJnZXQiLCJjb3B5XzEiLCJzbGljZSIsInNldCIsImZvckVhY2giLCJjaGlsZCIsImkiLCJjb3B5XzIiLCJjcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsImtleXMiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/compact.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/compact.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compact: () => (/* binding */ compact)\n/* harmony export */ });\n/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */ function compact() {\n    var objects = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        objects[_i] = arguments[_i];\n    }\n    var result = Object.create(null);\n    objects.forEach(function(obj) {\n        if (!obj) return;\n        Object.keys(obj).forEach(function(key) {\n            var value = obj[key];\n            if (value !== void 0) {\n                result[key] = value;\n            }\n        });\n    });\n    return result;\n} //# sourceMappingURL=compact.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jb21wYWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FDTSxTQUFTQTtJQUNaLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxPQUFPLENBQUNDLEdBQUcsR0FBR0MsU0FBUyxDQUFDRCxHQUFHO0lBQy9CO0lBQ0EsSUFBSUcsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0lBQzNCTixRQUFRTyxPQUFPLENBQUMsU0FBVUMsR0FBRztRQUN6QixJQUFJLENBQUNBLEtBQ0Q7UUFDSkgsT0FBT0ksSUFBSSxDQUFDRCxLQUFLRCxPQUFPLENBQUMsU0FBVUcsR0FBRztZQUNsQyxJQUFJQyxRQUFRSCxHQUFHLENBQUNFLElBQUk7WUFDcEIsSUFBSUMsVUFBVSxLQUFLLEdBQUc7Z0JBQ2xCUCxNQUFNLENBQUNNLElBQUksR0FBR0M7WUFDbEI7UUFDSjtJQUNKO0lBQ0EsT0FBT1A7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2NvbXBhY3QuanM/NmU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1lcmdlcyB0aGUgcHJvdmlkZWQgb2JqZWN0cyBzaGFsbG93bHkgYW5kIHJlbW92ZXNcbiAqIGFsbCBwcm9wZXJ0aWVzIHdpdGggYW4gYHVuZGVmaW5lZGAgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhY3QoKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYmplY3RzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIG9iamVjdHMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICghb2JqKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wYWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJjb21wYWN0Iiwib2JqZWN0cyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVzdWx0IiwiT2JqZWN0IiwiY3JlYXRlIiwiZm9yRWFjaCIsIm9iaiIsImtleXMiLCJrZXkiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/errorHandling.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGraphQLErrorsFromResult: () => (/* binding */ getGraphQLErrorsFromResult),\n/* harmony export */   graphQLResultHasError: () => (/* binding */ graphQLResultHasError)\n/* harmony export */ });\n/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _incrementalResult_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n\n\nfunction graphQLResultHasError(result) {\n    var errors = getGraphQLErrorsFromResult(result);\n    return (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(errors);\n}\nfunction getGraphQLErrorsFromResult(result) {\n    var graphQLErrors = (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];\n    if ((0,_incrementalResult_js__WEBPACK_IMPORTED_MODULE_1__.isExecutionPatchIncrementalResult)(result) && (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(result.incremental)) {\n        result.incremental.forEach(function(incrementalResult) {\n            if (incrementalResult.errors) {\n                graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n            }\n        });\n    }\n    return graphQLErrors;\n} //# sourceMappingURL=errorHandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9lcnJvckhhbmRsaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEM7QUFDNkI7QUFDcEUsU0FBU0Usc0JBQXNCQyxNQUFNO0lBQ3hDLElBQUlDLFNBQVNDLDJCQUEyQkY7SUFDeEMsT0FBT0gsMkRBQWVBLENBQUNJO0FBQzNCO0FBQ08sU0FBU0MsMkJBQTJCRixNQUFNO0lBQzdDLElBQUlHLGdCQUFnQk4sMkRBQWVBLENBQUNHLE9BQU9DLE1BQU0sSUFBSUQsT0FBT0MsTUFBTSxDQUFDRyxLQUFLLENBQUMsS0FBSyxFQUFFO0lBQ2hGLElBQUlOLHdGQUFpQ0EsQ0FBQ0UsV0FDbENILDJEQUFlQSxDQUFDRyxPQUFPSyxXQUFXLEdBQUc7UUFDckNMLE9BQU9LLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFNBQVVDLGlCQUFpQjtZQUNsRCxJQUFJQSxrQkFBa0JOLE1BQU0sRUFBRTtnQkFDMUJFLGNBQWNLLElBQUksQ0FBQ0MsS0FBSyxDQUFDTixlQUFlSSxrQkFBa0JOLE1BQU07WUFDcEU7UUFDSjtJQUNKO0lBQ0EsT0FBT0U7QUFDWCxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2Vycm9ySGFuZGxpbmcuanM/N2VmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vbkVtcHR5QXJyYXkgfSBmcm9tIFwiLi9hcnJheXMuanNcIjtcbmltcG9ydCB7IGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCB9IGZyb20gXCIuL2luY3JlbWVudGFsUmVzdWx0LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHJlc3VsdCkge1xuICAgIHZhciBlcnJvcnMgPSBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpO1xuICAgIHJldHVybiBpc05vbkVtcHR5QXJyYXkoZXJyb3JzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpIHtcbiAgICB2YXIgZ3JhcGhRTEVycm9ycyA9IGlzTm9uRW1wdHlBcnJheShyZXN1bHQuZXJyb3JzKSA/IHJlc3VsdC5lcnJvcnMuc2xpY2UoMCkgOiBbXTtcbiAgICBpZiAoaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHJlc3VsdCkgJiZcbiAgICAgICAgaXNOb25FbXB0eUFycmF5KHJlc3VsdC5pbmNyZW1lbnRhbCkpIHtcbiAgICAgICAgcmVzdWx0LmluY3JlbWVudGFsLmZvckVhY2goZnVuY3Rpb24gKGluY3JlbWVudGFsUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50YWxSZXN1bHQuZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgZ3JhcGhRTEVycm9ycy5wdXNoLmFwcGx5KGdyYXBoUUxFcnJvcnMsIGluY3JlbWVudGFsUmVzdWx0LmVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZ3JhcGhRTEVycm9ycztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ySGFuZGxpbmcuanMubWFwIl0sIm5hbWVzIjpbImlzTm9uRW1wdHlBcnJheSIsImlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCIsImdyYXBoUUxSZXN1bHRIYXNFcnJvciIsInJlc3VsdCIsImVycm9ycyIsImdldEdyYXBoUUxFcnJvcnNGcm9tUmVzdWx0IiwiZ3JhcGhRTEVycm9ycyIsInNsaWNlIiwiaW5jcmVtZW50YWwiLCJmb3JFYWNoIiwiaW5jcmVtZW50YWxSZXN1bHQiLCJwdXNoIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/incrementalResult.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isApolloPayloadResult: () => (/* binding */ isApolloPayloadResult),\n/* harmony export */   isExecutionPatchIncrementalResult: () => (/* binding */ isExecutionPatchIncrementalResult),\n/* harmony export */   isExecutionPatchInitialResult: () => (/* binding */ isExecutionPatchInitialResult),\n/* harmony export */   isExecutionPatchResult: () => (/* binding */ isExecutionPatchResult),\n/* harmony export */   mergeIncrementalData: () => (/* binding */ mergeIncrementalData)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergeDeep.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n\n\n\nfunction isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nfunction isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nfunction isExecutionPatchResult(value) {\n    return isExecutionPatchIncrementalResult(value) || isExecutionPatchInitialResult(value);\n}\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nfunction isApolloPayloadResult(value) {\n    return (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value) && \"payload\" in value;\n}\nfunction mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new _mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__.DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) && (0,_arrays_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(result.incremental)) {\n        result.incremental.forEach(function(_a) {\n            var data = _a.data, path = _a.path;\n            for(var i = path.length - 1; i >= 0; --i){\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n} //# sourceMappingURL=incrementalResult.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9pbmNyZW1lbnRhbFJlc3VsdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErQztBQUNEO0FBQ0Y7QUFDckMsU0FBU0csa0NBQWtDQyxLQUFLO0lBQ25ELE9BQU8saUJBQWlCQTtBQUM1QjtBQUNPLFNBQVNDLDhCQUE4QkQsS0FBSztJQUMvQyxPQUFPLGFBQWFBLFNBQVMsVUFBVUE7QUFDM0M7QUFDTyxTQUFTRSx1QkFBdUJGLEtBQUs7SUFDeEMsT0FBUUQsa0NBQWtDQyxVQUN0Q0MsOEJBQThCRDtBQUN0QztBQUNBLDBFQUEwRTtBQUMxRSwyRUFBMkU7QUFDM0UsaUNBQWlDO0FBQzFCLFNBQVNHLHNCQUFzQkgsS0FBSztJQUN2QyxPQUFPSiw0REFBZUEsQ0FBQ0ksVUFBVSxhQUFhQTtBQUNsRDtBQUNPLFNBQVNJLHFCQUFxQkMsVUFBVSxFQUFFQyxNQUFNO0lBQ25ELElBQUlDLGFBQWFGO0lBQ2pCLElBQUlHLFNBQVMsSUFBSVYscURBQVVBO0lBQzNCLElBQUlDLGtDQUFrQ08sV0FDbENULDJEQUFlQSxDQUFDUyxPQUFPRyxXQUFXLEdBQUc7UUFDckNILE9BQU9HLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFNBQVVDLEVBQUU7WUFDbkMsSUFBSUMsT0FBT0QsR0FBR0MsSUFBSSxFQUFFQyxPQUFPRixHQUFHRSxJQUFJO1lBQ2xDLElBQUssSUFBSUMsSUFBSUQsS0FBS0UsTUFBTSxHQUFHLEdBQUdELEtBQUssR0FBRyxFQUFFQSxFQUFHO2dCQUN2QyxJQUFJRSxNQUFNSCxJQUFJLENBQUNDLEVBQUU7Z0JBQ2pCLElBQUlHLGVBQWUsQ0FBQ0MsTUFBTSxDQUFDRjtnQkFDM0IsSUFBSUcsV0FBV0YsZUFBZSxFQUFFLEdBQUcsQ0FBQztnQkFDcENFLFFBQVEsQ0FBQ0gsSUFBSSxHQUFHSjtnQkFDaEJBLE9BQU9PO1lBQ1g7WUFDQVosYUFBYUMsT0FBT1ksS0FBSyxDQUFDYixZQUFZSztRQUMxQztJQUNKO0lBQ0EsT0FBT0w7QUFDWCxFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2luY3JlbWVudGFsUmVzdWx0LmpzPzJiODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0cy5qc1wiO1xuaW1wb3J0IHsgaXNOb25FbXB0eUFycmF5IH0gZnJvbSBcIi4vYXJyYXlzLmpzXCI7XG5pbXBvcnQgeyBEZWVwTWVyZ2VyIH0gZnJvbSBcIi4vbWVyZ2VEZWVwLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiaW5jcmVtZW50YWxcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0V4ZWN1dGlvblBhdGNoSW5pdGlhbFJlc3VsdCh2YWx1ZSkge1xuICAgIHJldHVybiBcImhhc05leHRcIiBpbiB2YWx1ZSAmJiBcImRhdGFcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0V4ZWN1dGlvblBhdGNoUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIChpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQodmFsdWUpIHx8XG4gICAgICAgIGlzRXhlY3V0aW9uUGF0Y2hJbml0aWFsUmVzdWx0KHZhbHVlKSk7XG59XG4vLyBUaGlzIGZ1bmN0aW9uIGRldGVjdHMgYW4gQXBvbGxvIHBheWxvYWQgcmVzdWx0IGJlZm9yZSBpdCBpcyB0cmFuc2Zvcm1lZFxuLy8gaW50byBhIEZldGNoUmVzdWx0IHZpYSBIdHRwTGluazsgaXQgY2Fubm90IGRldGVjdCBhbiBBcG9sbG9QYXlsb2FkUmVzdWx0XG4vLyBvbmNlIGl0IGxlYXZlcyB0aGUgbGluayBjaGFpbi5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fwb2xsb1BheWxvYWRSZXN1bHQodmFsdWUpIHtcbiAgICByZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSAmJiBcInBheWxvYWRcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUluY3JlbWVudGFsRGF0YShwcmV2UmVzdWx0LCByZXN1bHQpIHtcbiAgICB2YXIgbWVyZ2VkRGF0YSA9IHByZXZSZXN1bHQ7XG4gICAgdmFyIG1lcmdlciA9IG5ldyBEZWVwTWVyZ2VyKCk7XG4gICAgaWYgKGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdChyZXN1bHQpICYmXG4gICAgICAgIGlzTm9uRW1wdHlBcnJheShyZXN1bHQuaW5jcmVtZW50YWwpKSB7XG4gICAgICAgIHJlc3VsdC5pbmNyZW1lbnRhbC5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBfYS5kYXRhLCBwYXRoID0gX2EucGF0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhdGhbaV07XG4gICAgICAgICAgICAgICAgdmFyIGlzTnVtZXJpY0tleSA9ICFpc05hTigra2V5KTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBpc051bWVyaWNLZXkgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICAgIHBhcmVudF8xW2tleV0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGRhdGEgPSBwYXJlbnRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lcmdlZERhdGEgPSBtZXJnZXIubWVyZ2UobWVyZ2VkRGF0YSwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkRGF0YTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluY3JlbWVudGFsUmVzdWx0LmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vbk51bGxPYmplY3QiLCJpc05vbkVtcHR5QXJyYXkiLCJEZWVwTWVyZ2VyIiwiaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0IiwidmFsdWUiLCJpc0V4ZWN1dGlvblBhdGNoSW5pdGlhbFJlc3VsdCIsImlzRXhlY3V0aW9uUGF0Y2hSZXN1bHQiLCJpc0Fwb2xsb1BheWxvYWRSZXN1bHQiLCJtZXJnZUluY3JlbWVudGFsRGF0YSIsInByZXZSZXN1bHQiLCJyZXN1bHQiLCJtZXJnZWREYXRhIiwibWVyZ2VyIiwiaW5jcmVtZW50YWwiLCJmb3JFYWNoIiwiX2EiLCJkYXRhIiwicGF0aCIsImkiLCJsZW5ndGgiLCJrZXkiLCJpc051bWVyaWNLZXkiLCJpc05hTiIsInBhcmVudF8xIiwibWVyZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/makeUniqueId.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeUniqueId: () => (/* binding */ makeUniqueId)\n/* harmony export */ });\nvar prefixCounts = new Map();\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nfunction makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n} //# sourceMappingURL=makeUniqueId.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYWtlVW5pcXVlSWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGVBQWUsSUFBSUM7QUFDdkIsMEVBQTBFO0FBQzFFLCtFQUErRTtBQUN4RSxTQUFTQyxhQUFhQyxNQUFNO0lBQy9CLElBQUlDLFFBQVFKLGFBQWFLLEdBQUcsQ0FBQ0YsV0FBVztJQUN4Q0gsYUFBYU0sR0FBRyxDQUFDSCxRQUFRQyxRQUFRO0lBQ2pDLE9BQU8sR0FBR0csTUFBTSxDQUFDSixRQUFRLEtBQUtJLE1BQU0sQ0FBQ0gsT0FBTyxLQUFLRyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQztBQUM3RixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21ha2VVbmlxdWVJZC5qcz8yOWFhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwcmVmaXhDb3VudHMgPSBuZXcgTWFwKCk7XG4vLyBUaGVzZSBJRHMgd29uJ3QgYmUgZ2xvYmFsbHkgdW5pcXVlLCBidXQgdGhleSB3aWxsIGJlIHVuaXF1ZSB3aXRoaW4gdGhpc1xuLy8gcHJvY2VzcywgdGhhbmtzIHRvIHRoZSBjb3VudGVyLCBhbmQgdW5ndWVzc2FibGUgdGhhbmtzIHRvIHRoZSByYW5kb20gc3VmZml4LlxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VVbmlxdWVJZChwcmVmaXgpIHtcbiAgICB2YXIgY291bnQgPSBwcmVmaXhDb3VudHMuZ2V0KHByZWZpeCkgfHwgMTtcbiAgICBwcmVmaXhDb3VudHMuc2V0KHByZWZpeCwgY291bnQgKyAxKTtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIjpcIikuY29uY2F0KGNvdW50LCBcIjpcIikuY29uY2F0KE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ha2VVbmlxdWVJZC5qcy5tYXAiXSwibmFtZXMiOlsicHJlZml4Q291bnRzIiwiTWFwIiwibWFrZVVuaXF1ZUlkIiwicHJlZml4IiwiY291bnQiLCJnZXQiLCJzZXQiLCJjb25jYXQiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeDeepFreeze: () => (/* binding */ maybeDeepFreeze)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\nfunction deepFreeze(value) {\n    var workSet = new Set([\n        value\n    ]);\n    workSet.forEach(function(obj) {\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj) && shallowFreeze(obj) === obj) {\n            Object.getOwnPropertyNames(obj).forEach(function(name) {\n                if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj[name])) workSet.add(obj[name]);\n            });\n        }\n    });\n    return value;\n}\nfunction shallowFreeze(obj) {\n    if (globalThis.__DEV__ !== false && !Object.isFrozen(obj)) {\n        try {\n            Object.freeze(obj);\n        } catch (e) {\n            // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n            // they all throw a TypeError when you try, so we re-throw any exceptions\n            // that are not TypeErrors, since that would be unexpected.\n            if (e instanceof TypeError) return null;\n            throw e;\n        }\n    }\n    return obj;\n}\nfunction maybeDeepFreeze(obj) {\n    if (globalThis.__DEV__ !== false) {\n        deepFreeze(obj);\n    }\n    return obj;\n} //# sourceMappingURL=maybeDeepFreeze.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYXliZURlZXBGcmVlemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7QUFDL0MsU0FBU0MsV0FBV0MsS0FBSztJQUNyQixJQUFJQyxVQUFVLElBQUlDLElBQUk7UUFBQ0Y7S0FBTTtJQUM3QkMsUUFBUUUsT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFDekIsSUFBSU4sNERBQWVBLENBQUNNLFFBQVFDLGNBQWNELFNBQVNBLEtBQUs7WUFDcERFLE9BQU9DLG1CQUFtQixDQUFDSCxLQUFLRCxPQUFPLENBQUMsU0FBVUssSUFBSTtnQkFDbEQsSUFBSVYsNERBQWVBLENBQUNNLEdBQUcsQ0FBQ0ksS0FBSyxHQUN6QlAsUUFBUVEsR0FBRyxDQUFDTCxHQUFHLENBQUNJLEtBQUs7WUFDN0I7UUFDSjtJQUNKO0lBQ0EsT0FBT1I7QUFDWDtBQUNBLFNBQVNLLGNBQWNELEdBQUc7SUFDdEIsSUFBSU0sV0FBV0MsT0FBTyxLQUFLLFNBQVMsQ0FBQ0wsT0FBT00sUUFBUSxDQUFDUixNQUFNO1FBQ3ZELElBQUk7WUFDQUUsT0FBT08sTUFBTSxDQUFDVDtRQUNsQixFQUNBLE9BQU9VLEdBQUc7WUFDTix3RUFBd0U7WUFDeEUseUVBQXlFO1lBQ3pFLDJEQUEyRDtZQUMzRCxJQUFJQSxhQUFhQyxXQUNiLE9BQU87WUFDWCxNQUFNRDtRQUNWO0lBQ0o7SUFDQSxPQUFPVjtBQUNYO0FBQ08sU0FBU1ksZ0JBQWdCWixHQUFHO0lBQy9CLElBQUlNLFdBQVdDLE9BQU8sS0FBSyxPQUFPO1FBQzlCWixXQUFXSztJQUNmO0lBQ0EsT0FBT0E7QUFDWCxFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21heWJlRGVlcEZyZWV6ZS5qcz80NWQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9uTnVsbE9iamVjdCB9IGZyb20gXCIuL29iamVjdHMuanNcIjtcbmZ1bmN0aW9uIGRlZXBGcmVlemUodmFsdWUpIHtcbiAgICB2YXIgd29ya1NldCA9IG5ldyBTZXQoW3ZhbHVlXSk7XG4gICAgd29ya1NldC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgaWYgKGlzTm9uTnVsbE9iamVjdChvYmopICYmIHNoYWxsb3dGcmVlemUob2JqKSA9PT0gb2JqKSB7XG4gICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOb25OdWxsT2JqZWN0KG9ialtuYW1lXSkpXG4gICAgICAgICAgICAgICAgICAgIHdvcmtTZXQuYWRkKG9ialtuYW1lXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNoYWxsb3dGcmVlemUob2JqKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgIU9iamVjdC5pc0Zyb3plbihvYmopKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBPYmplY3QuZnJlZXplKG9iaik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIFNvbWUgdHlwZXMgbGlrZSBVaW50OEFycmF5IGFuZCBOb2RlLmpzJ3MgQnVmZmVyIGNhbm5vdCBiZSBmcm96ZW4sIGJ1dFxuICAgICAgICAgICAgLy8gdGhleSBhbGwgdGhyb3cgYSBUeXBlRXJyb3Igd2hlbiB5b3UgdHJ5LCBzbyB3ZSByZS10aHJvdyBhbnkgZXhjZXB0aW9uc1xuICAgICAgICAgICAgLy8gdGhhdCBhcmUgbm90IFR5cGVFcnJvcnMsIHNpbmNlIHRoYXQgd291bGQgYmUgdW5leHBlY3RlZC5cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVHlwZUVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlRGVlcEZyZWV6ZShvYmopIHtcbiAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgICAgICBkZWVwRnJlZXplKG9iaik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXliZURlZXBGcmVlemUuanMubWFwIl0sIm5hbWVzIjpbImlzTm9uTnVsbE9iamVjdCIsImRlZXBGcmVlemUiLCJ2YWx1ZSIsIndvcmtTZXQiLCJTZXQiLCJmb3JFYWNoIiwib2JqIiwic2hhbGxvd0ZyZWV6ZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJuYW1lIiwiYWRkIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJpc0Zyb3plbiIsImZyZWV6ZSIsImUiLCJUeXBlRXJyb3IiLCJtYXliZURlZXBGcmVlemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/mergeDeep.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeepMerger: () => (/* binding */ DeepMerger),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   mergeDeepArray: () => (/* binding */ mergeDeepArray)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for(var i = 1; i < count; ++i){\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nvar defaultReconciler = function(target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = /** @class */ function() {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) {\n            reconciler = defaultReconciler;\n        }\n        this.reconciler = reconciler;\n        this.isObject = _objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function(target, source) {\n        var _this = this;\n        var context = [];\n        for(var _i = 2; _i < arguments.length; _i++){\n            context[_i - 2] = arguments[_i];\n        }\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(source) && (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(target)) {\n            Object.keys(source).forEach(function(sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n                            target,\n                            source,\n                            sourceKey\n                        ], context, false));\n                        // A well-implemented reconciler may return targetValue to indicate\n                        // the merge changed nothing about the structure of the target.\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                } else {\n                    // If there is no collision, the target can safely share memory with\n                    // the source, and the recursion can terminate here.\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        // If source (or target) is not an object, let source replace target.\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function(value) {\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                } else {\n                    value = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                        __proto__: Object.getPrototypeOf(value)\n                    }, value);\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    };\n    return DeepMerger;\n}();\n //# sourceMappingURL=mergeDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/mergeOptions.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeOptions: () => (/* binding */ mergeOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _compact_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compact.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n\n\nfunction mergeOptions(defaults, options) {\n    return (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)(defaults, options, options.variables && {\n        variables: (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, defaults && defaults.variables), options.variables))\n    });\n} //# sourceMappingURL=mergeOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tZXJnZU9wdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ007QUFDaEMsU0FBU0UsYUFBYUMsUUFBUSxFQUFFQyxPQUFPO0lBQzFDLE9BQU9ILG9EQUFPQSxDQUFDRSxVQUFVQyxTQUFTQSxRQUFRQyxTQUFTLElBQUk7UUFDbkRBLFdBQVdKLG9EQUFPQSxDQUFDRCwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFJRyxZQUFZQSxTQUFTRSxTQUFTLEdBQUlELFFBQVFDLFNBQVM7SUFDakc7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21lcmdlT3B0aW9ucy5qcz8wMmJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjb21wYWN0IH0gZnJvbSBcIi4vY29tcGFjdC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhkZWZhdWx0cywgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21wYWN0KGRlZmF1bHRzLCBvcHRpb25zLCBvcHRpb25zLnZhcmlhYmxlcyAmJiB7XG4gICAgICAgIHZhcmlhYmxlczogY29tcGFjdChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKGRlZmF1bHRzICYmIGRlZmF1bHRzLnZhcmlhYmxlcykpLCBvcHRpb25zLnZhcmlhYmxlcykpLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VPcHRpb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImNvbXBhY3QiLCJtZXJnZU9wdGlvbnMiLCJkZWZhdWx0cyIsIm9wdGlvbnMiLCJ2YXJpYWJsZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/objects.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/objects.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNonNullObject: () => (/* binding */ isNonNullObject),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)\n/* harmony export */ });\nfunction isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\nfunction isPlainObject(obj) {\n    return obj !== null && typeof obj === \"object\" && (Object.getPrototypeOf(obj) === Object.prototype || Object.getPrototypeOf(obj) === null);\n} //# sourceMappingURL=objects.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9vYmplY3RzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0EsZ0JBQWdCQyxHQUFHO0lBQy9CLE9BQU9BLFFBQVEsUUFBUSxPQUFPQSxRQUFRO0FBQzFDO0FBQ08sU0FBU0MsY0FBY0QsR0FBRztJQUM3QixPQUFRQSxRQUFRLFFBQ1osT0FBT0EsUUFBUSxZQUNkRSxDQUFBQSxPQUFPQyxjQUFjLENBQUNILFNBQVNFLE9BQU9FLFNBQVMsSUFDNUNGLE9BQU9DLGNBQWMsQ0FBQ0gsU0FBUyxJQUFHO0FBQzlDLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vb2JqZWN0cy5qcz8yMTU4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc05vbk51bGxPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGUgfHxcbiAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBudWxsKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYmplY3RzLmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vbk51bGxPYmplY3QiLCJvYmoiLCJpc1BsYWluT2JqZWN0IiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/omitDeep.js":
/*!******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/omitDeep.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   omitDeep: () => (/* binding */ omitDeep)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\nfunction omitDeep(value, key) {\n    return __omitDeep(value, key);\n}\nfunction __omitDeep(value, key, known) {\n    if (known === void 0) {\n        known = new Map();\n    }\n    if (known.has(value)) {\n        return known.get(value);\n    }\n    var modified = false;\n    if (Array.isArray(value)) {\n        var array_1 = [];\n        known.set(value, array_1);\n        value.forEach(function(value, index) {\n            var result = __omitDeep(value, key, known);\n            modified || (modified = result !== value);\n            array_1[index] = result;\n        });\n        if (modified) {\n            return array_1;\n        }\n    } else if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value)) {\n        var obj_1 = Object.create(Object.getPrototypeOf(value));\n        known.set(value, obj_1);\n        Object.keys(value).forEach(function(k) {\n            if (k === key) {\n                modified = true;\n                return;\n            }\n            var result = __omitDeep(value[k], key, known);\n            modified || (modified = result !== value[k]);\n            obj_1[k] = result;\n        });\n        if (modified) {\n            return obj_1;\n        }\n    }\n    return value;\n} //# sourceMappingURL=omitDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9vbWl0RGVlcC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2QztBQUN0QyxTQUFTQyxTQUFTQyxLQUFLLEVBQUVDLEdBQUc7SUFDL0IsT0FBT0MsV0FBV0YsT0FBT0M7QUFDN0I7QUFDQSxTQUFTQyxXQUFXRixLQUFLLEVBQUVDLEdBQUcsRUFBRUUsS0FBSztJQUNqQyxJQUFJQSxVQUFVLEtBQUssR0FBRztRQUFFQSxRQUFRLElBQUlDO0lBQU87SUFDM0MsSUFBSUQsTUFBTUUsR0FBRyxDQUFDTCxRQUFRO1FBQ2xCLE9BQU9HLE1BQU1HLEdBQUcsQ0FBQ047SUFDckI7SUFDQSxJQUFJTyxXQUFXO0lBQ2YsSUFBSUMsTUFBTUMsT0FBTyxDQUFDVCxRQUFRO1FBQ3RCLElBQUlVLFVBQVUsRUFBRTtRQUNoQlAsTUFBTVEsR0FBRyxDQUFDWCxPQUFPVTtRQUNqQlYsTUFBTVksT0FBTyxDQUFDLFNBQVVaLEtBQUssRUFBRWEsS0FBSztZQUNoQyxJQUFJQyxTQUFTWixXQUFXRixPQUFPQyxLQUFLRTtZQUNwQ0ksWUFBYUEsQ0FBQUEsV0FBV08sV0FBV2QsS0FBSTtZQUN2Q1UsT0FBTyxDQUFDRyxNQUFNLEdBQUdDO1FBQ3JCO1FBQ0EsSUFBSVAsVUFBVTtZQUNWLE9BQU9HO1FBQ1g7SUFDSixPQUNLLElBQUlaLDBEQUFhQSxDQUFDRSxRQUFRO1FBQzNCLElBQUllLFFBQVFDLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0UsY0FBYyxDQUFDbEI7UUFDaERHLE1BQU1RLEdBQUcsQ0FBQ1gsT0FBT2U7UUFDakJDLE9BQU9HLElBQUksQ0FBQ25CLE9BQU9ZLE9BQU8sQ0FBQyxTQUFVUSxDQUFDO1lBQ2xDLElBQUlBLE1BQU1uQixLQUFLO2dCQUNYTSxXQUFXO2dCQUNYO1lBQ0o7WUFDQSxJQUFJTyxTQUFTWixXQUFXRixLQUFLLENBQUNvQixFQUFFLEVBQUVuQixLQUFLRTtZQUN2Q0ksWUFBYUEsQ0FBQUEsV0FBV08sV0FBV2QsS0FBSyxDQUFDb0IsRUFBRTtZQUMzQ0wsS0FBSyxDQUFDSyxFQUFFLEdBQUdOO1FBQ2Y7UUFDQSxJQUFJUCxVQUFVO1lBQ1YsT0FBT1E7UUFDWDtJQUNKO0lBQ0EsT0FBT2Y7QUFDWCxFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL29taXREZWVwLmpzP2FlMWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGFpbk9iamVjdCB9IGZyb20gXCIuL29iamVjdHMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBvbWl0RGVlcCh2YWx1ZSwga2V5KSB7XG4gICAgcmV0dXJuIF9fb21pdERlZXAodmFsdWUsIGtleSk7XG59XG5mdW5jdGlvbiBfX29taXREZWVwKHZhbHVlLCBrZXksIGtub3duKSB7XG4gICAgaWYgKGtub3duID09PSB2b2lkIDApIHsga25vd24gPSBuZXcgTWFwKCk7IH1cbiAgICBpZiAoa25vd24uaGFzKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4ga25vd24uZ2V0KHZhbHVlKTtcbiAgICB9XG4gICAgdmFyIG1vZGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhciBhcnJheV8xID0gW107XG4gICAgICAgIGtub3duLnNldCh2YWx1ZSwgYXJyYXlfMSk7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IF9fb21pdERlZXAodmFsdWUsIGtleSwga25vd24pO1xuICAgICAgICAgICAgbW9kaWZpZWQgfHwgKG1vZGlmaWVkID0gcmVzdWx0ICE9PSB2YWx1ZSk7XG4gICAgICAgICAgICBhcnJheV8xW2luZGV4XSA9IHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChtb2RpZmllZCkge1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5XzE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG9ial8xID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpKTtcbiAgICAgICAga25vd24uc2V0KHZhbHVlLCBvYmpfMSk7XG4gICAgICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgICBpZiAoayA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBfX29taXREZWVwKHZhbHVlW2tdLCBrZXksIGtub3duKTtcbiAgICAgICAgICAgIG1vZGlmaWVkIHx8IChtb2RpZmllZCA9IHJlc3VsdCAhPT0gdmFsdWVba10pO1xuICAgICAgICAgICAgb2JqXzFba10gPSByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobW9kaWZpZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmpfMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbWl0RGVlcC5qcy5tYXAiXSwibmFtZXMiOlsiaXNQbGFpbk9iamVjdCIsIm9taXREZWVwIiwidmFsdWUiLCJrZXkiLCJfX29taXREZWVwIiwia25vd24iLCJNYXAiLCJoYXMiLCJnZXQiLCJtb2RpZmllZCIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5XzEiLCJzZXQiLCJmb3JFYWNoIiwiaW5kZXgiLCJyZXN1bHQiLCJvYmpfMSIsIk9iamVjdCIsImNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwia2V5cyIsImsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/omitDeep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringifyForDisplay: () => (/* binding */ stringifyForDisplay)\n/* harmony export */ });\n/* harmony import */ var _makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./makeUniqueId.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n\nfunction stringifyForDisplay(value, space) {\n    if (space === void 0) {\n        space = 0;\n    }\n    var undefId = (0,_makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__.makeUniqueId)(\"stringifyForDisplay\");\n    return JSON.stringify(value, function(key, value) {\n        return value === void 0 ? undefId : value;\n    }, space).split(JSON.stringify(undefId)).join(\"<undefined>\");\n} //# sourceMappingURL=stringifyForDisplay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9zdHJpbmdpZnlGb3JEaXNwbGF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQzFDLFNBQVNDLG9CQUFvQkMsS0FBSyxFQUFFQyxLQUFLO0lBQzVDLElBQUlBLFVBQVUsS0FBSyxHQUFHO1FBQUVBLFFBQVE7SUFBRztJQUNuQyxJQUFJQyxVQUFVSiw4REFBWUEsQ0FBQztJQUMzQixPQUFPSyxLQUFLQyxTQUFTLENBQUNKLE9BQU8sU0FBVUssR0FBRyxFQUFFTCxLQUFLO1FBQzdDLE9BQU9BLFVBQVUsS0FBSyxJQUFJRSxVQUFVRjtJQUN4QyxHQUFHQyxPQUNFSyxLQUFLLENBQUNILEtBQUtDLFNBQVMsQ0FBQ0YsVUFDckJLLElBQUksQ0FBQztBQUNkLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vc3RyaW5naWZ5Rm9yRGlzcGxheS5qcz8yMmM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VVbmlxdWVJZCB9IGZyb20gXCIuL21ha2VVbmlxdWVJZC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeUZvckRpc3BsYXkodmFsdWUsIHNwYWNlKSB7XG4gICAgaWYgKHNwYWNlID09PSB2b2lkIDApIHsgc3BhY2UgPSAwOyB9XG4gICAgdmFyIHVuZGVmSWQgPSBtYWtlVW5pcXVlSWQoXCJzdHJpbmdpZnlGb3JEaXNwbGF5XCIpO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB2b2lkIDAgPyB1bmRlZklkIDogdmFsdWU7XG4gICAgfSwgc3BhY2UpXG4gICAgICAgIC5zcGxpdChKU09OLnN0cmluZ2lmeSh1bmRlZklkKSlcbiAgICAgICAgLmpvaW4oXCI8dW5kZWZpbmVkPlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZ2lmeUZvckRpc3BsYXkuanMubWFwIl0sIm5hbWVzIjpbIm1ha2VVbmlxdWVJZCIsInN0cmluZ2lmeUZvckRpc3BsYXkiLCJ2YWx1ZSIsInNwYWNlIiwidW5kZWZJZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXkiLCJzcGxpdCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/stripTypename.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/stripTypename.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stripTypename: () => (/* binding */ stripTypename)\n/* harmony export */ });\n/* harmony import */ var _omitDeep_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./omitDeep.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/omitDeep.js\");\n\nfunction stripTypename(value) {\n    return (0,_omitDeep_js__WEBPACK_IMPORTED_MODULE_0__.omitDeep)(value, \"__typename\");\n} //# sourceMappingURL=stripTypename.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9zdHJpcFR5cGVuYW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ2xDLFNBQVNDLGNBQWNDLEtBQUs7SUFDL0IsT0FBT0Ysc0RBQVFBLENBQUNFLE9BQU87QUFDM0IsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9zdHJpcFR5cGVuYW1lLmpzPzdiZGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb21pdERlZXAgfSBmcm9tIFwiLi9vbWl0RGVlcC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwVHlwZW5hbWUodmFsdWUpIHtcbiAgICByZXR1cm4gb21pdERlZXAodmFsdWUsIFwiX190eXBlbmFtZVwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmlwVHlwZW5hbWUuanMubWFwIl0sIm5hbWVzIjpbIm9taXREZWVwIiwic3RyaXBUeXBlbmFtZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/stripTypename.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/global.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/global.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maybe.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return globalThis;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return window;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return self;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return global;\n}) || // We don't expect the Function constructor ever to be invoked at runtime, as\n// long as at least one of globalThis, window, self, or global is defined, so\n// we are under no obligation to make it easy for static analysis tools to\n// detect syntactic usage of the Function constructor. If you think you can\n// improve your static analysis to detect this obfuscation, think again. This\n// is an arms race you cannot win, at least not in JavaScript.\n(0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return _maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe.constructor(\"return this\")();\n})); //# sourceMappingURL=global.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DO0FBQ25DLGlFQUFnQkEsZ0RBQUtBLENBQUM7SUFBYyxPQUFPQztBQUFZLE1BQ25ERCxnREFBS0EsQ0FBQztJQUFjLE9BQU9FO0FBQVEsTUFDbkNGLGdEQUFLQSxDQUFDO0lBQWMsT0FBT0c7QUFBTSxNQUNqQ0gsZ0RBQUtBLENBQUM7SUFBYyxPQUFPSTtBQUFRLE1BQU0sNkVBQTZFO0FBQzFILDZFQUE2RTtBQUM3RSwwRUFBMEU7QUFDMUUsMkVBQTJFO0FBQzNFLDZFQUE2RTtBQUM3RSw4REFBOEQ7QUFDOURKLGdEQUFLQSxDQUFDO0lBQ0YsT0FBT0EsNENBQUtBLENBQUNLLFdBQVcsQ0FBQztBQUM3QixFQUFFLEVBQUUsQ0FDSixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFsLmpzPzg0ODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF5YmUgfSBmcm9tIFwiLi9tYXliZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgKG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdsb2JhbFRoaXM7IH0pIHx8XG4gICAgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93OyB9KSB8fFxuICAgIG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGY7IH0pIHx8XG4gICAgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2xvYmFsOyB9KSB8fCAvLyBXZSBkb24ndCBleHBlY3QgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIGV2ZXIgdG8gYmUgaW52b2tlZCBhdCBydW50aW1lLCBhc1xuLy8gbG9uZyBhcyBhdCBsZWFzdCBvbmUgb2YgZ2xvYmFsVGhpcywgd2luZG93LCBzZWxmLCBvciBnbG9iYWwgaXMgZGVmaW5lZCwgc29cbi8vIHdlIGFyZSB1bmRlciBubyBvYmxpZ2F0aW9uIHRvIG1ha2UgaXQgZWFzeSBmb3Igc3RhdGljIGFuYWx5c2lzIHRvb2xzIHRvXG4vLyBkZXRlY3Qgc3ludGFjdGljIHVzYWdlIG9mIHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3Rvci4gSWYgeW91IHRoaW5rIHlvdSBjYW5cbi8vIGltcHJvdmUgeW91ciBzdGF0aWMgYW5hbHlzaXMgdG8gZGV0ZWN0IHRoaXMgb2JmdXNjYXRpb24sIHRoaW5rIGFnYWluLiBUaGlzXG4vLyBpcyBhbiBhcm1zIHJhY2UgeW91IGNhbm5vdCB3aW4sIGF0IGxlYXN0IG5vdCBpbiBKYXZhU2NyaXB0LlxubWF5YmUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYXliZS5jb25zdHJ1Y3RvcihcInJldHVybiB0aGlzXCIpKCk7XG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWwuanMubWFwIl0sIm5hbWVzIjpbIm1heWJlIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEV: () => (/* binding */ DEV),\n/* harmony export */   InvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   __DEV__: () => (/* binding */ DEV),\n/* harmony export */   global: () => (/* reexport safe */ _global_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   invariant: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.invariant),\n/* harmony export */   maybe: () => (/* reexport safe */ _maybe_js__WEBPACK_IMPORTED_MODULE_1__.maybe),\n/* harmony export */   newInvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)\n/* harmony export */ });\n/* harmony import */ var _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invariantWrappers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\");\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maybe.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./global.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\");\n\n\n\n\n/**\n * @deprecated we do not use this internally anymore,\n * it is just exported for backwards compatibility\n */ // this file is extempt from automatic `__DEV__` replacement\n// so we have to write it out here\n// @ts-ignore\nvar DEV = globalThis.__DEV__ !== false;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF1RjtBQUNwRDtBQUNhO0FBQ1E7QUFDeEQ7OztDQUdDLEdBQ0QsNERBQTREO0FBQzVELGtDQUFrQztBQUNsQyxhQUFhO0FBQ04sSUFBSU0sTUFBTUMsV0FBV0MsT0FBTyxLQUFLLE1BQU07QUFDcEIsQ0FDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzP2QzODIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50LCBuZXdJbnZhcmlhbnRFcnJvciwgSW52YXJpYW50RXJyb3IsIH0gZnJvbSBcIi4vaW52YXJpYW50V3JhcHBlcnMuanNcIjtcbmV4cG9ydCB7IG1heWJlIH0gZnJvbSBcIi4vbWF5YmUuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZ2xvYmFsIH0gZnJvbSBcIi4vZ2xvYmFsLmpzXCI7XG5leHBvcnQgeyBpbnZhcmlhbnQsIG5ld0ludmFyaWFudEVycm9yLCBJbnZhcmlhbnRFcnJvciB9O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB3ZSBkbyBub3QgdXNlIHRoaXMgaW50ZXJuYWxseSBhbnltb3JlLFxuICogaXQgaXMganVzdCBleHBvcnRlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAqL1xuLy8gdGhpcyBmaWxlIGlzIGV4dGVtcHQgZnJvbSBhdXRvbWF0aWMgYF9fREVWX19gIHJlcGxhY2VtZW50XG4vLyBzbyB3ZSBoYXZlIHRvIHdyaXRlIGl0IG91dCBoZXJlXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgdmFyIERFViA9IGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2U7XG5leHBvcnQgeyBERVYgYXMgX19ERVZfXyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImludmFyaWFudCIsIm5ld0ludmFyaWFudEVycm9yIiwiSW52YXJpYW50RXJyb3IiLCJtYXliZSIsImRlZmF1bHQiLCJnbG9iYWwiLCJERVYiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/invariantWrappers.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloErrorMessageHandler: () => (/* binding */ ApolloErrorMessageHandler),\n/* harmony export */   InvariantError: () => (/* reexport safe */ ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   newInvariantError: () => (/* binding */ newInvariantError)\n/* harmony export */ });\n/* harmony import */ var ts_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../version.js */ \"(ssr)/./node_modules/@apollo/client/version.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\");\n/* harmony import */ var _common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/stringifyForDisplay.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n\n\n\n\nfunction wrap(fn) {\n    return function(message) {\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [\n            message\n        ].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        (0,ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.debug),\n    log: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.log),\n    warn: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.warn),\n    error: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.error)\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */ function newInvariantError(message) {\n    var optionalParams = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError(getHandledErrorMsg(message, optionalParams) || getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + _version_js__WEBPACK_IMPORTED_MODULE_2__.version);\nfunction stringify(arg) {\n    if (typeof arg == \"string\") {\n        return arg;\n    }\n    try {\n        return (0,_common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__.stringifyForDisplay)(arg, 2).slice(0, 1000);\n    } catch (_a) {\n        return \"<non-serializable>\";\n    }\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) {\n        messageArgs = [];\n    }\n    if (!message) return;\n    return _global_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][ApolloErrorMessageHandler] && _global_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][ApolloErrorMessageHandler](message, messageArgs.map(stringify));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) {\n        messageArgs = [];\n    }\n    if (!message) return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: _version_js__WEBPACK_IMPORTED_MODULE_2__.version,\n        message: message,\n        args: messageArgs.map(stringify)\n    })));\n}\n //# sourceMappingURL=invariantWrappers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW52YXJpYW50V3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBOEU7QUFDbkM7QUFDVjtBQUNzQztBQUN2RSxTQUFTTSxLQUFLQyxFQUFFO0lBQ1osT0FBTyxTQUFVQyxPQUFPO1FBQ3BCLElBQUlDLE9BQU8sRUFBRTtRQUNiLElBQUssSUFBSUMsS0FBSyxHQUFHQSxLQUFLQyxVQUFVQyxNQUFNLEVBQUVGLEtBQU07WUFDMUNELElBQUksQ0FBQ0MsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztRQUNoQztRQUNBLElBQUksT0FBT0YsWUFBWSxVQUFVO1lBQzdCLElBQUlLLE9BQU9MO1lBQ1hBLFVBQVVNLG1CQUFtQkQ7WUFDN0IsSUFBSSxDQUFDTCxTQUFTO2dCQUNWQSxVQUFVTyxvQkFBb0JGLE1BQU1KO2dCQUNwQ0EsT0FBTyxFQUFFO1lBQ2I7UUFDSjtRQUNBRixHQUFHUyxLQUFLLENBQUMsS0FBSyxHQUFHO1lBQUNSO1NBQVEsQ0FBQ1MsTUFBTSxDQUFDUjtJQUN0QztBQUNKO0FBQ0EsSUFBSVQsWUFBWWtCLE9BQU9DLE1BQU0sQ0FBQyxTQUFTbkIsVUFBVW9CLFNBQVMsRUFBRVosT0FBTztJQUMvRCxJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxJQUFJLENBQUNDLEtBQUssRUFBRSxHQUFHQyxTQUFTLENBQUNELEdBQUc7SUFDaEM7SUFDQSxJQUFJLENBQUNVLFdBQVc7UUFDWm5CLHVEQUFpQkEsQ0FBQ21CLFdBQVdOLG1CQUFtQk4sU0FBU0MsU0FBU00sb0JBQW9CUCxTQUFTQztJQUNuRztBQUNKLEdBQUc7SUFDQ1ksT0FBT2YsS0FBS0wsbURBQWlCQSxDQUFDb0IsS0FBSztJQUNuQ0MsS0FBS2hCLEtBQUtMLG1EQUFpQkEsQ0FBQ3FCLEdBQUc7SUFDL0JDLE1BQU1qQixLQUFLTCxtREFBaUJBLENBQUNzQixJQUFJO0lBQ2pDQyxPQUFPbEIsS0FBS0wsbURBQWlCQSxDQUFDdUIsS0FBSztBQUN2QztBQUNBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNDLGtCQUFrQmpCLE9BQU87SUFDOUIsSUFBSWtCLGlCQUFpQixFQUFFO0lBQ3ZCLElBQUssSUFBSWhCLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDZ0IsY0FBYyxDQUFDaEIsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztJQUMxQztJQUNBLE9BQU8sSUFBSVIsd0RBQWNBLENBQUNZLG1CQUFtQk4sU0FBU2tCLG1CQUNsRFgsb0JBQW9CUCxTQUFTa0I7QUFDckM7QUFDQSxJQUFJQyw0QkFBNEJDLE9BQU9DLEdBQUcsQ0FBQywrQkFBK0IxQixnREFBT0E7QUFDakYsU0FBUzJCLFVBQVVDLEdBQUc7SUFDbEIsSUFBSSxPQUFPQSxPQUFPLFVBQVU7UUFDeEIsT0FBT0E7SUFDWDtJQUNBLElBQUk7UUFDQSxPQUFPMUIsbUZBQW1CQSxDQUFDMEIsS0FBSyxHQUFHQyxLQUFLLENBQUMsR0FBRztJQUNoRCxFQUNBLE9BQU9DLElBQUk7UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBLFNBQVNuQixtQkFBbUJOLE9BQU8sRUFBRTBCLFdBQVc7SUFDNUMsSUFBSUEsZ0JBQWdCLEtBQUssR0FBRztRQUFFQSxjQUFjLEVBQUU7SUFBRTtJQUNoRCxJQUFJLENBQUMxQixTQUNEO0lBQ0osT0FBUUosa0RBQU0sQ0FBQ3VCLDBCQUEwQixJQUNyQ3ZCLGtEQUFNLENBQUN1QiwwQkFBMEIsQ0FBQ25CLFNBQVMwQixZQUFZQyxHQUFHLENBQUNMO0FBQ25FO0FBQ0EsU0FBU2Ysb0JBQW9CUCxPQUFPLEVBQUUwQixXQUFXO0lBQzdDLElBQUlBLGdCQUFnQixLQUFLLEdBQUc7UUFBRUEsY0FBYyxFQUFFO0lBQUU7SUFDaEQsSUFBSSxDQUFDMUIsU0FDRDtJQUNKLE9BQU8sK0ZBQStGUyxNQUFNLENBQUNtQixtQkFBbUJDLEtBQUtQLFNBQVMsQ0FBQztRQUMzSTNCLFNBQVNBLGdEQUFPQTtRQUNoQkssU0FBU0E7UUFDVEMsTUFBTXlCLFlBQVlDLEdBQUcsQ0FBQ0w7SUFDMUI7QUFDSjtBQUNvRixDQUNwRiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW52YXJpYW50V3JhcHBlcnMuanM/YzczZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgYXMgb3JpZ2luYWxJbnZhcmlhbnQsIEludmFyaWFudEVycm9yIH0gZnJvbSBcInRzLWludmFyaWFudFwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuLi8uLi92ZXJzaW9uLmpzXCI7XG5pbXBvcnQgZ2xvYmFsIGZyb20gXCIuL2dsb2JhbC5qc1wiO1xuaW1wb3J0IHsgc3RyaW5naWZ5Rm9yRGlzcGxheSB9IGZyb20gXCIuLi9jb21tb24vc3RyaW5naWZ5Rm9yRGlzcGxheS5qc1wiO1xuZnVuY3Rpb24gd3JhcChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHZhciBhcmcwID0gbWVzc2FnZTtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBnZXRIYW5kbGVkRXJyb3JNc2coYXJnMCk7XG4gICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZ2V0RmFsbGJhY2tFcnJvck1zZyhhcmcwLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBhcmdzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBbbWVzc2FnZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xufVxudmFyIGludmFyaWFudCA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgb3JpZ2luYWxJbnZhcmlhbnQoY29uZGl0aW9uLCBnZXRIYW5kbGVkRXJyb3JNc2cobWVzc2FnZSwgYXJncykgfHwgZ2V0RmFsbGJhY2tFcnJvck1zZyhtZXNzYWdlLCBhcmdzKSk7XG4gICAgfVxufSwge1xuICAgIGRlYnVnOiB3cmFwKG9yaWdpbmFsSW52YXJpYW50LmRlYnVnKSxcbiAgICBsb2c6IHdyYXAob3JpZ2luYWxJbnZhcmlhbnQubG9nKSxcbiAgICB3YXJuOiB3cmFwKG9yaWdpbmFsSW52YXJpYW50Lndhcm4pLFxuICAgIGVycm9yOiB3cmFwKG9yaWdpbmFsSW52YXJpYW50LmVycm9yKSxcbn0pO1xuLyoqXG4gKiBSZXR1cm5zIGFuIEludmFyaWFudEVycm9yLlxuICpcbiAqIGBtZXNzYWdlYCBjYW4gb25seSBiZSBhIHN0cmluZywgYSBjb25jYXRlbmF0aW9uIG9mIHN0cmluZ3MsIG9yIGEgdGVybmFyeSBzdGF0ZW1lbnRcbiAqIHRoYXQgcmVzdWx0cyBpbiBhIHN0cmluZy4gVGhpcyB3aWxsIGJlIGVuZm9yY2VkIG9uIGJ1aWxkLCB3aGVyZSB0aGUgbWVzc2FnZSB3aWxsXG4gKiBiZSByZXBsYWNlZCB3aXRoIGEgbWVzc2FnZSBudW1iZXIuXG4gKiBTdHJpbmcgc3Vic3RpdHV0aW9ucyB3aXRoICVzIGFyZSBzdXBwb3J0ZWQgYW5kIHdpbGwgYWxzbyByZXR1cm5cbiAqIHByZXR0eS1zdHJpbmdpZmllZCBvYmplY3RzLlxuICogRXhjZXNzIGBvcHRpb25hbFBhcmFtc2Agd2lsbCBiZSBzd2FsbG93ZWQuXG4gKi9cbmZ1bmN0aW9uIG5ld0ludmFyaWFudEVycm9yKG1lc3NhZ2UpIHtcbiAgICB2YXIgb3B0aW9uYWxQYXJhbXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvcHRpb25hbFBhcmFtc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbnZhcmlhbnRFcnJvcihnZXRIYW5kbGVkRXJyb3JNc2cobWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpIHx8XG4gICAgICAgIGdldEZhbGxiYWNrRXJyb3JNc2cobWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpKTtcbn1cbnZhciBBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyID0gU3ltYm9sLmZvcihcIkFwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXJfXCIgKyB2ZXJzaW9uKTtcbmZ1bmN0aW9uIHN0cmluZ2lmeShhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBhcmc7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlGb3JEaXNwbGF5KGFyZywgMikuc2xpY2UoMCwgMTAwMCk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gXCI8bm9uLXNlcmlhbGl6YWJsZT5cIjtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRIYW5kbGVkRXJyb3JNc2cobWVzc2FnZSwgbWVzc2FnZUFyZ3MpIHtcbiAgICBpZiAobWVzc2FnZUFyZ3MgPT09IHZvaWQgMCkgeyBtZXNzYWdlQXJncyA9IFtdOyB9XG4gICAgaWYgKCFtZXNzYWdlKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIChnbG9iYWxbQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlcl0gJiZcbiAgICAgICAgZ2xvYmFsW0Fwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXJdKG1lc3NhZ2UsIG1lc3NhZ2VBcmdzLm1hcChzdHJpbmdpZnkpKSk7XG59XG5mdW5jdGlvbiBnZXRGYWxsYmFja0Vycm9yTXNnKG1lc3NhZ2UsIG1lc3NhZ2VBcmdzKSB7XG4gICAgaWYgKG1lc3NhZ2VBcmdzID09PSB2b2lkIDApIHsgbWVzc2FnZUFyZ3MgPSBbXTsgfVxuICAgIGlmICghbWVzc2FnZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHJldHVybiBcIkFuIGVycm9yIG9jY3VycmVkISBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhlIGZ1bGwgZXJyb3IgdGV4dCBhdCBodHRwczovL2dvLmFwb2xsby5kZXYvYy9lcnIjXCIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIGFyZ3M6IG1lc3NhZ2VBcmdzLm1hcChzdHJpbmdpZnkpLFxuICAgIH0pKSk7XG59XG5leHBvcnQgeyBpbnZhcmlhbnQsIEludmFyaWFudEVycm9yLCBuZXdJbnZhcmlhbnRFcnJvciwgQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlciwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludmFyaWFudFdyYXBwZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJvcmlnaW5hbEludmFyaWFudCIsIkludmFyaWFudEVycm9yIiwidmVyc2lvbiIsImdsb2JhbCIsInN0cmluZ2lmeUZvckRpc3BsYXkiLCJ3cmFwIiwiZm4iLCJtZXNzYWdlIiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJnMCIsImdldEhhbmRsZWRFcnJvck1zZyIsImdldEZhbGxiYWNrRXJyb3JNc2ciLCJhcHBseSIsImNvbmNhdCIsIk9iamVjdCIsImFzc2lnbiIsImNvbmRpdGlvbiIsImRlYnVnIiwibG9nIiwid2FybiIsImVycm9yIiwibmV3SW52YXJpYW50RXJyb3IiLCJvcHRpb25hbFBhcmFtcyIsIkFwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXIiLCJTeW1ib2wiLCJmb3IiLCJzdHJpbmdpZnkiLCJhcmciLCJzbGljZSIsIl9hIiwibWVzc2FnZUFyZ3MiLCJtYXAiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/maybe.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybe: () => (/* binding */ maybe)\n/* harmony export */ });\nfunction maybe(thunk) {\n    try {\n        return thunk();\n    } catch (_a) {}\n} //# sourceMappingURL=maybe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvbWF5YmUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLE1BQU1DLEtBQUs7SUFDdkIsSUFBSTtRQUNBLE9BQU9BO0lBQ1gsRUFDQSxPQUFPQyxJQUFJLENBQUU7QUFDakIsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvbWF5YmUuanM/MTVhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbWF5YmUodGh1bmspIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdGh1bmsoKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7IH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1heWJlLmpzLm1hcCJdLCJuYW1lcyI6WyJtYXliZSIsInRodW5rIiwiX2EiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentTransform: () => (/* binding */ DocumentTransform)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/canUse.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getFromAST.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\n\n\n\nfunction identity(document) {\n    return document;\n}\nvar DocumentTransform = /** @class */ function() {\n    function DocumentTransform(transform, options) {\n        if (options === void 0) {\n            options = Object.create(null);\n        }\n        this.resultCache = _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakSet ? new WeakSet() : new Set();\n        this.transform = transform;\n        if (options.getCacheKey) {\n            // Override default `getCacheKey` function, which returns [document].\n            this.getCacheKey = options.getCacheKey;\n        }\n        this.cached = options.cache !== false;\n        this.resetCache();\n    }\n    // This default implementation of getCacheKey can be overridden by providing\n    // options.getCacheKey to the DocumentTransform constructor. In general, a\n    // getCacheKey function may either return an array of keys (often including\n    // the document) to be used as a cache key, or undefined to indicate the\n    // transform for this document should not be cached.\n    DocumentTransform.prototype.getCacheKey = function(document) {\n        return [\n            document\n        ];\n    };\n    DocumentTransform.identity = function() {\n        // No need to cache this transform since it just returns the document\n        // unchanged. This should save a bit of memory that would otherwise be\n        // needed to populate the `documentCache` of this transform.\n        return new DocumentTransform(identity, {\n            cache: false\n        });\n    };\n    DocumentTransform.split = function(predicate, left, right) {\n        if (right === void 0) {\n            right = DocumentTransform.identity();\n        }\n        return Object.assign(new DocumentTransform(function(document) {\n            var documentTransform = predicate(document) ? left : right;\n            return documentTransform.transformDocument(document);\n        }, // Reasonably assume both `left` and `right` transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: left,\n            right: right\n        });\n    };\n    /**\n     * Resets the internal cache of this transform, if it has one.\n     */ DocumentTransform.prototype.resetCache = function() {\n        var _this = this;\n        if (this.cached) {\n            var stableCacheKeys_1 = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakMap);\n            this.performWork = (0,optimism__WEBPACK_IMPORTED_MODULE_2__.wrap)(DocumentTransform.prototype.performWork.bind(this), {\n                makeCacheKey: function(document) {\n                    var cacheKeys = _this.getCacheKey(document);\n                    if (cacheKeys) {\n                        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(Array.isArray(cacheKeys), 69);\n                        return stableCacheKeys_1.lookupArray(cacheKeys);\n                    }\n                },\n                max: _caching_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes[\"documentTransform.cache\"],\n                cache: _wry_caches__WEBPACK_IMPORTED_MODULE_5__.WeakCache\n            });\n        }\n    };\n    DocumentTransform.prototype.performWork = function(document) {\n        (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_6__.checkDocument)(document);\n        return this.transform(document);\n    };\n    DocumentTransform.prototype.transformDocument = function(document) {\n        // If a user passes an already transformed result back to this function,\n        // immediately return it.\n        if (this.resultCache.has(document)) {\n            return document;\n        }\n        var transformedDocument = this.performWork(document);\n        this.resultCache.add(transformedDocument);\n        return transformedDocument;\n    };\n    DocumentTransform.prototype.concat = function(otherTransform) {\n        var _this = this;\n        return Object.assign(new DocumentTransform(function(document) {\n            return otherTransform.transformDocument(_this.transformDocument(document));\n        }, // Reasonably assume both transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: this,\n            right: otherTransform\n        });\n    };\n    return DocumentTransform;\n}();\n //# sourceMappingURL=DocumentTransform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/directives.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDirectiveNames: () => (/* binding */ getDirectiveNames),\n/* harmony export */   getInclusionDirectives: () => (/* binding */ getInclusionDirectives),\n/* harmony export */   hasAllDirectives: () => (/* binding */ hasAllDirectives),\n/* harmony export */   hasAnyDirectives: () => (/* binding */ hasAnyDirectives),\n/* harmony export */   hasClientExports: () => (/* binding */ hasClientExports),\n/* harmony export */   hasDirectives: () => (/* binding */ hasDirectives),\n/* harmony export */   shouldInclude: () => (/* binding */ shouldInclude)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n\n\nfunction shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function(_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === \"Variable\") {\n            evaledValue = variables && variables[ifArgument.value.name.value];\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(evaledValue !== void 0, 70, directive.name.value);\n        } else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    });\n}\nfunction getDirectiveNames(root) {\n    var names = [];\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {\n        Directive: function(node) {\n            names.push(node.name.value);\n        }\n    });\n    return names;\n}\nvar hasAnyDirectives = function(names, root) {\n    return hasDirectives(names, root, false);\n};\nvar hasAllDirectives = function(names, root) {\n    return hasDirectives(names, root, true);\n};\nfunction hasDirectives(names, root, all) {\n    var nameSet = new Set(names);\n    var uniqueCount = nameSet.size;\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {\n        Directive: function(node) {\n            if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n                return graphql__WEBPACK_IMPORTED_MODULE_1__.BREAK;\n            }\n        }\n    });\n    // If we found all the names, nameSet will be empty. If we only care about\n    // finding some of them, the < condition is sufficient.\n    return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nfunction hasClientExports(document) {\n    return document && hasDirectives([\n        \"client\",\n        \"export\"\n    ], document, true);\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === \"skip\" || value === \"include\";\n}\nfunction getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function(directive) {\n            if (!isInclusionDirective(directive)) return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(directiveArguments && directiveArguments.length === 1, 71, directiveName);\n            var ifArgument = directiveArguments[0];\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifArgument.name && ifArgument.name.value === \"if\", 72, directiveName);\n            var ifValue = ifArgument.value;\n            // means it has to be a variable value if this is a valid @skip or @include directive\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 73, directiveName);\n            result.push({\n                directive: directive,\n                ifArgument: ifArgument\n            });\n        });\n    }\n    return result;\n} //# sourceMappingURL=directives.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvZGlyZWN0aXZlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDVDtBQUNoQyxTQUFTRyxjQUFjQyxFQUFFLEVBQUVDLFNBQVM7SUFDdkMsSUFBSUMsYUFBYUYsR0FBR0UsVUFBVTtJQUM5QixJQUFJLENBQUNBLGNBQWMsQ0FBQ0EsV0FBV0MsTUFBTSxFQUFFO1FBQ25DLE9BQU87SUFDWDtJQUNBLE9BQU9DLHVCQUF1QkYsWUFBWUcsS0FBSyxDQUFDLFNBQVVMLEVBQUU7UUFDeEQsSUFBSU0sWUFBWU4sR0FBR00sU0FBUyxFQUFFQyxhQUFhUCxHQUFHTyxVQUFVO1FBQ3hELElBQUlDLGNBQWM7UUFDbEIsSUFBSUQsV0FBV0UsS0FBSyxDQUFDQyxJQUFJLEtBQUssWUFBWTtZQUN0Q0YsY0FDSVAsYUFBYUEsU0FBUyxDQUFDTSxXQUFXRSxLQUFLLENBQUNFLElBQUksQ0FBQ0YsS0FBSyxDQUFDO1lBQ3ZEYiw0REFBU0EsQ0FBQ1ksZ0JBQWdCLEtBQUssR0FBRyxJQUFJRixVQUFVSyxJQUFJLENBQUNGLEtBQUs7UUFDOUQsT0FDSztZQUNERCxjQUFjRCxXQUFXRSxLQUFLLENBQUNBLEtBQUs7UUFDeEM7UUFDQSxPQUFPSCxVQUFVSyxJQUFJLENBQUNGLEtBQUssS0FBSyxTQUFTLENBQUNELGNBQWNBO0lBQzVEO0FBQ0o7QUFDTyxTQUFTSSxrQkFBa0JDLElBQUk7SUFDbEMsSUFBSUMsUUFBUSxFQUFFO0lBQ2RqQiw4Q0FBS0EsQ0FBQ2dCLE1BQU07UUFDUkUsV0FBVyxTQUFVQyxJQUFJO1lBQ3JCRixNQUFNRyxJQUFJLENBQUNELEtBQUtMLElBQUksQ0FBQ0YsS0FBSztRQUM5QjtJQUNKO0lBQ0EsT0FBT0s7QUFDWDtBQUNPLElBQUlJLG1CQUFtQixTQUFVSixLQUFLLEVBQUVELElBQUk7SUFDL0MsT0FBT00sY0FBY0wsT0FBT0QsTUFBTTtBQUN0QyxFQUFFO0FBQ0ssSUFBSU8sbUJBQW1CLFNBQVVOLEtBQUssRUFBRUQsSUFBSTtJQUMvQyxPQUFPTSxjQUFjTCxPQUFPRCxNQUFNO0FBQ3RDLEVBQUU7QUFDSyxTQUFTTSxjQUFjTCxLQUFLLEVBQUVELElBQUksRUFBRVEsR0FBRztJQUMxQyxJQUFJQyxVQUFVLElBQUlDLElBQUlUO0lBQ3RCLElBQUlVLGNBQWNGLFFBQVFHLElBQUk7SUFDOUI1Qiw4Q0FBS0EsQ0FBQ2dCLE1BQU07UUFDUkUsV0FBVyxTQUFVQyxJQUFJO1lBQ3JCLElBQUlNLFFBQVFJLE1BQU0sQ0FBQ1YsS0FBS0wsSUFBSSxDQUFDRixLQUFLLEtBQU0sRUFBQ1ksT0FBTyxDQUFDQyxRQUFRRyxJQUFJLEdBQUc7Z0JBQzVELE9BQU8zQiwwQ0FBS0E7WUFDaEI7UUFDSjtJQUNKO0lBQ0EsMEVBQTBFO0lBQzFFLHVEQUF1RDtJQUN2RCxPQUFPdUIsTUFBTSxDQUFDQyxRQUFRRyxJQUFJLEdBQUdILFFBQVFHLElBQUksR0FBR0Q7QUFDaEQ7QUFDTyxTQUFTRyxpQkFBaUJDLFFBQVE7SUFDckMsT0FBT0EsWUFBWVQsY0FBYztRQUFDO1FBQVU7S0FBUyxFQUFFUyxVQUFVO0FBQ3JFO0FBQ0EsU0FBU0MscUJBQXFCN0IsRUFBRTtJQUM1QixJQUFJUyxRQUFRVCxHQUFHVyxJQUFJLENBQUNGLEtBQUs7SUFDekIsT0FBT0EsVUFBVSxVQUFVQSxVQUFVO0FBQ3pDO0FBQ08sU0FBU0wsdUJBQXVCRixVQUFVO0lBQzdDLElBQUk0QixTQUFTLEVBQUU7SUFDZixJQUFJNUIsY0FBY0EsV0FBV0MsTUFBTSxFQUFFO1FBQ2pDRCxXQUFXNkIsT0FBTyxDQUFDLFNBQVV6QixTQUFTO1lBQ2xDLElBQUksQ0FBQ3VCLHFCQUFxQnZCLFlBQ3RCO1lBQ0osSUFBSTBCLHFCQUFxQjFCLFVBQVUyQixTQUFTO1lBQzVDLElBQUlDLGdCQUFnQjVCLFVBQVVLLElBQUksQ0FBQ0YsS0FBSztZQUN4Q2IsNERBQVNBLENBQUNvQyxzQkFBc0JBLG1CQUFtQjdCLE1BQU0sS0FBSyxHQUFHLElBQUkrQjtZQUNyRSxJQUFJM0IsYUFBYXlCLGtCQUFrQixDQUFDLEVBQUU7WUFDdENwQyw0REFBU0EsQ0FBQ1csV0FBV0ksSUFBSSxJQUFJSixXQUFXSSxJQUFJLENBQUNGLEtBQUssS0FBSyxNQUFNLElBQUl5QjtZQUNqRSxJQUFJQyxVQUFVNUIsV0FBV0UsS0FBSztZQUM5QixxRkFBcUY7WUFDckZiLDREQUFTQSxDQUFDdUMsV0FDTEEsQ0FBQUEsUUFBUXpCLElBQUksS0FBSyxjQUFjeUIsUUFBUXpCLElBQUksS0FBSyxjQUFhLEdBQUksSUFBSXdCO1lBQzFFSixPQUFPYixJQUFJLENBQUM7Z0JBQUVYLFdBQVdBO2dCQUFXQyxZQUFZQTtZQUFXO1FBQy9EO0lBQ0o7SUFDQSxPQUFPdUI7QUFDWCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ3JhcGhxbC9kaXJlY3RpdmVzLmpzP2UwMDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IHZpc2l0LCBCUkVBSyB9IGZyb20gXCJncmFwaHFsXCI7XG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkSW5jbHVkZShfYSwgdmFyaWFibGVzKSB7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSBfYS5kaXJlY3RpdmVzO1xuICAgIGlmICghZGlyZWN0aXZlcyB8fCAhZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBnZXRJbmNsdXNpb25EaXJlY3RpdmVzKGRpcmVjdGl2ZXMpLmV2ZXJ5KGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0gX2EuZGlyZWN0aXZlLCBpZkFyZ3VtZW50ID0gX2EuaWZBcmd1bWVudDtcbiAgICAgICAgdmFyIGV2YWxlZFZhbHVlID0gZmFsc2U7XG4gICAgICAgIGlmIChpZkFyZ3VtZW50LnZhbHVlLmtpbmQgPT09IFwiVmFyaWFibGVcIikge1xuICAgICAgICAgICAgZXZhbGVkVmFsdWUgPVxuICAgICAgICAgICAgICAgIHZhcmlhYmxlcyAmJiB2YXJpYWJsZXNbaWZBcmd1bWVudC52YWx1ZS5uYW1lLnZhbHVlXTtcbiAgICAgICAgICAgIGludmFyaWFudChldmFsZWRWYWx1ZSAhPT0gdm9pZCAwLCA3MCwgZGlyZWN0aXZlLm5hbWUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXZhbGVkVmFsdWUgPSBpZkFyZ3VtZW50LnZhbHVlLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmUubmFtZS52YWx1ZSA9PT0gXCJza2lwXCIgPyAhZXZhbGVkVmFsdWUgOiBldmFsZWRWYWx1ZTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXJlY3RpdmVOYW1lcyhyb290KSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgdmlzaXQocm9vdCwge1xuICAgICAgICBEaXJlY3RpdmU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBuYW1lcy5wdXNoKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG5hbWVzO1xufVxuZXhwb3J0IHZhciBoYXNBbnlEaXJlY3RpdmVzID0gZnVuY3Rpb24gKG5hbWVzLCByb290KSB7XG4gICAgcmV0dXJuIGhhc0RpcmVjdGl2ZXMobmFtZXMsIHJvb3QsIGZhbHNlKTtcbn07XG5leHBvcnQgdmFyIGhhc0FsbERpcmVjdGl2ZXMgPSBmdW5jdGlvbiAobmFtZXMsIHJvb3QpIHtcbiAgICByZXR1cm4gaGFzRGlyZWN0aXZlcyhuYW1lcywgcm9vdCwgdHJ1ZSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0RpcmVjdGl2ZXMobmFtZXMsIHJvb3QsIGFsbCkge1xuICAgIHZhciBuYW1lU2V0ID0gbmV3IFNldChuYW1lcyk7XG4gICAgdmFyIHVuaXF1ZUNvdW50ID0gbmFtZVNldC5zaXplO1xuICAgIHZpc2l0KHJvb3QsIHtcbiAgICAgICAgRGlyZWN0aXZlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5hbWVTZXQuZGVsZXRlKG5vZGUubmFtZS52YWx1ZSkgJiYgKCFhbGwgfHwgIW5hbWVTZXQuc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgLy8gSWYgd2UgZm91bmQgYWxsIHRoZSBuYW1lcywgbmFtZVNldCB3aWxsIGJlIGVtcHR5LiBJZiB3ZSBvbmx5IGNhcmUgYWJvdXRcbiAgICAvLyBmaW5kaW5nIHNvbWUgb2YgdGhlbSwgdGhlIDwgY29uZGl0aW9uIGlzIHN1ZmZpY2llbnQuXG4gICAgcmV0dXJuIGFsbCA/ICFuYW1lU2V0LnNpemUgOiBuYW1lU2V0LnNpemUgPCB1bmlxdWVDb3VudDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNDbGllbnRFeHBvcnRzKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50ICYmIGhhc0RpcmVjdGl2ZXMoW1wiY2xpZW50XCIsIFwiZXhwb3J0XCJdLCBkb2N1bWVudCwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBpc0luY2x1c2lvbkRpcmVjdGl2ZShfYSkge1xuICAgIHZhciB2YWx1ZSA9IF9hLm5hbWUudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlID09PSBcInNraXBcIiB8fCB2YWx1ZSA9PT0gXCJpbmNsdWRlXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5jbHVzaW9uRGlyZWN0aXZlcyhkaXJlY3RpdmVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGlmIChkaXJlY3RpdmVzICYmIGRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICAgIGRpcmVjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICBpZiAoIWlzSW5jbHVzaW9uRGlyZWN0aXZlKGRpcmVjdGl2ZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZUFyZ3VtZW50cyA9IGRpcmVjdGl2ZS5hcmd1bWVudHM7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZS5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgaW52YXJpYW50KGRpcmVjdGl2ZUFyZ3VtZW50cyAmJiBkaXJlY3RpdmVBcmd1bWVudHMubGVuZ3RoID09PSAxLCA3MSwgZGlyZWN0aXZlTmFtZSk7XG4gICAgICAgICAgICB2YXIgaWZBcmd1bWVudCA9IGRpcmVjdGl2ZUFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIGludmFyaWFudChpZkFyZ3VtZW50Lm5hbWUgJiYgaWZBcmd1bWVudC5uYW1lLnZhbHVlID09PSBcImlmXCIsIDcyLCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICAgIHZhciBpZlZhbHVlID0gaWZBcmd1bWVudC52YWx1ZTtcbiAgICAgICAgICAgIC8vIG1lYW5zIGl0IGhhcyB0byBiZSBhIHZhcmlhYmxlIHZhbHVlIGlmIHRoaXMgaXMgYSB2YWxpZCBAc2tpcCBvciBAaW5jbHVkZSBkaXJlY3RpdmVcbiAgICAgICAgICAgIGludmFyaWFudChpZlZhbHVlICYmXG4gICAgICAgICAgICAgICAgKGlmVmFsdWUua2luZCA9PT0gXCJWYXJpYWJsZVwiIHx8IGlmVmFsdWUua2luZCA9PT0gXCJCb29sZWFuVmFsdWVcIiksIDczLCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgZGlyZWN0aXZlOiBkaXJlY3RpdmUsIGlmQXJndW1lbnQ6IGlmQXJndW1lbnQgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlcy5qcy5tYXAiXSwibmFtZXMiOlsiaW52YXJpYW50IiwidmlzaXQiLCJCUkVBSyIsInNob3VsZEluY2x1ZGUiLCJfYSIsInZhcmlhYmxlcyIsImRpcmVjdGl2ZXMiLCJsZW5ndGgiLCJnZXRJbmNsdXNpb25EaXJlY3RpdmVzIiwiZXZlcnkiLCJkaXJlY3RpdmUiLCJpZkFyZ3VtZW50IiwiZXZhbGVkVmFsdWUiLCJ2YWx1ZSIsImtpbmQiLCJuYW1lIiwiZ2V0RGlyZWN0aXZlTmFtZXMiLCJyb290IiwibmFtZXMiLCJEaXJlY3RpdmUiLCJub2RlIiwicHVzaCIsImhhc0FueURpcmVjdGl2ZXMiLCJoYXNEaXJlY3RpdmVzIiwiaGFzQWxsRGlyZWN0aXZlcyIsImFsbCIsIm5hbWVTZXQiLCJTZXQiLCJ1bmlxdWVDb3VudCIsInNpemUiLCJkZWxldGUiLCJoYXNDbGllbnRFeHBvcnRzIiwiZG9jdW1lbnQiLCJpc0luY2x1c2lvbkRpcmVjdGl2ZSIsInJlc3VsdCIsImZvckVhY2giLCJkaXJlY3RpdmVBcmd1bWVudHMiLCJhcmd1bWVudHMiLCJkaXJlY3RpdmVOYW1lIiwiaWZWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/fragments.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFragmentMap: () => (/* binding */ createFragmentMap),\n/* harmony export */   getFragmentFromSelection: () => (/* binding */ getFragmentFromSelection),\n/* harmony export */   getFragmentQueryDocument: () => (/* binding */ getFragmentQueryDocument)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */ function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    var fragments = [];\n    document.definitions.forEach(function(definition) {\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === \"OperationDefinition\") {\n            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(74, definition.operation, definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\");\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === \"undefined\") {\n        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragments.length === 1, 75, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    var query = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, document), {\n        definitions: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n            {\n                kind: \"OperationDefinition\",\n                // OperationTypeNode is an enum\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName\n                            }\n                        }\n                    ]\n                }\n            }\n        ], document.definitions, true)\n    });\n    return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) {\n        fragments = [];\n    }\n    var symTable = {};\n    fragments.forEach(function(fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getFragmentFromSelection(selection, fragmentMap) {\n    switch(selection.kind){\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\":\n            {\n                var fragmentName = selection.name.value;\n                if (typeof fragmentMap === \"function\") {\n                    return fragmentMap(fragmentName);\n                }\n                var fragment = fragmentMap && fragmentMap[fragmentName];\n                (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 76, fragmentName);\n                return fragment || null;\n            }\n        default:\n            return null;\n    }\n} //# sourceMappingURL=fragments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/getFromAST.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkDocument: () => (/* binding */ checkDocument),\n/* harmony export */   getDefaultValues: () => (/* binding */ getDefaultValues),\n/* harmony export */   getFragmentDefinition: () => (/* binding */ getFragmentDefinition),\n/* harmony export */   getFragmentDefinitions: () => (/* binding */ getFragmentDefinitions),\n/* harmony export */   getMainDefinition: () => (/* binding */ getMainDefinition),\n/* harmony export */   getOperationDefinition: () => (/* binding */ getOperationDefinition),\n/* harmony export */   getOperationName: () => (/* binding */ getOperationName),\n/* harmony export */   getQueryDefinition: () => (/* binding */ getQueryDefinition)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _storeUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storeUtils.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n\n\n// Checks the document for errors and throws an exception if there is an error.\nfunction checkDocument(doc) {\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc && doc.kind === \"Document\", 77);\n    var operations = doc.definitions.filter(function(d) {\n        return d.kind !== \"FragmentDefinition\";\n    }).map(function(definition) {\n        if (definition.kind !== \"OperationDefinition\") {\n            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(78, definition.kind);\n        }\n        return definition;\n    });\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(operations.length <= 1, 79, operations.length);\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"OperationDefinition\";\n    })[0];\n}\nfunction getOperationName(doc) {\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"OperationDefinition\" && !!definition.name;\n    }).map(function(x) {\n        return x.name.value;\n    })[0] || null;\n}\n// Returns the FragmentDefinitions from a particular document as an array\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"FragmentDefinition\";\n    });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(queryDef && queryDef.operation === \"query\", 80);\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.kind === \"Document\", 81);\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.definitions.length <= 1, 82);\n    var fragmentDef = doc.definitions[0];\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragmentDef.kind === \"FragmentDefinition\", 83);\n    return fragmentDef;\n}\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */ function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for(var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++){\n        var definition = _a[_i];\n        if (definition.kind === \"OperationDefinition\") {\n            var operation = definition.operation;\n            if (operation === \"query\" || operation === \"mutation\" || operation === \"subscription\") {\n                return definition;\n            }\n        }\n        if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n            // we do this because we want to allow multiple fragment definitions\n            // to precede an operation definition.\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(84);\n}\nfunction getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function(def) {\n            if (def.defaultValue) {\n                (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_1__.valueToObjectRepresentation)(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n} //# sourceMappingURL=getFromAST.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/operations.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/operations.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMutationOperation: () => (/* binding */ isMutationOperation),\n/* harmony export */   isQueryOperation: () => (/* binding */ isQueryOperation),\n/* harmony export */   isSubscriptionOperation: () => (/* binding */ isSubscriptionOperation)\n/* harmony export */ });\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getFromAST.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nfunction isOperation(document, operation) {\n    var _a;\n    return ((_a = (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_0__.getOperationDefinition)(document)) === null || _a === void 0 ? void 0 : _a.operation) === operation;\n}\nfunction isMutationOperation(document) {\n    return isOperation(document, \"mutation\");\n}\nfunction isQueryOperation(document) {\n    return isOperation(document, \"query\");\n}\nfunction isSubscriptionOperation(document) {\n    return isOperation(document, \"subscription\");\n} //# sourceMappingURL=operations.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvb3BlcmF0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlEO0FBQ3pELFNBQVNDLFlBQVlDLFFBQVEsRUFBRUMsU0FBUztJQUNwQyxJQUFJQztJQUNKLE9BQU8sQ0FBQyxDQUFDQSxLQUFLSixzRUFBc0JBLENBQUNFLFNBQVEsTUFBTyxRQUFRRSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdELFNBQVMsTUFBTUE7QUFDM0c7QUFDTyxTQUFTRSxvQkFBb0JILFFBQVE7SUFDeEMsT0FBT0QsWUFBWUMsVUFBVTtBQUNqQztBQUNPLFNBQVNJLGlCQUFpQkosUUFBUTtJQUNyQyxPQUFPRCxZQUFZQyxVQUFVO0FBQ2pDO0FBQ08sU0FBU0ssd0JBQXdCTCxRQUFRO0lBQzVDLE9BQU9ELFlBQVlDLFVBQVU7QUFDakMsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvb3BlcmF0aW9ucy5qcz8zNWY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE9wZXJhdGlvbkRlZmluaXRpb24gfSBmcm9tIFwiLi9nZXRGcm9tQVNULmpzXCI7XG5mdW5jdGlvbiBpc09wZXJhdGlvbihkb2N1bWVudCwgb3BlcmF0aW9uKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoKF9hID0gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2N1bWVudCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vcGVyYXRpb24pID09PSBvcGVyYXRpb247XG59XG5leHBvcnQgZnVuY3Rpb24gaXNNdXRhdGlvbk9wZXJhdGlvbihkb2N1bWVudCkge1xuICAgIHJldHVybiBpc09wZXJhdGlvbihkb2N1bWVudCwgXCJtdXRhdGlvblwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1F1ZXJ5T3BlcmF0aW9uKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGlzT3BlcmF0aW9uKGRvY3VtZW50LCBcInF1ZXJ5XCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uT3BlcmF0aW9uKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGlzT3BlcmF0aW9uKGRvY3VtZW50LCBcInN1YnNjcmlwdGlvblwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZXJhdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbImdldE9wZXJhdGlvbkRlZmluaXRpb24iLCJpc09wZXJhdGlvbiIsImRvY3VtZW50Iiwib3BlcmF0aW9uIiwiX2EiLCJpc011dGF0aW9uT3BlcmF0aW9uIiwiaXNRdWVyeU9wZXJhdGlvbiIsImlzU3Vic2NyaXB0aW9uT3BlcmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/operations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/print.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   print: () => (/* binding */ print)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\nvar printCache;\nvar print = Object.assign(function(ast) {\n    var result = printCache.get(ast);\n    if (!result) {\n        result = (0,graphql__WEBPACK_IMPORTED_MODULE_0__.print)(ast);\n        printCache.set(ast, result);\n    }\n    return result;\n}, {\n    reset: function() {\n        printCache = new _caching_index_js__WEBPACK_IMPORTED_MODULE_1__.AutoCleanedWeakCache(_caching_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes.print || 2000 /* defaultCacheSizes.print */ );\n    }\n});\nprint.reset();\nif (globalThis.__DEV__ !== false) {\n    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__.registerGlobalCache)(\"print\", function() {\n        return printCache ? printCache.size : 0;\n    });\n} //# sourceMappingURL=print.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvcHJpbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNkM7QUFDMkI7QUFDRDtBQUN2RSxJQUFJSztBQUNHLElBQUlMLFFBQVFNLE9BQU9DLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO0lBQzFDLElBQUlDLFNBQVNKLFdBQVdLLEdBQUcsQ0FBQ0Y7SUFDNUIsSUFBSSxDQUFDQyxRQUFRO1FBQ1RBLFNBQVNSLDhDQUFTQSxDQUFDTztRQUNuQkgsV0FBV00sR0FBRyxDQUFDSCxLQUFLQztJQUN4QjtJQUNBLE9BQU9BO0FBQ1gsR0FBRztJQUNDRyxPQUFPO1FBQ0hQLGFBQWEsSUFBSUgsbUVBQW9CQSxDQUFDQyx5REFBVUEsQ0FBQ0gsS0FBSyxJQUFJLEtBQUssMkJBQTJCO0lBQzlGO0FBQ0osR0FBRztBQUNIQSxNQUFNWSxLQUFLO0FBQ1gsSUFBSUMsV0FBV0MsT0FBTyxLQUFLLE9BQU87SUFDOUJWLG1GQUFtQkEsQ0FBQyxTQUFTO1FBQWMsT0FBUUMsYUFBYUEsV0FBV1UsSUFBSSxHQUFHO0lBQUk7QUFDMUYsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvcHJpbnQuanM/ZTI4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmludCBhcyBvcmlnUHJpbnQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IHsgQXV0b0NsZWFuZWRXZWFrQ2FjaGUsIGNhY2hlU2l6ZXMsIH0gZnJvbSBcIi4uL2NhY2hpbmcvaW5kZXguanNcIjtcbmltcG9ydCB7IHJlZ2lzdGVyR2xvYmFsQ2FjaGUgfSBmcm9tIFwiLi4vY2FjaGluZy9nZXRNZW1vcnlJbnRlcm5hbHMuanNcIjtcbnZhciBwcmludENhY2hlO1xuZXhwb3J0IHZhciBwcmludCA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gKGFzdCkge1xuICAgIHZhciByZXN1bHQgPSBwcmludENhY2hlLmdldChhc3QpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdCA9IG9yaWdQcmludChhc3QpO1xuICAgICAgICBwcmludENhY2hlLnNldChhc3QsIHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59LCB7XG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJpbnRDYWNoZSA9IG5ldyBBdXRvQ2xlYW5lZFdlYWtDYWNoZShjYWNoZVNpemVzLnByaW50IHx8IDIwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXMucHJpbnQgKi8pO1xuICAgIH0sXG59KTtcbnByaW50LnJlc2V0KCk7XG5pZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgIHJlZ2lzdGVyR2xvYmFsQ2FjaGUoXCJwcmludFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiAocHJpbnRDYWNoZSA/IHByaW50Q2FjaGUuc2l6ZSA6IDApOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByaW50LmpzLm1hcCJdLCJuYW1lcyI6WyJwcmludCIsIm9yaWdQcmludCIsIkF1dG9DbGVhbmVkV2Vha0NhY2hlIiwiY2FjaGVTaXplcyIsInJlZ2lzdGVyR2xvYmFsQ2FjaGUiLCJwcmludENhY2hlIiwiT2JqZWN0IiwiYXNzaWduIiwiYXN0IiwicmVzdWx0IiwiZ2V0Iiwic2V0IiwicmVzZXQiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsInNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/storeUtils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   argumentsObjectFromField: () => (/* binding */ argumentsObjectFromField),\n/* harmony export */   getStoreKeyName: () => (/* binding */ getStoreKeyName),\n/* harmony export */   getTypenameFromResult: () => (/* binding */ getTypenameFromResult),\n/* harmony export */   isDocumentNode: () => (/* binding */ isDocumentNode),\n/* harmony export */   isField: () => (/* binding */ isField),\n/* harmony export */   isInlineFragment: () => (/* binding */ isInlineFragment),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   makeReference: () => (/* binding */ makeReference),\n/* harmony export */   resultKeyNameFromField: () => (/* binding */ resultKeyNameFromField),\n/* harmony export */   storeKeyNameFromField: () => (/* binding */ storeKeyNameFromField),\n/* harmony export */   valueToObjectRepresentation: () => (/* binding */ valueToObjectRepresentation)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _common_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragments.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/canonicalStringify.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n\n\n\n\nfunction makeReference(id) {\n    return {\n        __ref: String(id)\n    };\n}\nfunction isReference(obj) {\n    return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n}\nfunction isDocumentNode(value) {\n    return (0,_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n}\nfunction isStringValue(value) {\n    return value.kind === \"StringValue\";\n}\nfunction isBooleanValue(value) {\n    return value.kind === \"BooleanValue\";\n}\nfunction isIntValue(value) {\n    return value.kind === \"IntValue\";\n}\nfunction isFloatValue(value) {\n    return value.kind === \"FloatValue\";\n}\nfunction isVariable(value) {\n    return value.kind === \"Variable\";\n}\nfunction isObjectValue(value) {\n    return value.kind === \"ObjectValue\";\n}\nfunction isListValue(value) {\n    return value.kind === \"ListValue\";\n}\nfunction isEnumValue(value) {\n    return value.kind === \"EnumValue\";\n}\nfunction isNullValue(value) {\n    return value.kind === \"NullValue\";\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    } else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    } else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function(obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    } else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    } else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function(listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    } else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    } else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    } else {\n        throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(85, name.value, value.kind);\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function(directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function(_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function(_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    \"connection\",\n    \"include\",\n    \"skip\",\n    \"client\",\n    \"rest\",\n    \"export\",\n    \"nonreactive\"\n];\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nvar storeKeyNameStringify = _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__.canonicalStringify;\nvar getStoreKeyName = Object.assign(function(fieldName, args, directives) {\n    if (args && directives && directives[\"connection\"] && directives[\"connection\"][\"key\"]) {\n        if (directives[\"connection\"][\"filter\"] && directives[\"connection\"][\"filter\"].length > 0) {\n            var filterKeys = directives[\"connection\"][\"filter\"] ? directives[\"connection\"][\"filter\"] : [];\n            filterKeys.sort();\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function(key) {\n                filteredArgs_1[key] = args[key];\n            });\n            return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(storeKeyNameStringify(filteredArgs_1), \")\");\n        } else {\n            return directives[\"connection\"][\"key\"];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        // We can't use `JSON.stringify` here since it's non-deterministic,\n        // and can lead to different store key names being created even though\n        // the `args` object used during creation has the same properties/values.\n        var stringifiedArgs = storeKeyNameStringify(args);\n        completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function(key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n            } else {\n                completeFieldName += \"@\".concat(key);\n            }\n        });\n    }\n    return completeFieldName;\n}, {\n    setStringify: function(s) {\n        var previous = storeKeyNameStringify;\n        storeKeyNameStringify = s;\n        return previous;\n    }\n});\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function(_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction getTypenameFromResult(result, selectionSet, fragmentMap) {\n    var fragments;\n    for(var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++){\n        var selection = _a[_i];\n        if (isField(selection)) {\n            if (selection.name.value === \"__typename\") {\n                return result[resultKeyNameFromField(selection)];\n            }\n        } else if (fragments) {\n            fragments.push(selection);\n        } else {\n            fragments = [\n                selection\n            ];\n        }\n    }\n    if (typeof result.__typename === \"string\") {\n        return result.__typename;\n    }\n    if (fragments) {\n        for(var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++){\n            var selection = fragments_1[_b];\n            var typename = getTypenameFromResult(result, (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === \"string\") {\n                return typename;\n            }\n        }\n    }\n}\nfunction isField(selection) {\n    return selection.kind === \"Field\";\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === \"InlineFragment\";\n} //# sourceMappingURL=storeUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/transform.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addTypenameToDocument: () => (/* binding */ addTypenameToDocument),\n/* harmony export */   buildQueryFromSelectionSet: () => (/* binding */ buildQueryFromSelectionSet),\n/* harmony export */   removeArgumentsFromDocument: () => (/* binding */ removeArgumentsFromDocument),\n/* harmony export */   removeClientSetsFromDocument: () => (/* binding */ removeClientSetsFromDocument),\n/* harmony export */   removeConnectionDirectiveFromDocument: () => (/* binding */ removeConnectionDirectiveFromDocument),\n/* harmony export */   removeDirectivesFromDocument: () => (/* binding */ removeDirectivesFromDocument),\n/* harmony export */   removeFragmentSpreadFromDocument: () => (/* binding */ removeFragmentSpreadFromDocument)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getFromAST.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _storeUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./storeUtils.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragments.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _common_arrays_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\n\n\n\nvar TYPENAME_FIELD = {\n    kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD,\n    name: {\n        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n        value: \"__typename\"\n    }\n};\nfunction isEmpty(op, fragmentMap) {\n    return !op || op.selectionSet.selections.every(function(selection) {\n        return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_SPREAD && isEmpty(fragmentMap[selection.name.value], fragmentMap);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getOperationDefinition)(doc) || (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinition)(doc), (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(configs) {\n    var names = new Map();\n    var tests = new Map();\n    configs.forEach(function(directive) {\n        if (directive) {\n            if (directive.name) {\n                names.set(directive.name, directive);\n            } else if (directive.test) {\n                tests.set(directive.test, directive);\n            }\n        }\n    });\n    return function(directive) {\n        var config = names.get(directive.name.value);\n        if (!config && tests.size) {\n            tests.forEach(function(testConfig, test) {\n                if (test(directive)) {\n                    config = testConfig;\n                }\n            });\n        }\n        return config;\n    };\n}\nfunction makeInUseGetterFunction(defaultKey) {\n    var map = new Map();\n    return function inUseGetterFunction(key) {\n        if (key === void 0) {\n            key = defaultKey;\n        }\n        var inUse = map.get(key);\n        if (!inUse) {\n            map.set(key, inUse = {\n                // Variable and fragment spread names used directly within this\n                // operation or fragment definition, as identified by key. These sets\n                // will be populated during the first traversal of the document in\n                // removeDirectivesFromDocument below.\n                variables: new Set(),\n                fragmentSpreads: new Set()\n            });\n        }\n        return inUse;\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc);\n    // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n    // operations as if their names were \"\". Anonymous fragment definitions are\n    // not supposed to be possible, but the same default naming strategy seems\n    // appropriate for that case as well.\n    var getInUseByOperationName = makeInUseGetterFunction(\"\");\n    var getInUseByFragmentName = makeInUseGetterFunction(\"\");\n    var getInUse = function(ancestors) {\n        for(var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p){\n            if ((0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(ancestor)) continue;\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n                // If an operation is anonymous, we use the empty string as its key.\n                return getInUseByOperationName(ancestor.name && ancestor.name.value);\n            }\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION) {\n                return getInUseByFragmentName(ancestor.name.value);\n            }\n        }\n        globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(86);\n        return null;\n    };\n    var operationCount = 0;\n    for(var i = doc.definitions.length - 1; i >= 0; --i){\n        if (doc.definitions[i].kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n            ++operationCount;\n        }\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var shouldRemoveField = function(nodeDirectives) {\n        return (0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyArray)(nodeDirectives) && nodeDirectives.map(directiveMatcher).some(function(config) {\n            return config && config.remove;\n        });\n    };\n    var originalFragmentDefsByPath = new Map();\n    // Any time the first traversal of the document below makes a change like\n    // removing a fragment (by returning null), this variable should be set to\n    // true. Once it becomes true, it should never be set to false again. If this\n    // variable remains false throughout the traversal, then we can return the\n    // original doc immediately without any modifications.\n    var firstVisitMadeChanges = false;\n    var fieldOrInlineFragmentVisitor = {\n        enter: function(node) {\n            if (shouldRemoveField(node.directives)) {\n                firstVisitMadeChanges = true;\n                return null;\n            }\n        }\n    };\n    var docWithoutDirectiveSubtrees = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        // These two AST node types share the same implementation, defined above.\n        Field: fieldOrInlineFragmentVisitor,\n        InlineFragment: fieldOrInlineFragmentVisitor,\n        VariableDefinition: {\n            enter: function() {\n                // VariableDefinition nodes do not count as variables in use, though\n                // they do contain Variable nodes that might be visited below. To avoid\n                // counting variable declarations as usages, we skip visiting the\n                // contents of this VariableDefinition node by returning false.\n                return false;\n            }\n        },\n        Variable: {\n            enter: function(node, _key, _parent, _path, ancestors) {\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.variables.add(node.name.value);\n                }\n            }\n        },\n        FragmentSpread: {\n            enter: function(node, _key, _parent, _path, ancestors) {\n                if (shouldRemoveField(node.directives)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.fragmentSpreads.add(node.name.value);\n                }\n            // We might like to remove this FragmentSpread by returning null here if\n            // the corresponding FragmentDefinition node is also going to be removed\n            // by the logic below, but we can't control the relative order of those\n            // events, so we have to postpone the removal of dangling FragmentSpread\n            // nodes until after the current visit of the document has finished.\n            }\n        },\n        FragmentDefinition: {\n            enter: function(node, _key, _parent, path) {\n                originalFragmentDefsByPath.set(JSON.stringify(path), node);\n            },\n            leave: function(node, _key, _parent, path) {\n                var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n                if (node === originalNode) {\n                    // If the FragmentNode received by this leave function is identical to\n                    // the one received by the corresponding enter function (above), then\n                    // the visitor must not have made any changes within this\n                    // FragmentDefinition node. This fragment definition may still be\n                    // removed if there are no ...spread references to it, but it won't be\n                    // removed just because it has only a __typename field.\n                    return node;\n                }\n                if (// This logic applies only if the document contains one or more\n                // operations, since removing all fragments from a document containing\n                // only fragments makes the document useless.\n                operationCount > 0 && node.selectionSet.selections.every(function(selection) {\n                    return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD && selection.name.value === \"__typename\";\n                })) {\n                    // This is a somewhat opinionated choice: if a FragmentDefinition ends\n                    // up having no fields other than __typename, we remove the whole\n                    // fragment definition, and later prune ...spread references to it.\n                    getInUseByFragmentName(node.name.value).removed = true;\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        },\n        Directive: {\n            leave: function(node) {\n                // If a matching directive is found, remove the directive itself. Note\n                // that this does not remove the target (field, argument, etc) of the\n                // directive, but only the directive itself.\n                if (directiveMatcher(node)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        }\n    });\n    if (!firstVisitMadeChanges) {\n        // If our first pass did not change anything about the document, then there\n        // is no cleanup we need to do, and we can return the original doc.\n        return doc;\n    }\n    // Utility for making sure inUse.transitiveVars is recursively populated.\n    // Because this logic assumes inUse.fragmentSpreads has been completely\n    // populated and inUse.removed has been set if appropriate,\n    // populateTransitiveVars must be called after that information has been\n    // collected by the first traversal of the document.\n    var populateTransitiveVars = function(inUse) {\n        if (!inUse.transitiveVars) {\n            inUse.transitiveVars = new Set(inUse.variables);\n            if (!inUse.removed) {\n                inUse.fragmentSpreads.forEach(function(childFragmentName) {\n                    populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function(varName) {\n                        inUse.transitiveVars.add(varName);\n                    });\n                });\n            }\n        }\n        return inUse;\n    };\n    // Since we've been keeping track of fragment spreads used by particular\n    // operations and fragment definitions, we now need to compute the set of all\n    // spreads used (transitively) by any operations in the document.\n    var allFragmentNamesUsed = new Set();\n    docWithoutDirectiveSubtrees.definitions.forEach(function(def) {\n        if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n            populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function(childFragmentName) {\n                allFragmentNamesUsed.add(childFragmentName);\n            });\n        } else if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION && // If there are no operations in the document, then all fragment\n        // definitions count as usages of their own fragment names. This heuristic\n        // prevents accidentally removing all fragment definitions from the\n        // document just because it contains no operations that use the fragments.\n        operationCount === 0 && !getInUseByFragmentName(def.name.value).removed) {\n            allFragmentNamesUsed.add(def.name.value);\n        }\n    });\n    // Now that we have added all fragment spreads used by operations to the\n    // allFragmentNamesUsed set, we can complete the set by transitively adding\n    // all fragment spreads used by those fragments, and so on.\n    allFragmentNamesUsed.forEach(function(fragmentName) {\n        // Once all the childFragmentName strings added here have been seen already,\n        // the top-level allFragmentNamesUsed.forEach loop will terminate.\n        populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function(childFragmentName) {\n            allFragmentNamesUsed.add(childFragmentName);\n        });\n    });\n    var fragmentWillBeRemoved = function(fragmentName) {\n        return !!// A fragment definition will be removed if there are no spreads that refer\n        // to it, or the fragment was explicitly removed because it had no fields\n        // other than __typename.\n        (!allFragmentNamesUsed.has(fragmentName) || getInUseByFragmentName(fragmentName).removed);\n    };\n    var enterVisitor = {\n        enter: function(node) {\n            if (fragmentWillBeRemoved(node.name.value)) {\n                return null;\n            }\n        }\n    };\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(docWithoutDirectiveSubtrees, {\n        // If the fragment is going to be removed, then leaving any dangling\n        // FragmentSpread nodes with the same name would be a mistake.\n        FragmentSpread: enterVisitor,\n        // This is where the fragment definition is actually removed.\n        FragmentDefinition: enterVisitor,\n        OperationDefinition: {\n            leave: function(node) {\n                // Upon leaving each operation in the depth-first AST traversal, prune\n                // any variables that are declared by the operation but unused within.\n                if (node.variableDefinitions) {\n                    var usedVariableNames_1 = populateTransitiveVars(// If an operation is anonymous, we use the empty string as its key.\n                    getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n                    // According to the GraphQL spec, all variables declared by an\n                    // operation must either be used by that operation or used by some\n                    // fragment included transitively into that operation:\n                    // https://spec.graphql.org/draft/#sec-All-Variables-Used\n                    //\n                    // To stay on the right side of this validation rule, if/when we\n                    // remove the last $var references from an operation or its fragments,\n                    // we must also remove the corresponding $var declaration from the\n                    // enclosing operation. This pruning applies only to operations and\n                    // not fragment definitions, at the moment. Fragments may be able to\n                    // declare variables eventually, but today they can only consume them.\n                    if (usedVariableNames_1.size < node.variableDefinitions.length) {\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                            variableDefinitions: node.variableDefinitions.filter(function(varDef) {\n                                return usedVariableNames_1.has(varDef.variable.name.value);\n                            })\n                        });\n                    }\n                }\n            }\n        }\n    }));\n}\nvar addTypenameToDocument = Object.assign(function(doc) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        SelectionSet: {\n            enter: function(node, _key, parent) {\n                // Don't add __typename to OperationDefinitions.\n                if (parent && parent.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n                    return;\n                }\n                // No changes if no selections.\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                // If selections already have a __typename, or are part of an\n                // introspection query, do nothing.\n                var skip = selections.some(function(selection) {\n                    return (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection) && (selection.name.value === \"__typename\" || selection.name.value.lastIndexOf(\"__\", 0) === 0);\n                });\n                if (skip) {\n                    return;\n                }\n                // If this SelectionSet is @export-ed as an input variable, it should\n                // not have a __typename field (see issue #4691).\n                var field = parent;\n                if ((0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(field) && field.directives && field.directives.some(function(d) {\n                    return d.name.value === \"export\";\n                })) {\n                    return;\n                }\n                // Create and return a new SelectionSet with a __typename Field.\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    selections: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([], selections, true), [\n                        TYPENAME_FIELD\n                    ], false)\n                });\n            }\n        }\n    });\n}, {\n    added: function(field) {\n        return field === TYPENAME_FIELD;\n    }\n});\nvar connectionRemoveConfig = {\n    test: function(directive) {\n        var willRemove = directive.name.value === \"connection\";\n        if (willRemove) {\n            if (!directive.arguments || !directive.arguments.some(function(arg) {\n                return arg.name.value === \"key\";\n            })) {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(87);\n            }\n        }\n        return willRemove;\n    }\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([\n        connectionRemoveConfig\n    ], (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) {\n        nestedCheck = true;\n    }\n    return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function(selection) {\n        return hasDirectivesInSelection(directives, selection, nestedCheck);\n    });\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) {\n        nestedCheck = true;\n    }\n    if (!(0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function(aConfig) {\n            return argument.value && argument.value.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.VARIABLE && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        OperationDefinition: {\n            enter: function(node) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    // Remove matching top level variables definitions.\n                    variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function(varDef) {\n                        return !config.some(function(arg) {\n                            return arg.name === varDef.variable.name.value;\n                        });\n                    }) : []\n                });\n            }\n        },\n        Field: {\n            enter: function(node) {\n                // If `remove` is set to true for an argument, and an argument match\n                // is found for a field, remove the field as well.\n                var shouldRemoveField = config.some(function(argConfig) {\n                    return argConfig.remove;\n                });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function(arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            }\n        },\n        Argument: {\n            enter: function(node) {\n                // Remove all matching arguments.\n                if (argMatcher(node)) {\n                    return null;\n                }\n            }\n        }\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function(def) {\n            return def.name === node.name.value;\n        })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        FragmentSpread: {\n            enter: enter\n        },\n        FragmentDefinition: {\n            enter: enter\n        }\n    }));\n}\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nfunction buildQueryFromSelectionSet(document) {\n    var definition = (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === \"query\") {\n        // Already a query, so return the existing document.\n        return document;\n    }\n    // Build a new query using the selection set of the main operation.\n    var modifiedDoc = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n        OperationDefinition: {\n            enter: function(node) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    operation: \"query\"\n                });\n            }\n        }\n    });\n    return modifiedDoc;\n}\n// Remove fields / selection sets that include an @client directive.\nfunction removeClientSetsFromDocument(document) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function(directive) {\n                return directive.name.value === \"client\";\n            },\n            remove: true\n        }\n    ], document);\n    return modifiedDoc;\n} //# sourceMappingURL=transform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoCleanedStrongCache: () => (/* reexport safe */ _caching_index_js__WEBPACK_IMPORTED_MODULE_31__.AutoCleanedStrongCache),\n/* harmony export */   AutoCleanedWeakCache: () => (/* reexport safe */ _caching_index_js__WEBPACK_IMPORTED_MODULE_31__.AutoCleanedWeakCache),\n/* harmony export */   Concast: () => (/* reexport safe */ _observables_Concast_js__WEBPACK_IMPORTED_MODULE_17__.Concast),\n/* harmony export */   DEV: () => (/* reexport safe */ _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.DEV),\n/* harmony export */   DeepMerger: () => (/* reexport safe */ _common_mergeDeep_js__WEBPACK_IMPORTED_MODULE_12__.DeepMerger),\n/* harmony export */   DocumentTransform: () => (/* reexport safe */ _graphql_DocumentTransform_js__WEBPACK_IMPORTED_MODULE_2__.DocumentTransform),\n/* harmony export */   Observable: () => (/* reexport safe */ _observables_Observable_js__WEBPACK_IMPORTED_MODULE_10__.Observable),\n/* harmony export */   addTypenameToDocument: () => (/* reexport safe */ _graphql_transform_js__WEBPACK_IMPORTED_MODULE_7__.addTypenameToDocument),\n/* harmony export */   argumentsObjectFromField: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.argumentsObjectFromField),\n/* harmony export */   asyncMap: () => (/* reexport safe */ _observables_asyncMap_js__WEBPACK_IMPORTED_MODULE_16__.asyncMap),\n/* harmony export */   buildQueryFromSelectionSet: () => (/* reexport safe */ _graphql_transform_js__WEBPACK_IMPORTED_MODULE_7__.buildQueryFromSelectionSet),\n/* harmony export */   cacheSizes: () => (/* reexport safe */ _caching_index_js__WEBPACK_IMPORTED_MODULE_32__.cacheSizes),\n/* harmony export */   canUseAsyncIteratorSymbol: () => (/* reexport safe */ _common_canUse_js__WEBPACK_IMPORTED_MODULE_22__.canUseAsyncIteratorSymbol),\n/* harmony export */   canUseDOM: () => (/* reexport safe */ _common_canUse_js__WEBPACK_IMPORTED_MODULE_22__.canUseDOM),\n/* harmony export */   canUseLayoutEffect: () => (/* reexport safe */ _common_canUse_js__WEBPACK_IMPORTED_MODULE_22__.canUseLayoutEffect),\n/* harmony export */   canUseSymbol: () => (/* reexport safe */ _common_canUse_js__WEBPACK_IMPORTED_MODULE_22__.canUseSymbol),\n/* harmony export */   canUseWeakMap: () => (/* reexport safe */ _common_canUse_js__WEBPACK_IMPORTED_MODULE_22__.canUseWeakMap),\n/* harmony export */   canUseWeakSet: () => (/* reexport safe */ _common_canUse_js__WEBPACK_IMPORTED_MODULE_22__.canUseWeakSet),\n/* harmony export */   canonicalStringify: () => (/* reexport safe */ _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_28__.canonicalStringify),\n/* harmony export */   checkDocument: () => (/* reexport safe */ _graphql_getFromAST_js__WEBPACK_IMPORTED_MODULE_4__.checkDocument),\n/* harmony export */   cloneDeep: () => (/* reexport safe */ _common_cloneDeep_js__WEBPACK_IMPORTED_MODULE_13__.cloneDeep),\n/* harmony export */   compact: () => (/* reexport safe */ _common_compact_js__WEBPACK_IMPORTED_MODULE_23__.compact),\n/* harmony export */   concatPagination: () => (/* reexport safe */ _policies_pagination_js__WEBPACK_IMPORTED_MODULE_9__.concatPagination),\n/* harmony export */   createFragmentMap: () => (/* reexport safe */ _graphql_fragments_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap),\n/* harmony export */   createFulfilledPromise: () => (/* reexport safe */ _promises_decoration_js__WEBPACK_IMPORTED_MODULE_11__.createFulfilledPromise),\n/* harmony export */   createRejectedPromise: () => (/* reexport safe */ _promises_decoration_js__WEBPACK_IMPORTED_MODULE_11__.createRejectedPromise),\n/* harmony export */   fixObservableSubclass: () => (/* reexport safe */ _observables_subclassing_js__WEBPACK_IMPORTED_MODULE_18__.fixObservableSubclass),\n/* harmony export */   getDefaultValues: () => (/* reexport safe */ _graphql_getFromAST_js__WEBPACK_IMPORTED_MODULE_4__.getDefaultValues),\n/* harmony export */   getDirectiveNames: () => (/* reexport safe */ _graphql_directives_js__WEBPACK_IMPORTED_MODULE_1__.getDirectiveNames),\n/* harmony export */   getFragmentDefinition: () => (/* reexport safe */ _graphql_getFromAST_js__WEBPACK_IMPORTED_MODULE_4__.getFragmentDefinition),\n/* harmony export */   getFragmentDefinitions: () => (/* reexport safe */ _graphql_getFromAST_js__WEBPACK_IMPORTED_MODULE_4__.getFragmentDefinitions),\n/* harmony export */   getFragmentFromSelection: () => (/* reexport safe */ _graphql_fragments_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection),\n/* harmony export */   getFragmentQueryDocument: () => (/* reexport safe */ _graphql_fragments_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentQueryDocument),\n/* harmony export */   getGraphQLErrorsFromResult: () => (/* reexport safe */ _common_errorHandling_js__WEBPACK_IMPORTED_MODULE_21__.getGraphQLErrorsFromResult),\n/* harmony export */   getInclusionDirectives: () => (/* reexport safe */ _graphql_directives_js__WEBPACK_IMPORTED_MODULE_1__.getInclusionDirectives),\n/* harmony export */   getMainDefinition: () => (/* reexport safe */ _graphql_getFromAST_js__WEBPACK_IMPORTED_MODULE_4__.getMainDefinition),\n/* harmony export */   getOperationDefinition: () => (/* reexport safe */ _graphql_getFromAST_js__WEBPACK_IMPORTED_MODULE_4__.getOperationDefinition),\n/* harmony export */   getOperationName: () => (/* reexport safe */ _graphql_getFromAST_js__WEBPACK_IMPORTED_MODULE_4__.getOperationName),\n/* harmony export */   getQueryDefinition: () => (/* reexport safe */ _graphql_getFromAST_js__WEBPACK_IMPORTED_MODULE_4__.getQueryDefinition),\n/* harmony export */   getStoreKeyName: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.getStoreKeyName),\n/* harmony export */   getTypenameFromResult: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.getTypenameFromResult),\n/* harmony export */   graphQLResultHasError: () => (/* reexport safe */ _common_errorHandling_js__WEBPACK_IMPORTED_MODULE_21__.graphQLResultHasError),\n/* harmony export */   hasAllDirectives: () => (/* reexport safe */ _graphql_directives_js__WEBPACK_IMPORTED_MODULE_1__.hasAllDirectives),\n/* harmony export */   hasAnyDirectives: () => (/* reexport safe */ _graphql_directives_js__WEBPACK_IMPORTED_MODULE_1__.hasAnyDirectives),\n/* harmony export */   hasClientExports: () => (/* reexport safe */ _graphql_directives_js__WEBPACK_IMPORTED_MODULE_1__.hasClientExports),\n/* harmony export */   hasDirectives: () => (/* reexport safe */ _graphql_directives_js__WEBPACK_IMPORTED_MODULE_1__.hasDirectives),\n/* harmony export */   isApolloPayloadResult: () => (/* reexport safe */ _common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_27__.isApolloPayloadResult),\n/* harmony export */   isArray: () => (/* reexport safe */ _common_arrays_js__WEBPACK_IMPORTED_MODULE_19__.isArray),\n/* harmony export */   isDocumentNode: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.isDocumentNode),\n/* harmony export */   isExecutionPatchIncrementalResult: () => (/* reexport safe */ _common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_27__.isExecutionPatchIncrementalResult),\n/* harmony export */   isExecutionPatchInitialResult: () => (/* reexport safe */ _common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_27__.isExecutionPatchInitialResult),\n/* harmony export */   isExecutionPatchResult: () => (/* reexport safe */ _common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_27__.isExecutionPatchResult),\n/* harmony export */   isField: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.isField),\n/* harmony export */   isInlineFragment: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.isInlineFragment),\n/* harmony export */   isMutationOperation: () => (/* reexport safe */ _graphql_operations_js__WEBPACK_IMPORTED_MODULE_8__.isMutationOperation),\n/* harmony export */   isNonEmptyArray: () => (/* reexport safe */ _common_arrays_js__WEBPACK_IMPORTED_MODULE_19__.isNonEmptyArray),\n/* harmony export */   isNonNullObject: () => (/* reexport safe */ _common_objects_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ _common_objects_js__WEBPACK_IMPORTED_MODULE_20__.isPlainObject),\n/* harmony export */   isQueryOperation: () => (/* reexport safe */ _graphql_operations_js__WEBPACK_IMPORTED_MODULE_8__.isQueryOperation),\n/* harmony export */   isReference: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.isReference),\n/* harmony export */   isStatefulPromise: () => (/* reexport safe */ _promises_decoration_js__WEBPACK_IMPORTED_MODULE_11__.isStatefulPromise),\n/* harmony export */   isSubscriptionOperation: () => (/* reexport safe */ _graphql_operations_js__WEBPACK_IMPORTED_MODULE_8__.isSubscriptionOperation),\n/* harmony export */   iterateObserversSafely: () => (/* reexport safe */ _observables_iteration_js__WEBPACK_IMPORTED_MODULE_15__.iterateObserversSafely),\n/* harmony export */   makeReference: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.makeReference),\n/* harmony export */   makeUniqueId: () => (/* reexport safe */ _common_makeUniqueId_js__WEBPACK_IMPORTED_MODULE_24__.makeUniqueId),\n/* harmony export */   maybe: () => (/* reexport safe */ _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe),\n/* harmony export */   maybeDeepFreeze: () => (/* reexport safe */ _common_maybeDeepFreeze_js__WEBPACK_IMPORTED_MODULE_14__.maybeDeepFreeze),\n/* harmony export */   mergeDeep: () => (/* reexport safe */ _common_mergeDeep_js__WEBPACK_IMPORTED_MODULE_12__.mergeDeep),\n/* harmony export */   mergeDeepArray: () => (/* reexport safe */ _common_mergeDeep_js__WEBPACK_IMPORTED_MODULE_12__.mergeDeepArray),\n/* harmony export */   mergeIncrementalData: () => (/* reexport safe */ _common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_27__.mergeIncrementalData),\n/* harmony export */   mergeOptions: () => (/* reexport safe */ _common_mergeOptions_js__WEBPACK_IMPORTED_MODULE_26__.mergeOptions),\n/* harmony export */   offsetLimitPagination: () => (/* reexport safe */ _policies_pagination_js__WEBPACK_IMPORTED_MODULE_9__.offsetLimitPagination),\n/* harmony export */   omitDeep: () => (/* reexport safe */ _common_omitDeep_js__WEBPACK_IMPORTED_MODULE_29__.omitDeep),\n/* harmony export */   print: () => (/* reexport safe */ _graphql_print_js__WEBPACK_IMPORTED_MODULE_5__.print),\n/* harmony export */   relayStylePagination: () => (/* reexport safe */ _policies_pagination_js__WEBPACK_IMPORTED_MODULE_9__.relayStylePagination),\n/* harmony export */   removeArgumentsFromDocument: () => (/* reexport safe */ _graphql_transform_js__WEBPACK_IMPORTED_MODULE_7__.removeArgumentsFromDocument),\n/* harmony export */   removeClientSetsFromDocument: () => (/* reexport safe */ _graphql_transform_js__WEBPACK_IMPORTED_MODULE_7__.removeClientSetsFromDocument),\n/* harmony export */   removeConnectionDirectiveFromDocument: () => (/* reexport safe */ _graphql_transform_js__WEBPACK_IMPORTED_MODULE_7__.removeConnectionDirectiveFromDocument),\n/* harmony export */   removeDirectivesFromDocument: () => (/* reexport safe */ _graphql_transform_js__WEBPACK_IMPORTED_MODULE_7__.removeDirectivesFromDocument),\n/* harmony export */   removeFragmentSpreadFromDocument: () => (/* reexport safe */ _graphql_transform_js__WEBPACK_IMPORTED_MODULE_7__.removeFragmentSpreadFromDocument),\n/* harmony export */   resultKeyNameFromField: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.resultKeyNameFromField),\n/* harmony export */   shouldInclude: () => (/* reexport safe */ _graphql_directives_js__WEBPACK_IMPORTED_MODULE_1__.shouldInclude),\n/* harmony export */   storeKeyNameFromField: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.storeKeyNameFromField),\n/* harmony export */   stringifyForDisplay: () => (/* reexport safe */ _common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_25__.stringifyForDisplay),\n/* harmony export */   stripTypename: () => (/* reexport safe */ _common_stripTypename_js__WEBPACK_IMPORTED_MODULE_30__.stripTypename),\n/* harmony export */   valueToObjectRepresentation: () => (/* reexport safe */ _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__.valueToObjectRepresentation),\n/* harmony export */   wrapPromiseWithState: () => (/* reexport safe */ _promises_decoration_js__WEBPACK_IMPORTED_MODULE_11__.wrapPromiseWithState)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _graphql_directives_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./graphql/directives.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _graphql_DocumentTransform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./graphql/DocumentTransform.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _graphql_fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./graphql/fragments.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _graphql_getFromAST_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./graphql/getFromAST.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _graphql_print_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./graphql/print.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _graphql_storeUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./graphql/storeUtils.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _graphql_transform_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./graphql/transform.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _graphql_operations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./graphql/operations.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/operations.js\");\n/* harmony import */ var _policies_pagination_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/pagination.js */ \"(ssr)/./node_modules/@apollo/client/utilities/policies/pagination.js\");\n/* harmony import */ var _observables_Observable_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./observables/Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _promises_decoration_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./promises/decoration.js */ \"(ssr)/./node_modules/@apollo/client/utilities/promises/decoration.js\");\n/* harmony import */ var _common_mergeDeep_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./common/mergeDeep.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _common_cloneDeep_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./common/cloneDeep.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _common_maybeDeepFreeze_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./common/maybeDeepFreeze.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _observables_iteration_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./observables/iteration.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _observables_asyncMap_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./observables/asyncMap.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\");\n/* harmony import */ var _observables_Concast_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./observables/Concast.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js\");\n/* harmony import */ var _observables_subclassing_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./observables/subclassing.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n/* harmony import */ var _common_arrays_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./common/arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _common_objects_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./common/objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _common_errorHandling_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./common/errorHandling.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./common/canUse.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _common_compact_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./common/compact.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _common_makeUniqueId_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./common/makeUniqueId.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n/* harmony import */ var _common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./common/stringifyForDisplay.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n/* harmony import */ var _common_mergeOptions_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./common/mergeOptions.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./common/incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./common/canonicalStringify.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _common_omitDeep_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./common/omitDeep.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/omitDeep.js\");\n/* harmony import */ var _common_stripTypename_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./common/stripTypename.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/stripTypename.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFnRDtBQUN5SDtBQUN0RztBQUM2QztBQUMyRjtBQUNoSztBQUNvTjtBQUNEO0FBQ3BKO0FBQ0E7QUFDakQ7QUFDMEU7QUFDN0Y7QUFDQTtBQUNNO0FBQ0Q7QUFDRDtBQUNEO0FBQ0k7QUFDVjtBQUNDO0FBQ007QUFDUDtBQUNDO0FBQ0s7QUFDTztBQUNQO0FBQ0s7QUFDc0I7QUFDcEI7QUFDVTtBQUNqQjtBQUNzRCxDQUMvRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZW9uYXJkby1haS1jaGFsbGVuZ2UvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2luZGV4LmpzPzBjZWMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgREVWLCBtYXliZSB9IGZyb20gXCIuL2dsb2JhbHMvaW5kZXguanNcIjtcbmV4cG9ydCB7IHNob3VsZEluY2x1ZGUsIGhhc0RpcmVjdGl2ZXMsIGhhc0FueURpcmVjdGl2ZXMsIGhhc0FsbERpcmVjdGl2ZXMsIGhhc0NsaWVudEV4cG9ydHMsIGdldERpcmVjdGl2ZU5hbWVzLCBnZXRJbmNsdXNpb25EaXJlY3RpdmVzLCB9IGZyb20gXCIuL2dyYXBocWwvZGlyZWN0aXZlcy5qc1wiO1xuZXhwb3J0IHsgRG9jdW1lbnRUcmFuc2Zvcm0gfSBmcm9tIFwiLi9ncmFwaHFsL0RvY3VtZW50VHJhbnNmb3JtLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVGcmFnbWVudE1hcCwgZ2V0RnJhZ21lbnRRdWVyeURvY3VtZW50LCBnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24sIH0gZnJvbSBcIi4vZ3JhcGhxbC9mcmFnbWVudHMuanNcIjtcbmV4cG9ydCB7IGNoZWNrRG9jdW1lbnQsIGdldE9wZXJhdGlvbkRlZmluaXRpb24sIGdldE9wZXJhdGlvbk5hbWUsIGdldEZyYWdtZW50RGVmaW5pdGlvbnMsIGdldFF1ZXJ5RGVmaW5pdGlvbiwgZ2V0RnJhZ21lbnREZWZpbml0aW9uLCBnZXRNYWluRGVmaW5pdGlvbiwgZ2V0RGVmYXVsdFZhbHVlcywgfSBmcm9tIFwiLi9ncmFwaHFsL2dldEZyb21BU1QuanNcIjtcbmV4cG9ydCB7IHByaW50IH0gZnJvbSBcIi4vZ3JhcGhxbC9wcmludC5qc1wiO1xuZXhwb3J0IHsgbWFrZVJlZmVyZW5jZSwgaXNEb2N1bWVudE5vZGUsIGlzUmVmZXJlbmNlLCBpc0ZpZWxkLCBpc0lubGluZUZyYWdtZW50LCB2YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24sIHN0b3JlS2V5TmFtZUZyb21GaWVsZCwgYXJndW1lbnRzT2JqZWN0RnJvbUZpZWxkLCByZXN1bHRLZXlOYW1lRnJvbUZpZWxkLCBnZXRTdG9yZUtleU5hbWUsIGdldFR5cGVuYW1lRnJvbVJlc3VsdCwgfSBmcm9tIFwiLi9ncmFwaHFsL3N0b3JlVXRpbHMuanNcIjtcbmV4cG9ydCB7IGFkZFR5cGVuYW1lVG9Eb2N1bWVudCwgYnVpbGRRdWVyeUZyb21TZWxlY3Rpb25TZXQsIHJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQsIHJlbW92ZUNvbm5lY3Rpb25EaXJlY3RpdmVGcm9tRG9jdW1lbnQsIHJlbW92ZUFyZ3VtZW50c0Zyb21Eb2N1bWVudCwgcmVtb3ZlRnJhZ21lbnRTcHJlYWRGcm9tRG9jdW1lbnQsIHJlbW92ZUNsaWVudFNldHNGcm9tRG9jdW1lbnQsIH0gZnJvbSBcIi4vZ3JhcGhxbC90cmFuc2Zvcm0uanNcIjtcbmV4cG9ydCB7IGlzTXV0YXRpb25PcGVyYXRpb24sIGlzUXVlcnlPcGVyYXRpb24sIGlzU3Vic2NyaXB0aW9uT3BlcmF0aW9uLCB9IGZyb20gXCIuL2dyYXBocWwvb3BlcmF0aW9ucy5qc1wiO1xuZXhwb3J0IHsgY29uY2F0UGFnaW5hdGlvbiwgb2Zmc2V0TGltaXRQYWdpbmF0aW9uLCByZWxheVN0eWxlUGFnaW5hdGlvbiwgfSBmcm9tIFwiLi9wb2xpY2llcy9wYWdpbmF0aW9uLmpzXCI7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZXMvT2JzZXJ2YWJsZS5qc1wiO1xuZXhwb3J0IHsgaXNTdGF0ZWZ1bFByb21pc2UsIGNyZWF0ZUZ1bGZpbGxlZFByb21pc2UsIGNyZWF0ZVJlamVjdGVkUHJvbWlzZSwgd3JhcFByb21pc2VXaXRoU3RhdGUsIH0gZnJvbSBcIi4vcHJvbWlzZXMvZGVjb3JhdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tbW9uL21lcmdlRGVlcC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tbW9uL2Nsb25lRGVlcC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tbW9uL21heWJlRGVlcEZyZWV6ZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vb2JzZXJ2YWJsZXMvaXRlcmF0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9vYnNlcnZhYmxlcy9hc3luY01hcC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vb2JzZXJ2YWJsZXMvQ29uY2FzdC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vb2JzZXJ2YWJsZXMvc3ViY2xhc3NpbmcuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbW1vbi9hcnJheXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbW1vbi9vYmplY3RzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb21tb24vZXJyb3JIYW5kbGluZy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tbW9uL2NhblVzZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tbW9uL2NvbXBhY3QuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbW1vbi9tYWtlVW5pcXVlSWQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbW1vbi9zdHJpbmdpZnlGb3JEaXNwbGF5LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb21tb24vbWVyZ2VPcHRpb25zLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb21tb24vaW5jcmVtZW50YWxSZXN1bHQuanNcIjtcbmV4cG9ydCB7IGNhbm9uaWNhbFN0cmluZ2lmeSB9IGZyb20gXCIuL2NvbW1vbi9jYW5vbmljYWxTdHJpbmdpZnkuanNcIjtcbmV4cG9ydCB7IG9taXREZWVwIH0gZnJvbSBcIi4vY29tbW9uL29taXREZWVwLmpzXCI7XG5leHBvcnQgeyBzdHJpcFR5cGVuYW1lIH0gZnJvbSBcIi4vY29tbW9uL3N0cmlwVHlwZW5hbWUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzL0lzU3RyaWN0bHlBbnkuanNcIjtcbmV4cG9ydCB7IEF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUsIEF1dG9DbGVhbmVkV2Vha0NhY2hlLCBjYWNoZVNpemVzLCB9IGZyb20gXCIuL2NhY2hpbmcvaW5kZXguanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJERVYiLCJtYXliZSIsInNob3VsZEluY2x1ZGUiLCJoYXNEaXJlY3RpdmVzIiwiaGFzQW55RGlyZWN0aXZlcyIsImhhc0FsbERpcmVjdGl2ZXMiLCJoYXNDbGllbnRFeHBvcnRzIiwiZ2V0RGlyZWN0aXZlTmFtZXMiLCJnZXRJbmNsdXNpb25EaXJlY3RpdmVzIiwiRG9jdW1lbnRUcmFuc2Zvcm0iLCJjcmVhdGVGcmFnbWVudE1hcCIsImdldEZyYWdtZW50UXVlcnlEb2N1bWVudCIsImdldEZyYWdtZW50RnJvbVNlbGVjdGlvbiIsImNoZWNrRG9jdW1lbnQiLCJnZXRPcGVyYXRpb25EZWZpbml0aW9uIiwiZ2V0T3BlcmF0aW9uTmFtZSIsImdldEZyYWdtZW50RGVmaW5pdGlvbnMiLCJnZXRRdWVyeURlZmluaXRpb24iLCJnZXRGcmFnbWVudERlZmluaXRpb24iLCJnZXRNYWluRGVmaW5pdGlvbiIsImdldERlZmF1bHRWYWx1ZXMiLCJwcmludCIsIm1ha2VSZWZlcmVuY2UiLCJpc0RvY3VtZW50Tm9kZSIsImlzUmVmZXJlbmNlIiwiaXNGaWVsZCIsImlzSW5saW5lRnJhZ21lbnQiLCJ2YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24iLCJzdG9yZUtleU5hbWVGcm9tRmllbGQiLCJhcmd1bWVudHNPYmplY3RGcm9tRmllbGQiLCJyZXN1bHRLZXlOYW1lRnJvbUZpZWxkIiwiZ2V0U3RvcmVLZXlOYW1lIiwiZ2V0VHlwZW5hbWVGcm9tUmVzdWx0IiwiYWRkVHlwZW5hbWVUb0RvY3VtZW50IiwiYnVpbGRRdWVyeUZyb21TZWxlY3Rpb25TZXQiLCJyZW1vdmVEaXJlY3RpdmVzRnJvbURvY3VtZW50IiwicmVtb3ZlQ29ubmVjdGlvbkRpcmVjdGl2ZUZyb21Eb2N1bWVudCIsInJlbW92ZUFyZ3VtZW50c0Zyb21Eb2N1bWVudCIsInJlbW92ZUZyYWdtZW50U3ByZWFkRnJvbURvY3VtZW50IiwicmVtb3ZlQ2xpZW50U2V0c0Zyb21Eb2N1bWVudCIsImlzTXV0YXRpb25PcGVyYXRpb24iLCJpc1F1ZXJ5T3BlcmF0aW9uIiwiaXNTdWJzY3JpcHRpb25PcGVyYXRpb24iLCJjb25jYXRQYWdpbmF0aW9uIiwib2Zmc2V0TGltaXRQYWdpbmF0aW9uIiwicmVsYXlTdHlsZVBhZ2luYXRpb24iLCJPYnNlcnZhYmxlIiwiaXNTdGF0ZWZ1bFByb21pc2UiLCJjcmVhdGVGdWxmaWxsZWRQcm9taXNlIiwiY3JlYXRlUmVqZWN0ZWRQcm9taXNlIiwid3JhcFByb21pc2VXaXRoU3RhdGUiLCJjYW5vbmljYWxTdHJpbmdpZnkiLCJvbWl0RGVlcCIsInN0cmlwVHlwZW5hbWUiLCJBdXRvQ2xlYW5lZFN0cm9uZ0NhY2hlIiwiQXV0b0NsZWFuZWRXZWFrQ2FjaGUiLCJjYWNoZVNpemVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/Concast.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Concast: () => (/* binding */ Concast)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _iteration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iteration.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _subclassing_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subclassing.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n\n\n\n\nfunction isPromiseLike(value) {\n    return value && typeof value.then === \"function\";\n}\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nvar Concast = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Concast, _super);\n    // Not only can the individual elements of the iterable be promises, but\n    // also the iterable itself can be wrapped in a promise.\n    function Concast(sources) {\n        var _this = _super.call(this, function(observer) {\n            _this.addObserver(observer);\n            return function() {\n                return _this.removeObserver(observer);\n            };\n        }) || this;\n        // Active observers receiving broadcast messages. Thanks to this.latest,\n        // we can assume all observers in this Set have received the same most\n        // recent message, though possibly at different times in the past.\n        _this.observers = new Set();\n        _this.promise = new Promise(function(resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        // Bound handler functions that can be reused for every internal\n        // subscription.\n        _this.handlers = {\n            next: function(result) {\n                if (_this.sub !== null) {\n                    _this.latest = [\n                        \"next\",\n                        result\n                    ];\n                    _this.notify(\"next\", result);\n                    (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"next\", result);\n                }\n            },\n            error: function(error) {\n                var sub = _this.sub;\n                if (sub !== null) {\n                    // Delay unsubscribing from the underlying subscription slightly,\n                    // so that immediately subscribing another observer can keep the\n                    // subscription active.\n                    if (sub) setTimeout(function() {\n                        return sub.unsubscribe();\n                    });\n                    _this.sub = null;\n                    _this.latest = [\n                        \"error\",\n                        error\n                    ];\n                    _this.reject(error);\n                    _this.notify(\"error\", error);\n                    (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"error\", error);\n                }\n            },\n            complete: function() {\n                var _a = _this, sub = _a.sub, _b = _a.sources, sources = _b === void 0 ? [] : _b;\n                if (sub !== null) {\n                    // If complete is called before concast.start, this.sources may be\n                    // undefined, so we use a default value of [] for sources. That works\n                    // here because it falls into the if (!value) {...} block, which\n                    // appropriately terminates the Concast, even if this.sources might\n                    // eventually have been initialized to a non-empty array.\n                    var value = sources.shift();\n                    if (!value) {\n                        if (sub) setTimeout(function() {\n                            return sub.unsubscribe();\n                        });\n                        _this.sub = null;\n                        if (_this.latest && _this.latest[0] === \"next\") {\n                            _this.resolve(_this.latest[1]);\n                        } else {\n                            _this.resolve();\n                        }\n                        _this.notify(\"complete\");\n                        // We do not store this.latest = [\"complete\"], because doing so\n                        // discards useful information about the previous next (or\n                        // error) message. Instead, if new observers subscribe after\n                        // this Concast has completed, they will receive the final\n                        // 'next' message (unless there was an error) immediately\n                        // followed by a 'complete' message (see addObserver).\n                        (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"complete\");\n                    } else if (isPromiseLike(value)) {\n                        value.then(function(obs) {\n                            return _this.sub = obs.subscribe(_this.handlers);\n                        }, _this.handlers.error);\n                    } else {\n                        _this.sub = value.subscribe(_this.handlers);\n                    }\n                }\n            }\n        };\n        _this.nextResultListeners = new Set();\n        // A public way to abort observation and broadcast.\n        _this.cancel = function(reason) {\n            _this.reject(reason);\n            _this.sources = [];\n            _this.handlers.error(reason);\n        };\n        // Suppress rejection warnings for this.promise, since it's perfectly\n        // acceptable to pay no attention to this.promise if you're consuming\n        // the results through the normal observable API.\n        _this.promise.catch(function(_) {});\n        // If someone accidentally tries to create a Concast using a subscriber\n        // function, recover by creating an Observable from that subscriber and\n        // using it as the source.\n        if (typeof sources === \"function\") {\n            sources = [\n                new _Observable_js__WEBPACK_IMPORTED_MODULE_2__.Observable(sources)\n            ];\n        }\n        if (isPromiseLike(sources)) {\n            sources.then(function(iterable) {\n                return _this.start(iterable);\n            }, _this.handlers.error);\n        } else {\n            _this.start(sources);\n        }\n        return _this;\n    }\n    Concast.prototype.start = function(sources) {\n        if (this.sub !== void 0) return;\n        // In practice, sources is most often simply an Array of observables.\n        // TODO Consider using sources[Symbol.iterator]() to take advantage\n        // of the laziness of non-Array iterables.\n        this.sources = Array.from(sources);\n        // Calling this.handlers.complete() kicks off consumption of the first\n        // source observable. It's tempting to do this step lazily in\n        // addObserver, but this.promise can be accessed without calling\n        // addObserver, so consumption needs to begin eagerly.\n        this.handlers.complete();\n    };\n    Concast.prototype.deliverLastMessage = function(observer) {\n        if (this.latest) {\n            var nextOrError = this.latest[0];\n            var method = observer[nextOrError];\n            if (method) {\n                method.call(observer, this.latest[1]);\n            }\n            // If the subscription is already closed, and the last message was\n            // a 'next' message, simulate delivery of the final 'complete'\n            // message again.\n            if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n                observer.complete();\n            }\n        }\n    };\n    Concast.prototype.addObserver = function(observer) {\n        if (!this.observers.has(observer)) {\n            // Immediately deliver the most recent message, so we can always\n            // be sure all observers have the latest information.\n            this.deliverLastMessage(observer);\n            this.observers.add(observer);\n        }\n    };\n    Concast.prototype.removeObserver = function(observer) {\n        if (this.observers.delete(observer) && this.observers.size < 1) {\n            // In case there are still any listeners in this.nextResultListeners, and\n            // no error or completion has been broadcast yet, make sure those\n            // observers have a chance to run and then remove themselves from\n            // this.observers.\n            this.handlers.complete();\n        }\n    };\n    Concast.prototype.notify = function(method, arg) {\n        var nextResultListeners = this.nextResultListeners;\n        if (nextResultListeners.size) {\n            // Replacing this.nextResultListeners first ensures it does not grow while\n            // we are iterating over it, potentially leading to infinite loops.\n            this.nextResultListeners = new Set();\n            nextResultListeners.forEach(function(listener) {\n                return listener(method, arg);\n            });\n        }\n    };\n    // We need a way to run callbacks just *before* the next result (or error or\n    // completion) is delivered by this Concast, so we can be sure any code that\n    // runs as a result of delivering that result/error observes the effects of\n    // running the callback(s). It was tempting to reuse the Observer type instead\n    // of introducing NextResultListener, but that messes with the sizing and\n    // maintenance of this.observers, and ends up being more code overall.\n    Concast.prototype.beforeNext = function(callback) {\n        var called = false;\n        this.nextResultListeners.add(function(method, arg) {\n            if (!called) {\n                called = true;\n                callback(method, arg);\n            }\n        });\n    };\n    return Concast;\n}(_Observable_js__WEBPACK_IMPORTED_MODULE_2__.Observable);\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\n(0,_subclassing_js__WEBPACK_IMPORTED_MODULE_3__.fixObservableSubclass)(Concast); //# sourceMappingURL=Concast.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/asyncMap.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asyncMap: () => (/* binding */ asyncMap)\n/* harmony export */ });\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nfunction asyncMap(observable, mapFn, catchFn) {\n    return new _Observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        var promiseQueue = {\n            // Normally we would initialize promiseQueue to Promise.resolve(), but\n            // in this case, for backwards compatibility, we need to be careful to\n            // invoke the first callback synchronously.\n            then: function(callback) {\n                return new Promise(function(resolve) {\n                    return resolve(callback());\n                });\n            }\n        };\n        function makeCallback(examiner, key) {\n            return function(arg) {\n                if (examiner) {\n                    var both = function() {\n                        // If the observer is closed, we don't want to continue calling the\n                        // mapping function - it's result will be swallowed anyways.\n                        return observer.closed ? /* will be swallowed */ 0 : examiner(arg);\n                    };\n                    promiseQueue = promiseQueue.then(both, both).then(function(result) {\n                        return observer.next(result);\n                    }, function(error) {\n                        return observer.error(error);\n                    });\n                } else {\n                    observer[key](arg);\n                }\n            };\n        }\n        var handler = {\n            next: makeCallback(mapFn, \"next\"),\n            error: makeCallback(catchFn, \"error\"),\n            complete: function() {\n                // no need to reassign `promiseQueue`, after `observer.complete`,\n                // the observer will be closed and short-circuit everything anyways\n                /*promiseQueue = */ promiseQueue.then(function() {\n                    return observer.complete();\n                });\n            }\n        };\n        var sub = observable.subscribe(handler);\n        return function() {\n            return sub.unsubscribe();\n        };\n    });\n} //# sourceMappingURL=asyncMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2FzeW5jTWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZDO0FBQzdDLHNFQUFzRTtBQUN0RSw2Q0FBNkM7QUFDdEMsU0FBU0MsU0FBU0MsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDL0MsT0FBTyxJQUFJSixzREFBVUEsQ0FBQyxTQUFVSyxRQUFRO1FBQ3BDLElBQUlDLGVBQWU7WUFDZixzRUFBc0U7WUFDdEUsc0VBQXNFO1lBQ3RFLDJDQUEyQztZQUMzQ0MsTUFBTSxTQUFVQyxRQUFRO2dCQUNwQixPQUFPLElBQUlDLFFBQVEsU0FBVUMsT0FBTztvQkFBSSxPQUFPQSxRQUFRRjtnQkFBYTtZQUN4RTtRQUNKO1FBQ0EsU0FBU0csYUFBYUMsUUFBUSxFQUFFQyxHQUFHO1lBQy9CLE9BQU8sU0FBVUMsR0FBRztnQkFDaEIsSUFBSUYsVUFBVTtvQkFDVixJQUFJRyxPQUFPO3dCQUNQLG1FQUFtRTt3QkFDbkUsNERBQTREO3dCQUM1RCxPQUFPVixTQUFTVyxNQUFNLEdBQ2xCLHFCQUFxQixHQUFHLElBQ3RCSixTQUFTRTtvQkFDbkI7b0JBQ0FSLGVBQWVBLGFBQWFDLElBQUksQ0FBQ1EsTUFBTUEsTUFBTVIsSUFBSSxDQUFDLFNBQVVVLE1BQU07d0JBQUksT0FBT1osU0FBU2EsSUFBSSxDQUFDRDtvQkFBUyxHQUFHLFNBQVVFLEtBQUs7d0JBQUksT0FBT2QsU0FBU2MsS0FBSyxDQUFDQTtvQkFBUTtnQkFDNUosT0FDSztvQkFDRGQsUUFBUSxDQUFDUSxJQUFJLENBQUNDO2dCQUNsQjtZQUNKO1FBQ0o7UUFDQSxJQUFJTSxVQUFVO1lBQ1ZGLE1BQU1QLGFBQWFSLE9BQU87WUFDMUJnQixPQUFPUixhQUFhUCxTQUFTO1lBQzdCaUIsVUFBVTtnQkFDTixpRUFBaUU7Z0JBQ2pFLG1FQUFtRTtnQkFDbkUsaUJBQWlCLEdBQUdmLGFBQWFDLElBQUksQ0FBQztvQkFBYyxPQUFPRixTQUFTZ0IsUUFBUTtnQkFBSTtZQUNwRjtRQUNKO1FBQ0EsSUFBSUMsTUFBTXBCLFdBQVdxQixTQUFTLENBQUNIO1FBQy9CLE9BQU87WUFBYyxPQUFPRSxJQUFJRSxXQUFXO1FBQUk7SUFDbkQ7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvYXN5bmNNYXAuanM/YWYyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vT2JzZXJ2YWJsZS5qc1wiO1xuLy8gTGlrZSBPYnNlcnZhYmxlLnByb3RvdHlwZS5tYXAsIGV4Y2VwdCB0aGF0IHRoZSBtYXBwaW5nIGZ1bmN0aW9uIGNhblxuLy8gb3B0aW9uYWxseSByZXR1cm4gYSBQcm9taXNlIChvciBiZSBhc3luYykuXG5leHBvcnQgZnVuY3Rpb24gYXN5bmNNYXAob2JzZXJ2YWJsZSwgbWFwRm4sIGNhdGNoRm4pIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBwcm9taXNlUXVldWUgPSB7XG4gICAgICAgICAgICAvLyBOb3JtYWxseSB3ZSB3b3VsZCBpbml0aWFsaXplIHByb21pc2VRdWV1ZSB0byBQcm9taXNlLnJlc29sdmUoKSwgYnV0XG4gICAgICAgICAgICAvLyBpbiB0aGlzIGNhc2UsIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgbmVlZCB0byBiZSBjYXJlZnVsIHRvXG4gICAgICAgICAgICAvLyBpbnZva2UgdGhlIGZpcnN0IGNhbGxiYWNrIHN5bmNocm9ub3VzbHkuXG4gICAgICAgICAgICB0aGVuOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHJlc29sdmUoY2FsbGJhY2soKSk7IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gbWFrZUNhbGxiYWNrKGV4YW1pbmVyLCBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4YW1pbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9ic2VydmVyIGlzIGNsb3NlZCwgd2UgZG9uJ3Qgd2FudCB0byBjb250aW51ZSBjYWxsaW5nIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFwcGluZyBmdW5jdGlvbiAtIGl0J3MgcmVzdWx0IHdpbGwgYmUgc3dhbGxvd2VkIGFueXdheXMuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuY2xvc2VkID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB3aWxsIGJlIHN3YWxsb3dlZCAqLyAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBleGFtaW5lcihhcmcpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlUXVldWUgPSBwcm9taXNlUXVldWUudGhlbihib3RoLCBib3RoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIG9ic2VydmVyLm5leHQocmVzdWx0KTsgfSwgZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBvYnNlcnZlci5lcnJvcihlcnJvcik7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJba2V5XShhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhhbmRsZXIgPSB7XG4gICAgICAgICAgICBuZXh0OiBtYWtlQ2FsbGJhY2sobWFwRm4sIFwibmV4dFwiKSxcbiAgICAgICAgICAgIGVycm9yOiBtYWtlQ2FsbGJhY2soY2F0Y2hGbiwgXCJlcnJvclwiKSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByZWFzc2lnbiBgcHJvbWlzZVF1ZXVlYCwgYWZ0ZXIgYG9ic2VydmVyLmNvbXBsZXRlYCxcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2JzZXJ2ZXIgd2lsbCBiZSBjbG9zZWQgYW5kIHNob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBhbnl3YXlzXG4gICAgICAgICAgICAgICAgLypwcm9taXNlUXVldWUgPSAqLyBwcm9taXNlUXVldWUudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBvYnNlcnZlci5jb21wbGV0ZSgpOyB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdWIgPSBvYnNlcnZhYmxlLnN1YnNjcmliZShoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1Yi51bnN1YnNjcmliZSgpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmNNYXAuanMubWFwIl0sIm5hbWVzIjpbIk9ic2VydmFibGUiLCJhc3luY01hcCIsIm9ic2VydmFibGUiLCJtYXBGbiIsImNhdGNoRm4iLCJvYnNlcnZlciIsInByb21pc2VRdWV1ZSIsInRoZW4iLCJjYWxsYmFjayIsIlByb21pc2UiLCJyZXNvbHZlIiwibWFrZUNhbGxiYWNrIiwiZXhhbWluZXIiLCJrZXkiLCJhcmciLCJib3RoIiwiY2xvc2VkIiwicmVzdWx0IiwibmV4dCIsImVycm9yIiwiaGFuZGxlciIsImNvbXBsZXRlIiwic3ViIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js":
/*!************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/iteration.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iterateObserversSafely: () => (/* binding */ iterateObserversSafely)\n/* harmony export */ });\nfunction iterateObserversSafely(observers, method, argument) {\n    // In case observers is modified during iteration, we need to commit to the\n    // original elements, which also provides an opportunity to filter them down\n    // to just the observers with the given method.\n    var observersWithMethod = [];\n    observers.forEach(function(obs) {\n        return obs[method] && observersWithMethod.push(obs);\n    });\n    observersWithMethod.forEach(function(obs) {\n        return obs[method](argument);\n    });\n} //# sourceMappingURL=iteration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2l0ZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsdUJBQXVCQyxTQUFTLEVBQUVDLE1BQU0sRUFBRUMsUUFBUTtJQUM5RCwyRUFBMkU7SUFDM0UsNEVBQTRFO0lBQzVFLCtDQUErQztJQUMvQyxJQUFJQyxzQkFBc0IsRUFBRTtJQUM1QkgsVUFBVUksT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFBSSxPQUFPQSxHQUFHLENBQUNKLE9BQU8sSUFBSUUsb0JBQW9CRyxJQUFJLENBQUNEO0lBQU07SUFDeEZGLG9CQUFvQkMsT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFBSSxPQUFPQSxHQUFHLENBQUNKLE9BQU8sQ0FBQ0M7SUFBVztBQUMvRSxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvaXRlcmF0aW9uLmpzP2I0NzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGl0ZXJhdGVPYnNlcnZlcnNTYWZlbHkob2JzZXJ2ZXJzLCBtZXRob2QsIGFyZ3VtZW50KSB7XG4gICAgLy8gSW4gY2FzZSBvYnNlcnZlcnMgaXMgbW9kaWZpZWQgZHVyaW5nIGl0ZXJhdGlvbiwgd2UgbmVlZCB0byBjb21taXQgdG8gdGhlXG4gICAgLy8gb3JpZ2luYWwgZWxlbWVudHMsIHdoaWNoIGFsc28gcHJvdmlkZXMgYW4gb3Bwb3J0dW5pdHkgdG8gZmlsdGVyIHRoZW0gZG93blxuICAgIC8vIHRvIGp1c3QgdGhlIG9ic2VydmVycyB3aXRoIHRoZSBnaXZlbiBtZXRob2QuXG4gICAgdmFyIG9ic2VydmVyc1dpdGhNZXRob2QgPSBbXTtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzKSB7IHJldHVybiBvYnNbbWV0aG9kXSAmJiBvYnNlcnZlcnNXaXRoTWV0aG9kLnB1c2gob2JzKTsgfSk7XG4gICAgb2JzZXJ2ZXJzV2l0aE1ldGhvZC5mb3JFYWNoKGZ1bmN0aW9uIChvYnMpIHsgcmV0dXJuIG9ic1ttZXRob2RdKGFyZ3VtZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIml0ZXJhdGVPYnNlcnZlcnNTYWZlbHkiLCJvYnNlcnZlcnMiLCJtZXRob2QiLCJhcmd1bWVudCIsIm9ic2VydmVyc1dpdGhNZXRob2QiLCJmb3JFYWNoIiwib2JzIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/subclassing.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fixObservableSubclass: () => (/* binding */ fixObservableSubclass)\n/* harmony export */ });\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/canUse.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nfunction fixObservableSubclass(subclass) {\n    function set(key) {\n        // Object.defineProperty is necessary because the Symbol.species\n        // property is a getter by default in modern JS environments, so we\n        // can't assign to it with a normal assignment expression.\n        Object.defineProperty(subclass, key, {\n            value: _Observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable\n        });\n    }\n    if (_common_canUse_js__WEBPACK_IMPORTED_MODULE_1__.canUseSymbol && Symbol.species) {\n        set(Symbol.species);\n    }\n    // The \"@@species\" string is used as a fake Symbol.species value in some\n    // polyfill systems (including the SymbolSpecies variable used by\n    // zen-observable), so we should set it as well, to be safe.\n    set(\"@@species\");\n    return subclass;\n} //# sourceMappingURL=subclassing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL3N1YmNsYXNzaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNNO0FBQ25ELHVFQUF1RTtBQUN2RSx3RUFBd0U7QUFDeEUsbUVBQW1FO0FBQ25FLDBFQUEwRTtBQUMxRSx5RUFBeUU7QUFDekUsd0VBQXdFO0FBQ3hFLHVFQUF1RTtBQUN2RSx1RUFBdUU7QUFDaEUsU0FBU0Usc0JBQXNCQyxRQUFRO0lBQzFDLFNBQVNDLElBQUlDLEdBQUc7UUFDWixnRUFBZ0U7UUFDaEUsbUVBQW1FO1FBQ25FLDBEQUEwRDtRQUMxREMsT0FBT0MsY0FBYyxDQUFDSixVQUFVRSxLQUFLO1lBQUVHLE9BQU9SLHNEQUFVQTtRQUFDO0lBQzdEO0lBQ0EsSUFBSUMsMkRBQVlBLElBQUlRLE9BQU9DLE9BQU8sRUFBRTtRQUNoQ04sSUFBSUssT0FBT0MsT0FBTztJQUN0QjtJQUNBLHdFQUF3RTtJQUN4RSxpRUFBaUU7SUFDakUsNERBQTREO0lBQzVETixJQUFJO0lBQ0osT0FBT0Q7QUFDWCxFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvc3ViY2xhc3NpbmcuanM/YTFmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vT2JzZXJ2YWJsZS5qc1wiO1xuaW1wb3J0IHsgY2FuVXNlU3ltYm9sIH0gZnJvbSBcIi4uL2NvbW1vbi9jYW5Vc2UuanNcIjtcbi8vIEdlbmVyaWMgaW1wbGVtZW50YXRpb25zIG9mIE9ic2VydmFibGUucHJvdG90eXBlIG1ldGhvZHMgbGlrZSBtYXAgYW5kXG4vLyBmaWx0ZXIgbmVlZCB0byBrbm93IGhvdyB0byBjcmVhdGUgYSBuZXcgT2JzZXJ2YWJsZSBmcm9tIGFuIE9ic2VydmFibGVcbi8vIHN1YmNsYXNzIChsaWtlIENvbmNhc3Qgb3IgT2JzZXJ2YWJsZVF1ZXJ5KS4gVGhvc2UgbWV0aG9kcyBhc3N1bWVcbi8vIChwZXJoYXBzIHVud2lzZWx5PykgdGhhdCB0aGV5IGNhbiBjYWxsIHRoZSBzdWJ0eXBlJ3MgY29uc3RydWN0b3Igd2l0aCBhXG4vLyBTdWJzY3JpYmVyIGZ1bmN0aW9uLCBldmVuIHRob3VnaCB0aGUgc3ViY2xhc3MgY29uc3RydWN0b3IgbWlnaHQgZXhwZWN0XG4vLyBkaWZmZXJlbnQgcGFyYW1ldGVycy4gRGVmaW5pbmcgdGhpcyBzdGF0aWMgU3ltYm9sLnNwZWNpZXMgcHJvcGVydHkgb25cbi8vIHRoZSBzdWJjbGFzcyBpcyBhIGhpbnQgdG8gZ2VuZXJpYyBPYnNlcnZhYmxlIGNvZGUgdG8gdXNlIHRoZSBkZWZhdWx0XG4vLyBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRyeWluZyB0byBkbyBgbmV3IFN1YmNsYXNzKG9ic2VydmVyID0+IC4uLilgLlxuZXhwb3J0IGZ1bmN0aW9uIGZpeE9ic2VydmFibGVTdWJjbGFzcyhzdWJjbGFzcykge1xuICAgIGZ1bmN0aW9uIHNldChrZXkpIHtcbiAgICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBTeW1ib2wuc3BlY2llc1xuICAgICAgICAvLyBwcm9wZXJ0eSBpcyBhIGdldHRlciBieSBkZWZhdWx0IGluIG1vZGVybiBKUyBlbnZpcm9ubWVudHMsIHNvIHdlXG4gICAgICAgIC8vIGNhbid0IGFzc2lnbiB0byBpdCB3aXRoIGEgbm9ybWFsIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YmNsYXNzLCBrZXksIHsgdmFsdWU6IE9ic2VydmFibGUgfSk7XG4gICAgfVxuICAgIGlmIChjYW5Vc2VTeW1ib2wgJiYgU3ltYm9sLnNwZWNpZXMpIHtcbiAgICAgICAgc2V0KFN5bWJvbC5zcGVjaWVzKTtcbiAgICB9XG4gICAgLy8gVGhlIFwiQEBzcGVjaWVzXCIgc3RyaW5nIGlzIHVzZWQgYXMgYSBmYWtlIFN5bWJvbC5zcGVjaWVzIHZhbHVlIGluIHNvbWVcbiAgICAvLyBwb2x5ZmlsbCBzeXN0ZW1zIChpbmNsdWRpbmcgdGhlIFN5bWJvbFNwZWNpZXMgdmFyaWFibGUgdXNlZCBieVxuICAgIC8vIHplbi1vYnNlcnZhYmxlKSwgc28gd2Ugc2hvdWxkIHNldCBpdCBhcyB3ZWxsLCB0byBiZSBzYWZlLlxuICAgIHNldChcIkBAc3BlY2llc1wiKTtcbiAgICByZXR1cm4gc3ViY2xhc3M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJjbGFzc2luZy5qcy5tYXAiXSwibmFtZXMiOlsiT2JzZXJ2YWJsZSIsImNhblVzZVN5bWJvbCIsImZpeE9ic2VydmFibGVTdWJjbGFzcyIsInN1YmNsYXNzIiwic2V0Iiwia2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIlN5bWJvbCIsInNwZWNpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/policies/pagination.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/policies/pagination.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concatPagination: () => (/* binding */ concatPagination),\n/* harmony export */   offsetLimitPagination: () => (/* binding */ offsetLimitPagination),\n/* harmony export */   relayStylePagination: () => (/* binding */ relayStylePagination)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _common_mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/mergeDeep.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n\n\n\n// A very basic pagination field policy that always concatenates new\n// results onto the existing array, without examining options.args.\nfunction concatPagination(keyArgs) {\n    if (keyArgs === void 0) {\n        keyArgs = false;\n    }\n    return {\n        keyArgs: keyArgs,\n        merge: function(existing, incoming) {\n            return existing ? (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], existing, true), incoming, true) : incoming;\n        }\n    };\n}\n// A basic field policy that uses options.args.{offset,limit} to splice\n// the incoming data into the existing array. If your arguments are called\n// something different (like args.{start,count}), feel free to copy/paste\n// this implementation and make the appropriate changes.\nfunction offsetLimitPagination(keyArgs) {\n    if (keyArgs === void 0) {\n        keyArgs = false;\n    }\n    return {\n        keyArgs: keyArgs,\n        merge: function(existing, incoming, _a) {\n            var args = _a.args;\n            var merged = existing ? existing.slice(0) : [];\n            if (incoming) {\n                if (args) {\n                    // Assume an offset of 0 if args.offset omitted.\n                    var _b = args.offset, offset = _b === void 0 ? 0 : _b;\n                    for(var i = 0; i < incoming.length; ++i){\n                        merged[offset + i] = incoming[i];\n                    }\n                } else {\n                    // It's unusual (probably a mistake) for a paginated field not\n                    // to receive any arguments, so you might prefer to throw an\n                    // exception here, instead of recovering by appending incoming\n                    // onto the existing array.\n                    merged.push.apply(merged, incoming);\n                }\n            }\n            return merged;\n        }\n    };\n}\n// As proof of the flexibility of field policies, this function generates\n// one that handles Relay-style pagination, without Apollo Client knowing\n// anything about connections, edges, cursors, or pageInfo objects.\nfunction relayStylePagination(keyArgs) {\n    if (keyArgs === void 0) {\n        keyArgs = false;\n    }\n    return {\n        keyArgs: keyArgs,\n        read: function(existing, _a) {\n            var canRead = _a.canRead, readField = _a.readField;\n            if (!existing) return existing;\n            var edges = [];\n            var firstEdgeCursor = \"\";\n            var lastEdgeCursor = \"\";\n            existing.edges.forEach(function(edge) {\n                // Edges themselves could be Reference objects, so it's important\n                // to use readField to access the edge.edge.node property.\n                if (canRead(readField(\"node\", edge))) {\n                    edges.push(edge);\n                    if (edge.cursor) {\n                        firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n                        lastEdgeCursor = edge.cursor || lastEdgeCursor;\n                    }\n                }\n            });\n            if (edges.length > 1 && firstEdgeCursor === lastEdgeCursor) {\n                firstEdgeCursor = \"\";\n            }\n            var _b = existing.pageInfo || {}, startCursor = _b.startCursor, endCursor = _b.endCursor;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, getExtras(existing)), {\n                edges: edges,\n                pageInfo: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, existing.pageInfo), {\n                    // If existing.pageInfo.{start,end}Cursor are undefined or \"\", default\n                    // to firstEdgeCursor and/or lastEdgeCursor.\n                    startCursor: startCursor || firstEdgeCursor,\n                    endCursor: endCursor || lastEdgeCursor\n                })\n            });\n        },\n        merge: function(existing, incoming, _a) {\n            var args = _a.args, isReference = _a.isReference, readField = _a.readField;\n            if (!existing) {\n                existing = makeEmptyData();\n            }\n            if (!incoming) {\n                return existing;\n            }\n            var incomingEdges = incoming.edges ? incoming.edges.map(function(edge) {\n                if (isReference(edge = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, edge))) {\n                    // In case edge is a Reference, we read out its cursor field and\n                    // store it as an extra property of the Reference object.\n                    edge.cursor = readField(\"cursor\", edge);\n                }\n                return edge;\n            }) : [];\n            if (incoming.pageInfo) {\n                var pageInfo_1 = incoming.pageInfo;\n                var startCursor = pageInfo_1.startCursor, endCursor = pageInfo_1.endCursor;\n                var firstEdge = incomingEdges[0];\n                var lastEdge = incomingEdges[incomingEdges.length - 1];\n                // In case we did not request the cursor field for edges in this\n                // query, we can still infer cursors from pageInfo.\n                if (firstEdge && startCursor) {\n                    firstEdge.cursor = startCursor;\n                }\n                if (lastEdge && endCursor) {\n                    lastEdge.cursor = endCursor;\n                }\n                // Cursors can also come from edges, so we default\n                // pageInfo.{start,end}Cursor to {first,last}Edge.cursor.\n                var firstCursor = firstEdge && firstEdge.cursor;\n                if (firstCursor && !startCursor) {\n                    incoming = (0,_common_mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(incoming, {\n                        pageInfo: {\n                            startCursor: firstCursor\n                        }\n                    });\n                }\n                var lastCursor = lastEdge && lastEdge.cursor;\n                if (lastCursor && !endCursor) {\n                    incoming = (0,_common_mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(incoming, {\n                        pageInfo: {\n                            endCursor: lastCursor\n                        }\n                    });\n                }\n            }\n            var prefix = existing.edges;\n            var suffix = [];\n            if (args && args.after) {\n                // This comparison does not need to use readField(\"cursor\", edge),\n                // because we stored the cursor field of any Reference edges as an\n                // extra property of the Reference object.\n                var index = prefix.findIndex(function(edge) {\n                    return edge.cursor === args.after;\n                });\n                if (index >= 0) {\n                    prefix = prefix.slice(0, index + 1);\n                // suffix = []; // already true\n                }\n            } else if (args && args.before) {\n                var index = prefix.findIndex(function(edge) {\n                    return edge.cursor === args.before;\n                });\n                suffix = index < 0 ? prefix : prefix.slice(index);\n                prefix = [];\n            } else if (incoming.edges) {\n                // If we have neither args.after nor args.before, the incoming\n                // edges cannot be spliced into the existing edges, so they must\n                // replace the existing edges. See #6592 for a motivating example.\n                prefix = [];\n            }\n            var edges = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], prefix, true), incomingEdges, true), suffix, true);\n            var pageInfo = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, incoming.pageInfo), existing.pageInfo);\n            if (incoming.pageInfo) {\n                var _b = incoming.pageInfo, hasPreviousPage = _b.hasPreviousPage, hasNextPage = _b.hasNextPage, startCursor = _b.startCursor, endCursor = _b.endCursor, extras = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(_b, [\n                    \"hasPreviousPage\",\n                    \"hasNextPage\",\n                    \"startCursor\",\n                    \"endCursor\"\n                ]);\n                // If incoming.pageInfo had any extra non-standard properties,\n                // assume they should take precedence over any existing properties\n                // of the same name, regardless of where this page falls with\n                // respect to the existing data.\n                Object.assign(pageInfo, extras);\n                // Keep existing.pageInfo.has{Previous,Next}Page unless the\n                // placement of the incoming edges means incoming.hasPreviousPage\n                // or incoming.hasNextPage should become the new values for those\n                // properties in existing.pageInfo. Note that these updates are\n                // only permitted when the beginning or end of the incoming page\n                // coincides with the beginning or end of the existing data, as\n                // determined using prefix.length and suffix.length.\n                if (!prefix.length) {\n                    if (void 0 !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;\n                    if (void 0 !== startCursor) pageInfo.startCursor = startCursor;\n                }\n                if (!suffix.length) {\n                    if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;\n                    if (void 0 !== endCursor) pageInfo.endCursor = endCursor;\n                }\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, getExtras(existing)), getExtras(incoming)), {\n                edges: edges,\n                pageInfo: pageInfo\n            });\n        }\n    };\n}\n// Returns any unrecognized properties of the given object.\nvar getExtras = function(obj) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(obj, notExtras);\n};\nvar notExtras = [\n    \"edges\",\n    \"pageInfo\"\n];\nfunction makeEmptyData() {\n    return {\n        edges: [],\n        pageInfo: {\n            hasPreviousPage: false,\n            hasNextPage: true,\n            startCursor: \"\",\n            endCursor: \"\"\n        }\n    };\n} //# sourceMappingURL=pagination.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/policies/pagination.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/promises/decoration.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/promises/decoration.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFulfilledPromise: () => (/* binding */ createFulfilledPromise),\n/* harmony export */   createRejectedPromise: () => (/* binding */ createRejectedPromise),\n/* harmony export */   isStatefulPromise: () => (/* binding */ isStatefulPromise),\n/* harmony export */   wrapPromiseWithState: () => (/* binding */ wrapPromiseWithState)\n/* harmony export */ });\nfunction createFulfilledPromise(value) {\n    var promise = Promise.resolve(value);\n    promise.status = \"fulfilled\";\n    promise.value = value;\n    return promise;\n}\nfunction createRejectedPromise(reason) {\n    var promise = Promise.reject(reason);\n    // prevent potential edge cases leaking unhandled error rejections\n    promise.catch(function() {});\n    promise.status = \"rejected\";\n    promise.reason = reason;\n    return promise;\n}\nfunction isStatefulPromise(promise) {\n    return \"status\" in promise;\n}\nfunction wrapPromiseWithState(promise) {\n    if (isStatefulPromise(promise)) {\n        return promise;\n    }\n    var pendingPromise = promise;\n    pendingPromise.status = \"pending\";\n    pendingPromise.then(function(value) {\n        if (pendingPromise.status === \"pending\") {\n            var fulfilledPromise = pendingPromise;\n            fulfilledPromise.status = \"fulfilled\";\n            fulfilledPromise.value = value;\n        }\n    }, function(reason) {\n        if (pendingPromise.status === \"pending\") {\n            var rejectedPromise = pendingPromise;\n            rejectedPromise.status = \"rejected\";\n            rejectedPromise.reason = reason;\n        }\n    });\n    return promise;\n} //# sourceMappingURL=decoration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL3Byb21pc2VzL2RlY29yYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPLFNBQVNBLHVCQUF1QkMsS0FBSztJQUN4QyxJQUFJQyxVQUFVQyxRQUFRQyxPQUFPLENBQUNIO0lBQzlCQyxRQUFRRyxNQUFNLEdBQUc7SUFDakJILFFBQVFELEtBQUssR0FBR0E7SUFDaEIsT0FBT0M7QUFDWDtBQUNPLFNBQVNJLHNCQUFzQkMsTUFBTTtJQUN4QyxJQUFJTCxVQUFVQyxRQUFRSyxNQUFNLENBQUNEO0lBQzdCLGtFQUFrRTtJQUNsRUwsUUFBUU8sS0FBSyxDQUFDLFlBQWM7SUFDNUJQLFFBQVFHLE1BQU0sR0FBRztJQUNqQkgsUUFBUUssTUFBTSxHQUFHQTtJQUNqQixPQUFPTDtBQUNYO0FBQ08sU0FBU1Esa0JBQWtCUixPQUFPO0lBQ3JDLE9BQU8sWUFBWUE7QUFDdkI7QUFDTyxTQUFTUyxxQkFBcUJULE9BQU87SUFDeEMsSUFBSVEsa0JBQWtCUixVQUFVO1FBQzVCLE9BQU9BO0lBQ1g7SUFDQSxJQUFJVSxpQkFBaUJWO0lBQ3JCVSxlQUFlUCxNQUFNLEdBQUc7SUFDeEJPLGVBQWVDLElBQUksQ0FBQyxTQUFVWixLQUFLO1FBQy9CLElBQUlXLGVBQWVQLE1BQU0sS0FBSyxXQUFXO1lBQ3JDLElBQUlTLG1CQUFtQkY7WUFDdkJFLGlCQUFpQlQsTUFBTSxHQUFHO1lBQzFCUyxpQkFBaUJiLEtBQUssR0FBR0E7UUFDN0I7SUFDSixHQUFHLFNBQVVNLE1BQU07UUFDZixJQUFJSyxlQUFlUCxNQUFNLEtBQUssV0FBVztZQUNyQyxJQUFJVSxrQkFBa0JIO1lBQ3RCRyxnQkFBZ0JWLE1BQU0sR0FBRztZQUN6QlUsZ0JBQWdCUixNQUFNLEdBQUdBO1FBQzdCO0lBQ0o7SUFDQSxPQUFPTDtBQUNYLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVvbmFyZG8tYWktY2hhbGxlbmdlLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9wcm9taXNlcy9kZWNvcmF0aW9uLmpzP2M1MjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZ1bGZpbGxlZFByb21pc2UodmFsdWUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh2YWx1ZSk7XG4gICAgcHJvbWlzZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgIHByb21pc2UudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWplY3RlZFByb21pc2UocmVhc29uKSB7XG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICAgIC8vIHByZXZlbnQgcG90ZW50aWFsIGVkZ2UgY2FzZXMgbGVha2luZyB1bmhhbmRsZWQgZXJyb3IgcmVqZWN0aW9uc1xuICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkgeyB9KTtcbiAgICBwcm9taXNlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICBwcm9taXNlLnJlYXNvbiA9IHJlYXNvbjtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1N0YXRlZnVsUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIFwic3RhdHVzXCIgaW4gcHJvbWlzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwUHJvbWlzZVdpdGhTdGF0ZShwcm9taXNlKSB7XG4gICAgaWYgKGlzU3RhdGVmdWxQcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICB2YXIgcGVuZGluZ1Byb21pc2UgPSBwcm9taXNlO1xuICAgIHBlbmRpbmdQcm9taXNlLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgIHBlbmRpbmdQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmIChwZW5kaW5nUHJvbWlzZS5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgICB2YXIgZnVsZmlsbGVkUHJvbWlzZSA9IHBlbmRpbmdQcm9taXNlO1xuICAgICAgICAgICAgZnVsZmlsbGVkUHJvbWlzZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgICAgICAgZnVsZmlsbGVkUHJvbWlzZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICBpZiAocGVuZGluZ1Byb21pc2Uuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgICAgdmFyIHJlamVjdGVkUHJvbWlzZSA9IHBlbmRpbmdQcm9taXNlO1xuICAgICAgICAgICAgcmVqZWN0ZWRQcm9taXNlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgICAgICAgIHJlamVjdGVkUHJvbWlzZS5yZWFzb24gPSByZWFzb247XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29yYXRpb24uanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZUZ1bGZpbGxlZFByb21pc2UiLCJ2YWx1ZSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInN0YXR1cyIsImNyZWF0ZVJlamVjdGVkUHJvbWlzZSIsInJlYXNvbiIsInJlamVjdCIsImNhdGNoIiwiaXNTdGF0ZWZ1bFByb21pc2UiLCJ3cmFwUHJvbWlzZVdpdGhTdGF0ZSIsInBlbmRpbmdQcm9taXNlIiwidGhlbiIsImZ1bGZpbGxlZFByb21pc2UiLCJyZWplY3RlZFByb21pc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/promises/decoration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/version.js":
/*!************************************************!*\
  !*** ./node_modules/@apollo/client/version.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nvar version = \"3.11.8\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsVUFBVSxTQUFTLENBQzlCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlb25hcmRvLWFpLWNoYWxsZW5nZS8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC92ZXJzaW9uLmpzPzZmZGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciB2ZXJzaW9uID0gXCIzLjExLjhcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/version.js\n");

/***/ })

};
;